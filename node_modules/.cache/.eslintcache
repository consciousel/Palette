[{"C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\NFT_minter\\src\\index.js":"1","C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\NFT_minter\\src\\App.js":"2","C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\NFT_minter\\src\\reportWebVitals.js":"3","C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\NFT_minter\\src\\Minter.js":"4","C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\NFT_minter\\src\\utils\\interact.js":"5","C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\NFT_minter\\src\\utils\\nftport.js":"6","C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\Palette\\src\\index.js":"7","C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\Palette\\src\\reportWebVitals.js":"8","C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\Palette\\src\\App.js":"9","C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\Palette\\src\\Minter.js":"10","C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\Palette\\src\\utils\\interact.js":"11","C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\Palette\\src\\utils\\nftport.js":"12"},{"size":517,"mtime":1650580257932,"results":"13","hashOfConfig":"14"},{"size":333,"mtime":1653420084027,"results":"15","hashOfConfig":"14"},{"size":375,"mtime":1650396744325,"results":"16","hashOfConfig":"14"},{"size":11403,"mtime":1654189788287,"results":"17","hashOfConfig":"14"},{"size":4807,"mtime":1654126457702,"results":"18","hashOfConfig":"14"},{"size":1683,"mtime":1654126351279,"results":"19","hashOfConfig":"14"},{"size":517,"mtime":1650580257932,"results":"20","hashOfConfig":"21"},{"size":375,"mtime":1650396744325,"results":"22","hashOfConfig":"21"},{"size":333,"mtime":1653420084027,"results":"23","hashOfConfig":"21"},{"size":11632,"mtime":1654215718318,"results":"24","hashOfConfig":"21"},{"size":4939,"mtime":1654215718321,"results":"25","hashOfConfig":"21"},{"size":1613,"mtime":1654215718322,"results":"26","hashOfConfig":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1j5gph6",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"29"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"29"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"156qf77",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},"C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\NFT_minter\\src\\index.js",[],["56","57"],"C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\NFT_minter\\src\\App.js",[],"C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\NFT_minter\\src\\reportWebVitals.js",[],"C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\NFT_minter\\src\\Minter.js",[],"C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\NFT_minter\\src\\utils\\interact.js",["58"],"import { NFTPortPinJSONToIPFS } from './nftport.js'\r\nimport React, { useState } from 'react';\r\n\r\nrequire('dotenv').config();\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(\"https://polygon-mumbai.g.alchemy.com/v2/pTB9jj_kefkrh3BSy6T-lOxFpLVS0mye\");\r\n\r\nconst contractABI = require('../contract-abi.json');\r\nconst contractAddress = \"0xdcca2c98237d1e50A11086A0EA4590B398f55a89\";\r\n\r\nvar tokenURI = \"\";\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"👆🏽 Write a message in the text-field above.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <>\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n        </>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const uploadMetadata = async(name, description, artist, urlOfLastUpload, collection, attributes) => {\r\n  //error handling\r\n  if (urlOfLastUpload === \"\" || (name.trim() === \"\" || description.trim() === \"\")) { \r\n    return {\r\n      success: false,\r\n      status: \"❗Please make sure all fields are completed before minting.\",\r\n    }\r\n  }\r\n  \r\n  // Make call to NFT Port \r\n  const nftPortResponse = await NFTPortPinJSONToIPFS(name, description, artist, urlOfLastUpload, collection, attributes); \r\n  if (!nftPortResponse.success) {\r\n    return {\r\n      success: false,\r\n      status: \"😢 Something went wrong while retrieving your tokenURI.\",\r\n    }\r\n  } else {\r\n    return {\r\n      success: nftPortResponse.nftPortUrl,\r\n      status: \"✅ Metadata pinned to IPFS successfully. Proceed with mint!\"\r\n    }\r\n  }\r\n}\r\n\r\nexport const mintNFT = async(tokenUrl) => {\r\n  // pin data and get asset url\r\n  tokenURI = tokenUrl;\r\n  tokenURI = tokenURI.replace(\"ipfs://\",\"https://gateway.pinata.cloud/ipfs/\");\r\n  console.log(tokenURI);\r\n\r\n  //load the smart contract\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);  \r\n\r\n  //set up your Ethereum transaction\r\n  const transactionParameters = {\r\n    to: contractAddress, // Required except during contract publications.\r\n    from: window.ethereum.selectedAddress, // must match user's active address.\r\n    'data': window.contract.methods.mint(tokenURI).encodeABI()//make call to NFT smart contract \r\n  };\r\n\r\n  var txnHash = \"\";\r\n\r\n  //sign the transaction via Metamask\r\n  try {\r\n    const txHash = await window.ethereum\r\n      .request({\r\n        method: 'eth_sendTransaction',\r\n        params: [transactionParameters],\r\n      });\r\n      txnHash = txHash;\r\n    return {\r\n      success: true,\r\n      status: (\r\n        <>\r\n        <div className=\"success\">\r\n          <p>Congrats, your NFT is being minted. It will be available to view and trade on <a target=\"_blank\" rel=\"noreferrer\" href={'https://testnets.opensea.io/accounts/'}>OpenSea</a> shortly.</p>\r\n          <p>✅ Check out your transaction on Polygonscan: https://mumbai.polygonscan.com//tx/{txnHash}</p>\r\n        </div>\r\n        </>\r\n      )\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      status: \"😥 Something went wrong: \" + error.message\r\n    }\r\n  }\r\n}\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \"👆🏽 Write a message in the text-field above.\",\r\n          // success: false\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"🦊 Connect to Metamask using the top right button.\",\r\n          // success: false\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n        // success: false\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\n\r\n","C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\NFT_minter\\src\\utils\\nftport.js",["59","60"],"var axios = require(\"axios\").default;\r\n\r\nconst data = {};\r\n\r\nexport const NFTPortPinJSONToIPFS = (name, description, artist, url, collection, attributes) => {\r\n\r\n  /*\r\n  * Create container for attributes and append with additional attributes data from input\r\n  */ \r\n  \r\n  let _altFields = [\r\n    {\r\n      \"trait_type\":\"Artist\",\r\n      \"value\":artist\r\n    },\r\n    {\r\n      \"trait_type\":\"Collection\",\r\n      \"value\":collection\r\n    },\r\n  ]\r\n\r\n  let appendAttributes = [];\r\n  \r\n  if(attributes.length!==0){\r\n    appendAttributes = attributes;\r\n  }\r\n  \r\n  /*\r\n  * Define 'options' object that will be passed with our axios request\r\n  */\r\n\r\n  var options = {\r\n    method: 'POST',\r\n    url: 'https://api.nftport.xyz/v0/metadata',\r\n    headers: {\r\n      'Content-Type': 'application/json', \r\n      Authorization: '2d0719e3-a0ba-461f-a382-a5558bd86ac2'\r\n    },\r\n    data: {\r\n      \"name\": name,\r\n      \"description\":description,\r\n      \"file_url\":url,\r\n      \"attributes\":appendAttributes,\r\n      \"custom_fields\":[\r\n        {\r\n          \"trait_type\":\"Artist\",\r\n          \"value\":artist\r\n        },\r\n        {\r\n          \"trait_type\":\"Collection\",\r\n          \"value\":collection\r\n        },\r\n      ],\r\n    }\r\n  }\r\n  \r\n  /*\r\n  * Make axios request to post metadata\r\n  */\r\n\r\n  return axios\r\n    .request(options).then(function (response) {\r\n      console.log(response.data);\r\n      const url = response.data.metadata_uri;\r\n      console.log(url);\r\n      return {\r\n        success: true,\r\n        nftPortUrl: response.data.metadata_uri,\r\n      };\r\n    }).catch(function (error) {\r\n    console.error(error);\r\n    return {\r\n      success: false,\r\n      message: error.message,\r\n    }\r\n  });\r\n\r\n};\r\n","C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\Palette\\src\\index.js",[],"C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\Palette\\src\\reportWebVitals.js",[],"C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\Palette\\src\\App.js",[],"C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\Palette\\src\\Minter.js",[],"C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\Palette\\src\\utils\\interact.js",["61","62"],"import { NFTPortPinJSONToIPFS } from './nftport.js'\r\nimport React, { useState } from 'react';\r\n\r\nrequire('dotenv').config();\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(\"https://polygon-mainnet.g.alchemy.com/v2/uARWIhArZMQ_weyAQQ6dMzOO6YMeBMco\");\r\nconst ipfsClient = require(\"ipfs-http-client\");\r\n\r\nconst contractABI = require('../contract-abi.json');\r\nconst contractAddress = \"0x825387120171F22D5240c26D877Eb21D0a548E52\"; // Smart contract address for the Palette NFT Dapp on Polygon mainnet \r\n\r\nvar tokenURI = \"\";\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"👆🏽 Write a message in the text-field above.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <>\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n        </>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const uploadMetadata = async(name, description, artist, urlOfLastUpload, collection, attributes) => {\r\n  //error handling\r\n  if (urlOfLastUpload === \"\" || (name.trim() === \"\" || description.trim() === \"\")) { \r\n    return {\r\n      success: false,\r\n      status: \"❗Please make sure all fields are completed before minting.\",\r\n    }\r\n  }\r\n  \r\n  // Make call to NFT Port \r\n  const nftPortResponse = await NFTPortPinJSONToIPFS(name, description, artist, urlOfLastUpload, collection, attributes); \r\n  if (!nftPortResponse.success) {\r\n    return {\r\n      success: false,\r\n      status: \"😢 Something went wrong while retrieving your tokenURI.\",\r\n    }\r\n  } else {\r\n    return {\r\n      success: nftPortResponse.nftPortUrl,\r\n      status: \"✅ Metadata pinned to IPFS successfully. Proceed with mint!\"\r\n    }\r\n  }\r\n}\r\n\r\nexport const mintNFT = async(tokenUrl) => {\r\n  // pin data and get asset url\r\n  tokenURI = tokenUrl.toString();\r\n  tokenURI = tokenURI.replace(\"ipfs://\",\"https://gateway.pinata.cloud/ipfs/\");\r\n  console.log(tokenURI);\r\n\r\n  //load the smart contract\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);  \r\n\r\n  //set up your Ethereum transaction\r\n  const transactionParameters = {\r\n    to: contractAddress, // Required except during contract publications.\r\n    from: window.ethereum.selectedAddress, // must match user's active address.\r\n    'data': window.contract.methods.mint(tokenURI).encodeABI()//make call to NFT smart contract \r\n  };\r\n\r\n  var txnHash = \"\";\r\n\r\n  //sign the transaction via Metamask\r\n  try {\r\n    const txHash = await window.ethereum\r\n      .request({\r\n        method: 'eth_sendTransaction',\r\n        params: [transactionParameters],\r\n      });\r\n      txnHash = txHash;\r\n    return {\r\n      success: true,\r\n      status: (\r\n        <>\r\n        <div className=\"success\">\r\n          <p>Congrats, your NFT is being minted. It will be available to view and trade on <a target=\"_blank\" rel=\"noreferrer\" href={'https://testnets.opensea.io/accounts/'}>OpenSea</a> shortly.</p>\r\n          <p>✅ Check out your transaction on Polygonscan: https://mumbai.polygonscan.com//tx/{txnHash}</p>\r\n        </div>\r\n        </>\r\n      )\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      status: \"😥 Something went wrong: \" + error.message\r\n    }\r\n  }\r\n}\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \"👆🏽 Write a message in the text-field above.\",\r\n          // success: false\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"🦊 Connect to Metamask using the top right button.\",\r\n          // success: false\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n        // success: false\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\n\r\n","C:\\Users\\masho\\OneDrive\\Desktop\\Blockchain\\Biconomy\\Projects\\Palette\\src\\utils\\nftport.js",["63"],"var axios = require(\"axios\").default;\r\n\r\nconst data = {};\r\n\r\nexport const NFTPortPinJSONToIPFS = (name, description, artist, url, collection, attributes) => {\r\n\r\n  /*\r\n  * Create container for attributes and append with additional attributes data from input\r\n  */ \r\n  \r\n  let _altFields = [\r\n    {\r\n      \"trait_type\":\"Artist\",\r\n      \"value\":artist\r\n    },\r\n    {\r\n      \"trait_type\":\"Collection\",\r\n      \"value\":collection\r\n    },\r\n  ]\r\n\r\n  let appendAttributes = [];\r\n  \r\n  if(attributes.length!==0){\r\n    appendAttributes = _altFields.concat(attributes);\r\n  } else {\r\n    appendAttributes = [\r\n      {\r\n      \"trait_type\":\"Artist\",\r\n      \"value\":artist\r\n      },\r\n    ]\r\n  }\r\n  \r\n  /*\r\n   * Define 'options' object that will be passed with our axios request\r\n   */\r\n\r\n  var options = {\r\n    method: 'POST',\r\n    url: 'https://api.nftport.xyz/v0/metadata',\r\n    headers: {\r\n      'Content-Type': 'application/json', \r\n      Authorization: '2d0719e3-a0ba-461f-a382-a5558bd86ac2'\r\n    },\r\n    data: {\r\n      \"name\": name,\r\n      \"description\":description,\r\n      \"file_url\":url,\r\n      \"attributes\":appendAttributes,\r\n    }\r\n  }\r\n  \r\n  /*\r\n   * Make axios request to post metadata\r\n   */\r\n\r\n  return axios\r\n    .request(options).then(function (response) {\r\n      console.log(response.data);\r\n      const url = response.data.metadata_uri;\r\n      console.log(url);\r\n      return {\r\n        success: true,\r\n        nftPortUrl: response.data.metadata_uri,\r\n      };\r\n    }).catch(function (error) {\r\n    console.error(error);\r\n    return {\r\n      success: false,\r\n      message: error.message,\r\n    }\r\n  });\r\n\r\n};\r\n",{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":2,"column":17,"nodeType":"70","messageId":"71","endLine":2,"endColumn":25},{"ruleId":"68","severity":1,"message":"72","line":3,"column":7,"nodeType":"70","messageId":"71","endLine":3,"endColumn":11},{"ruleId":"68","severity":1,"message":"73","line":11,"column":7,"nodeType":"70","messageId":"71","endLine":11,"endColumn":17},{"ruleId":"68","severity":1,"message":"69","line":2,"column":17,"nodeType":"70","messageId":"71","endLine":2,"endColumn":25},{"ruleId":"68","severity":1,"message":"74","line":7,"column":7,"nodeType":"70","messageId":"71","endLine":7,"endColumn":17},{"ruleId":"68","severity":1,"message":"72","line":3,"column":7,"nodeType":"70","messageId":"71","endLine":3,"endColumn":11},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","'_altFields' is assigned a value but never used.","'ipfsClient' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]