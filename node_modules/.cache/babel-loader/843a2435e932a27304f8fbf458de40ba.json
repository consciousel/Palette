{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isEthereumAddressValidator from 'validator/lib/isEthereumAddress';\nexport var IS_ETHEREUM_ADDRESS = 'isEthereumAddress';\n/**\n * Check if the string is an Ethereum address using basic regex. Does not validate address checksums.\n * If given value is not a string, then it returns false.\n */\n\nexport function isEthereumAddress(value) {\n  return typeof value === 'string' && isEthereumAddressValidator(value);\n}\n/**\n * Check if the string is an Ethereum address using basic regex. Does not validate address checksums.\n * If given value is not a string, then it returns false.\n */\n\nexport function IsEthereumAddress(validationOptions) {\n  return ValidateBy({\n    name: IS_ETHEREUM_ADDRESS,\n    validator: {\n      validate: function (value, args) {\n        return isEthereumAddress(value);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be an Ethereum address';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAT,EAAuBC,UAAvB,QAAyC,sBAAzC;AACA,OAAOC,0BAAP,MAAuC,iCAAvC;AAEA,OAAO,IAAMC,mBAAmB,GAAG,mBAA5B;AAEP;;;;;AAIA,OAAM,SAAUC,iBAAV,CAA4BC,KAA5B,EAA0C;AAC9C,SAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BH,0BAA0B,CAACG,KAAD,CAA9D;AACD;AAED;;;;;AAIA,OAAM,SAAUC,iBAAV,CAA4BC,iBAA5B,EAAiE;AACrE,SAAON,UAAU,CACf;AACEO,QAAI,EAAEL,mBADR;AAEEM,aAAS,EAAE;AACTC,cAAQ,EAAE,UAACL,KAAD,EAAQM,IAAR,EAAY;AAAc,gCAAiB,CAACN,KAAD,CAAjB;AAAwB,OADnD;AAETO,oBAAc,EAAEZ,YAAY,CAC1B,sBAAU;AAAI,yBAAU,GAAG,uCAAb;AAAoD,OADxC,EAE1BO,iBAF0B;AAFnB;AAFb,GADe,EAWfA,iBAXe,CAAjB;AAaD","names":["buildMessage","ValidateBy","isEthereumAddressValidator","IS_ETHEREUM_ADDRESS","isEthereumAddress","value","IsEthereumAddress","validationOptions","name","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsEthereumAddress.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}