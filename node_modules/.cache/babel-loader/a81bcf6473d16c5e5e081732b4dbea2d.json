{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport fetchPonyfill from \"fetch-ponyfill\";\nimport { VERSION } from \"../version\";\n\nvar _a = fetchPonyfill(),\n    fetch = _a.fetch,\n    Headers = _a.Headers;\n\nvar ALCHEMY_HEADERS = new Headers({\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\",\n  \"Alchemy-Web3-Version\": VERSION\n});\nvar RATE_LIMIT_STATUS = 429;\nexport function makeJsonRpcHttpSender(url) {\n  var _this = this;\n\n  return function (request) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var response, status, _a;\n\n      var _b, _c;\n\n      var _d;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , fetch(url, {\n              method: \"POST\",\n              headers: ALCHEMY_HEADERS,\n              body: JSON.stringify(request)\n            })];\n\n          case 1:\n            response = _e.sent();\n            status = response.status;\n            _a = status;\n\n            switch (_a) {\n              case 200:\n                return [3\n                /*break*/\n                , 2];\n\n              case RATE_LIMIT_STATUS:\n                return [3\n                /*break*/\n                , 4];\n\n              case 0:\n                return [3\n                /*break*/\n                , 5];\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 2:\n            _b = {\n              type: \"jsonrpc\"\n            };\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 3:\n            return [2\n            /*return*/\n            , (_b.response = _e.sent(), _b)];\n\n          case 4:\n            return [2\n            /*return*/\n            , {\n              type: \"rateLimit\"\n            }];\n\n          case 5:\n            return [2\n            /*return*/\n            , {\n              type: \"networkError\",\n              status: 0,\n              message: \"Connection failed.\"\n            }];\n\n          case 6:\n            _c = {\n              status: status,\n              type: \"networkError\"\n            };\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 7:\n            return [2\n            /*return*/\n            , (_c.message = (_d = _e.sent().error) === null || _d === void 0 ? void 0 : _d.message, _c)];\n        }\n      });\n    });\n  };\n}","map":{"version":3,"mappings":";AAAA,OAAOA,aAAP,MAA0B,gBAA1B;AACA,SAASC,OAAT,QAAwB,YAAxB;;AAGM,SAAqBD,aAAa,EAAlC;AAAA,IAAEE,KAAK,WAAP;AAAA,IAASC,OAAO,aAAhB;;AAEN,IAAMC,eAAe,GAAG,IAAID,OAAJ,CAAY;AAClCE,QAAM,EAAE,kBAD0B;AAElC,kBAAgB,kBAFkB;AAGlC,0BAAwBJ;AAHU,CAAZ,CAAxB;AAKA,IAAMK,iBAAiB,GAAG,GAA1B;AAEA,OAAM,SAAUC,qBAAV,CAAgCC,GAAhC,EAA2C;AAAjD;;AACE,SAAO,UAAOC,OAAP,EAAc;AAAA;;;;;;;;;;AACF;AAAA;AAAA,cAAMP,KAAK,CAACM,GAAD,EAAM;AAChCE,oBAAM,EAAE,MADwB;AAEhCC,qBAAO,EAAEP,eAFuB;AAGhCQ,kBAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,OAAf;AAH0B,aAAN,CAAX;;;AAAXM,oBAAQ,GAAGC,SAAX;AAKEC,kBAAM,GAAKF,QAAQ,OAAnB;AACAG;;;mBACD;AAAA;AAAA;AAAA;;mBAEAZ;AAAA;AAAA;AAAA;;mBAEA;AAAA;AAAA;AAAA;;;;;;;;;AAHMa,kBAAI,EAAE;;AAAqB;AAAA;AAAA,cAAMJ,QAAQ,CAACK,IAAT,EAAN;;;AAApC;AAAA;AAAA,eAA0BC,cAAUL,SAAV,EAA+BK,EAAzD;;;AAEA;AAAA;AAAA,cAAO;AAAEF,kBAAI,EAAE;AAAR,aAAP;;;AAEA;AAAA;AAAA,cAAO;AACLA,kBAAI,EAAE,cADD;AAELF,oBAAM,EAAE,CAFH;AAGLK,qBAAO,EAAE;AAHJ,aAAP;;;;AAOEL,oBAAM;AACNE,kBAAI,EAAE;;AACI;AAAA;AAAA,cAAMJ,QAAQ,CAACK,IAAT,EAAN;;;AAHZ;AAAA;AAAA,eAGEG,aAAS,MAACP,SAAD,CAAwBQ,KAAxB,MAA6B,IAA7B,IAA6BC,aAA7B,GAA6B,MAA7B,GAA6BA,GAAEH,OAAxC,IAHF;;;KAnBe;AAyBpB,GAzBD;AA0BD","names":["fetchPonyfill","VERSION","fetch","Headers","ALCHEMY_HEADERS","Accept","RATE_LIMIT_STATUS","makeJsonRpcHttpSender","url","request","method","headers","body","JSON","stringify","response","_e","status","_a","type","json","_b","message","_c","error","_d"],"sourceRoot":"","sources":["../../../src/web3-adapter/alchemySendHttp.ts"],"sourcesContent":["import fetchPonyfill from \"fetch-ponyfill\";\nimport { VERSION } from \"../version\";\nimport { AlchemySendJsonRpcFunction } from \"./alchemySend\";\n\nconst { fetch, Headers } = fetchPonyfill();\n\nconst ALCHEMY_HEADERS = new Headers({\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\",\n  \"Alchemy-Web3-Version\": VERSION,\n});\nconst RATE_LIMIT_STATUS = 429;\n\nexport function makeJsonRpcHttpSender(url: string): AlchemySendJsonRpcFunction {\n  return async (request) => {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: ALCHEMY_HEADERS,\n      body: JSON.stringify(request),\n    });\n    const { status } = response;\n    switch (status) {\n      case 200:\n        return { type: \"jsonrpc\", response: await response.json() };\n      case RATE_LIMIT_STATUS:\n        return { type: \"rateLimit\" };\n      case 0:\n        return {\n          type: \"networkError\",\n          status: 0,\n          message: \"Connection failed.\",\n        };\n      default:\n        return {\n          status,\n          type: \"networkError\",\n          message: (await response.json()).error?.message,\n        };\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}