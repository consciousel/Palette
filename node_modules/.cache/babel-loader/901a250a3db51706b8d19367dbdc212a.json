{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendAddNFTMinter = exports.prepareAddNFTMinter = exports.transferNFT = exports.updateCashbackForAuthorNFT = exports.burnNFT = exports.mintMultipleNFTWithUri = exports.mintNFTWithUri = exports.createNFT = exports.deployNFT = exports.getNFTRoyalty = exports.getNFTImage = exports.getNFTMetadataURI = exports.getNFTContractAddress = exports.getNFTProvenanceData = exports.getNFTsByAddress = exports.mintNFT = void 0;\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst erc721_abi_1 = __importDefault(require(\"../contracts/erc721Cashback/erc721_abi\"));\n\nconst helpers_1 = require(\"../helpers\");\n\nconst model_1 = require(\"../model\");\n\nconst storage_1 = require(\"../storage\");\n\nconst transaction_1 = require(\"../transaction\");\n\nconst mintNFT = body => tatum_1.post(`/v3/nft/mint`, body);\n\nexports.mintNFT = mintNFT;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/NftGetBalanceErc721\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst getNFTsByAddress = async (chain, contractAddress, address) => tatum_1.get(`/v3/nft/balance/${chain}/${contractAddress}/${address}`);\n\nexports.getNFTsByAddress = getNFTsByAddress;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/NftProvenanceReadData\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst getNFTProvenanceData = async (chain, contractAddress, tokenId) => tatum_1.get(`/v3/nft/provenance/${chain}/${contractAddress}/${tokenId}`);\n\nexports.getNFTProvenanceData = getNFTProvenanceData;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/NftGetContractAddress\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst getNFTContractAddress = async (chain, txId) => tatum_1.get(`/v3/nft/address/${chain}/${txId}`);\n\nexports.getNFTContractAddress = getNFTContractAddress;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/NftGetMetadataErc721\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst getNFTMetadataURI = async (chain, contractAddress, tokenId, account) => {\n  let url = `/v3/nft/metadata/${chain}/${contractAddress}/${tokenId}`;\n\n  if (account) {\n    url += `?account=${account}`;\n  }\n\n  return tatum_1.get(url);\n};\n\nexports.getNFTMetadataURI = getNFTMetadataURI;\n/**\n * Get IPFS image URL from the NFT with the IPFS Metadata scheme. URL\n * @param chain chain where NFT token is\n * @param contractAddress contract address of the NFT token\n * @param tokenId ID of the token\n * @param account FLOW only - account where the token is minted\n */\n\nconst getNFTImage = async (chain, contractAddress, tokenId, account) => {\n  const {\n    data: metadata\n  } = await exports.getNFTMetadataURI(chain, contractAddress, tokenId, account);\n  const metadataUrl = `https://gateway.pinata.cloud/ipfs/${metadata.replace('ipfs://', '')}`;\n  const {\n    data\n  } = await tatum_1.axios.get(metadataUrl);\n  const imageUrl = data.image;\n  return {\n    originalUrl: imageUrl,\n    publicUrl: `https://gateway.pinata.cloud/ipfs/${imageUrl.replace('ipfs://', '')}`\n  };\n};\n\nexports.getNFTImage = getNFTImage;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/NftGetRoyaltyErc721\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst getNFTRoyalty = async (chain, contractAddress, tokenId) => tatum_1.get(`/v3/nft/royalty/${chain}/${contractAddress}/${tokenId}`);\n\nexports.getNFTRoyalty = getNFTRoyalty;\n/**\n * Deploy new NFT smart contract, which will be used for later minting.\n * @param testnet if we use testnet or not\n * @param body body of the mint request\n * @param provider optional provider do broadcast tx\n */\n\nconst deployNFT = async (testnet, body, provider) => {\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      return transaction_1.sendCeloDeployErc721Transaction(testnet, body, provider);\n\n    case model_1.Currency.ETH:\n      return transaction_1.sendDeployErc721Transaction(body, provider);\n\n    case model_1.Currency.MATIC:\n      return transaction_1.sendPolygonDeployErc721SignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.KLAY:\n      return transaction_1.sendKlaytnDeployErc721SignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.ONE:\n      return transaction_1.sendOneDeploy721SignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.TRON:\n      return transaction_1.sendTronDeployTrc721SignedTransaction(testnet, body);\n\n    case model_1.Currency.BSC:\n      return transaction_1.sendDeployBep721Transaction(body, provider);\n\n    case model_1.Currency.FLOW:\n      return tatum_1.post('/v3/nft/deploy', body, model_1.FlowDeployNft);\n\n    case model_1.Currency.ALGO:\n      return transaction_1.sendAlgoCreateNFTSignedTransaction(testnet, body, provider);\n\n    default:\n      throw new Error('Unsupported currency');\n  }\n};\n\nexports.deployNFT = deployNFT;\n/**\n * Mint new NFT token with metadata stored on the IPFS.\n * @param testnet if we use testnet or not\n * @param body body of the mint request\n * @param file file to be stored on the IPFS\n * @param name name of the file\n * @param description description of the file\n * @param scheme optional JSON Metadata scheme\n * @param provider optional provider do broadcast tx\n */\n\nconst createNFT = async (testnet, body, file, name, description, scheme, provider) => {\n  const metadata = scheme || {};\n  metadata.name = name;\n\n  if (description) {\n    metadata.description = description;\n  }\n\n  const {\n    ipfsHash\n  } = await storage_1.ipfsUpload(file, name);\n  metadata.image = `ipfs://${ipfsHash}`;\n  const {\n    ipfsHash: metadataHash\n  } = await storage_1.ipfsUpload(Buffer.from(JSON.stringify(metadata)), 'metadata.json');\n  body.url = `ipfs://${metadataHash}`;\n\n  if (body.chain === model_1.Currency.FLOW) {\n    body.privateKey = body.privateKey || body.fromPrivateKey;\n  }\n\n  const result = await exports.mintNFTWithUri(testnet, body, provider);\n  return Object.assign(Object.assign({\n    tokenId: body.tokenId\n  }, result), {\n    metadataUrl: body.url,\n    metadataPublicUrl: `https://gateway.pinata.cloud/ipfs/${metadataHash}`,\n    imageUrl: `ipfs://${ipfsHash}`,\n    imagePublicUrl: `https://gateway.pinata.cloud/ipfs/${ipfsHash}`\n  });\n};\n\nexports.createNFT = createNFT;\n/**\n * Mint new NFT token.\n * @param testnet if we use testnet or not\n * @param body body of the mint request\n * @param provider optional provider do broadcast tx\n */\n\nconst mintNFTWithUri = async (testnet, body, provider) => {\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      if (body.provenance) {\n        return transaction_1.sendCeloMintErc721ProvenanceTransaction(testnet, body, provider);\n      } else {\n        if (body.authorAddresses) {\n          return transaction_1.sendCeloMintCashbackErc721Transaction(testnet, body, provider);\n        } else {\n          return transaction_1.sendCeloMintErc721Transaction(testnet, body, provider);\n        }\n      }\n\n    case model_1.Currency.ETH:\n      if (body.provenance) {\n        return transaction_1.sendMintErc721ProvenanceTransaction(body, provider);\n      } else {\n        if (body.authorAddresses) {\n          return transaction_1.sendMintCashbackErc721Transaction(body, provider);\n        } else {\n          return transaction_1.sendMintErc721Transaction(body, provider);\n        }\n      }\n\n    case model_1.Currency.MATIC:\n      if (body.provenance) {\n        return transaction_1.sendPolygonMintErc721ProvenanceSignedTransaction(testnet, body, provider);\n      } else {\n        if (body.authorAddresses) {\n          return transaction_1.sendPolygonMintCashbackErc721SignedTransaction(testnet, body, provider);\n        } else {\n          return transaction_1.sendPolygonMintErc721SignedTransaction(testnet, body, provider);\n        }\n      }\n\n    case model_1.Currency.KLAY:\n      if (body.provenance) {\n        return transaction_1.sendKlaytnMintErc721ProvenanceSignedTransaction(testnet, body, provider);\n      } else {\n        if (body.authorAddresses) {\n          return transaction_1.sendKlaytnMintCashbackErc721SignedTransaction(testnet, body, provider);\n        } else {\n          return transaction_1.sendKlaytnMintErc721SignedTransaction(testnet, body, provider);\n        }\n      }\n\n    case model_1.Currency.ONE:\n      if (body.provenance) {\n        return transaction_1.sendOneMint721ProvenanceSignedTransaction(testnet, body, provider);\n      } else {\n        if (body.authorAddresses) {\n          return transaction_1.sendOneMintCashback721SignedTransaction(testnet, body, provider);\n        } else {\n          return transaction_1.sendOneMint721SignedTransaction(testnet, body, provider);\n        }\n      }\n\n    case model_1.Currency.TRON:\n      if (body.authorAddresses) {\n        return transaction_1.sendTronMintCashbackTrc721SignedTransaction(testnet, body);\n      } else {\n        return transaction_1.sendTronMintTrc721SignedTransaction(testnet, body);\n      }\n\n    case model_1.Currency.BSC:\n      if (body.provenance) {\n        return transaction_1.sendMintBep721ProvenanceTransaction(body, provider);\n      } else {\n        if (body.authorAddresses) {\n          return transaction_1.sendMintBepCashback721Transaction(body, provider);\n        }\n\n        return transaction_1.sendMintBep721Transaction(body, provider);\n      }\n\n    case model_1.Currency.FLOW:\n      return transaction_1.sendFlowNftMintToken(testnet, body);\n\n    default:\n      throw new Error('Unsupported blockchain.');\n  }\n};\n\nexports.mintNFTWithUri = mintNFTWithUri;\n/**\n * Mint multiple new NFT tokens.\n * @param testnet if we use testnet or not\n * @param body body of the mint request\n * @param provider optional provider do broadcast tx\n */\n\nconst mintMultipleNFTWithUri = async (testnet, body, provider) => {\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      if (body.provenance) {\n        return transaction_1.sendCeloMintMultipleErc721ProvenanceTransaction(testnet, body, provider);\n      } else {\n        if (body.authorAddresses) {\n          return transaction_1.sendCeloMintMultipleCashbackErc721Transaction(testnet, body, provider);\n        } else {\n          return transaction_1.sendCeloMintMultipleErc721Transaction(testnet, body, provider);\n        }\n      }\n\n    case model_1.Currency.TRON:\n      if (body.authorAddresses) {\n        throw new Error('Unsupported operation.');\n      } else {\n        return transaction_1.sendTronMintMultipleTrc721SignedTransaction(testnet, body);\n      }\n\n    case model_1.Currency.ETH:\n      if (body.provenance) {\n        return transaction_1.sendMintMultipleErc721ProvenanceTransaction(body, provider);\n      } else {\n        if (body.authorAddresses) {\n          return transaction_1.sendEthMintMultipleCashbackErc721SignedTransaction(body, provider);\n        } else {\n          return transaction_1.sendMintMultipleErc721Transaction(body, provider);\n        }\n      }\n\n    case model_1.Currency.MATIC:\n      if (body.authorAddresses) {\n        return transaction_1.sendPolygonMintMultipleErc721ProvenanceSignedTransaction(testnet, body, provider);\n      } else {\n        if (body.authorAddresses) {\n          return transaction_1.sendPolygonMintMultipleCashbackErc721SignedTransaction(testnet, body, provider);\n        } else {\n          return transaction_1.sendPolygonMintMultipleErc721SignedTransaction(testnet, body, provider);\n        }\n      }\n\n    case model_1.Currency.KLAY:\n      if (body.authorAddresses) {\n        return transaction_1.sendKlaytnMintMultipleErc721ProvenanceSignedTransaction(testnet, body, provider);\n      } else {\n        if (body.authorAddresses) {\n          return transaction_1.sendKlaytnMintMultipleCashbackErc721SignedTransaction(testnet, body, provider);\n        } else {\n          return transaction_1.sendKlaytnMintMultipleErc721SignedTransaction(testnet, body, provider);\n        }\n      }\n\n    case model_1.Currency.ONE:\n      if (body.provenance) {\n        return transaction_1.sendOneMintMultiple721ProvenanceSignedTransaction(testnet, body, provider);\n      } else {\n        if (body.authorAddresses) {\n          return transaction_1.sendOneMintMultipleCashback721SignedTransaction(testnet, body, provider);\n        } else {\n          return transaction_1.sendOneMintMultiple721SignedTransaction(testnet, body, provider);\n        }\n      }\n\n    case model_1.Currency.BSC:\n      if (body.authorAddresses) {\n        return transaction_1.sendMintMultipleBep721ProvenanceTransaction(body, provider);\n      } else {\n        if (body.authorAddresses) {\n          return transaction_1.sendMintMultipleCashbackBep721Transaction(body, provider);\n        } else {\n          return transaction_1.sendMintMultipleBep721Transaction(body, provider);\n        }\n      }\n\n    case model_1.Currency.FLOW:\n      return transaction_1.sendFlowNftMintMultipleToken(testnet, body);\n\n    default:\n      throw new Error('Unsupported blockchain.');\n  }\n};\n\nexports.mintMultipleNFTWithUri = mintMultipleNFTWithUri;\n/**\n * Burn new NFT token. Token will no longer exists.\n * @param testnet if we use testnet or not\n * @param body body of the mint request\n * @param provider optional provider do broadcast tx\n */\n\nconst burnNFT = async (testnet, body, provider) => {\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      return transaction_1.sendCeloBurnErc721Transaction(testnet, body, provider);\n\n    case model_1.Currency.TRON:\n      return transaction_1.sendTronBurnTrc721SignedTransaction(testnet, body);\n\n    case model_1.Currency.ETH:\n      return transaction_1.sendBurnErc721Transaction(body, provider);\n\n    case model_1.Currency.MATIC:\n      return transaction_1.sendPolygonBurnErc721SignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.KLAY:\n      return transaction_1.sendKlaytnBurnErc721SignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.ONE:\n      return transaction_1.sendOneBurn721SignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.BSC:\n      return transaction_1.sendBurnBep721Transaction(body, provider);\n\n    case model_1.Currency.FLOW:\n      return transaction_1.sendFlowNftBurnToken(testnet, body);\n\n    case model_1.Currency.ALGO:\n      return transaction_1.sendAlgoBurnNFTSignedTransaction(testnet, body, provider);\n\n    default:\n      throw new Error('Unsupported blockchain.');\n  }\n};\n\nexports.burnNFT = burnNFT;\n/**\n * Update royalty cashback as author of the NFT token.\n * @param testnet if we use testnet or not\n * @param body body of the mint request\n * @param provider optional provider do broadcast tx\n */\n\nconst updateCashbackForAuthorNFT = async (testnet, body, provider) => {\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      return transaction_1.sendCeloUpdateCashbackForAuthorErc721Transaction(testnet, body, provider);\n\n    case model_1.Currency.ETH:\n      return transaction_1.sendUpdateCashbackForAuthorErc721Transaction(body, provider);\n\n    case model_1.Currency.MATIC:\n      return transaction_1.sendPolygonUpdateCashbackForAuthorErc721SignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.KLAY:\n      return transaction_1.sendKlaytnUpdateCashbackForAuthorErc721SignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.ONE:\n      return transaction_1.sendOneUpdateCashbackForAuthor721SignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.TRON:\n      return transaction_1.sendTronUpdateCashbackForAuthorTrc721SignedTransaction(testnet, body);\n\n    case model_1.Currency.BSC:\n      return transaction_1.sendUpdateCashbackForAuthorBep721Transaction(body, provider);\n\n    default:\n      throw new Error('Unsupported blockchain.');\n  }\n};\n\nexports.updateCashbackForAuthorNFT = updateCashbackForAuthorNFT;\n/**\n * Transfer new NFT token to new recipient.\n * @param testnet if we use testnet or not\n * @param body body of the mint request\n * @param provider optional provider do broadcast tx\n */\n\nconst transferNFT = async (testnet, body, provider) => {\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      return transaction_1.sendCeloTransferErc721Transaction(testnet, body, provider);\n\n    case model_1.Currency.ETH:\n      return transaction_1.sendErc721Transaction(body, provider);\n\n    case model_1.Currency.MATIC:\n      return transaction_1.sendPolygonTransferErc721SignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.KLAY:\n      return transaction_1.sendKlaytnTransferErc721SignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.ONE:\n      return transaction_1.sendOneTransfer721SignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.TRON:\n      return transaction_1.sendTronTransferTrc721SignedTransaction(testnet, body);\n\n    case model_1.Currency.BSC:\n      return transaction_1.sendBep721Transaction(body, provider);\n\n    case model_1.Currency.FLOW:\n      return transaction_1.sendFlowNftTransferToken(testnet, body);\n\n    case model_1.Currency.ALGO:\n      return transaction_1.sendAlgoTransferNFTSignedTransaction(testnet, body, provider);\n\n    default:\n      throw new Error('Unsupported blockchain.');\n  }\n};\n\nexports.transferNFT = transferNFT;\n/**\n * Prepare add new minter to the NFT contract transaction.\n * @param testnet if we use testnet or not\n * @param body body of the add minter request\n * @param provider optional provider do broadcast tx\n */\n\nconst prepareAddNFTMinter = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.AddMinter);\n  const params = ['0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6', body.minter];\n  return await helpers_1.helperPrepareSCCall(testnet, body, model_1.AddMinter, 'grantRole', params, undefined, provider, erc721_abi_1.default);\n};\n\nexports.prepareAddNFTMinter = prepareAddNFTMinter;\n/**\n * Add new minter to the NFT contract.\n * @param testnet if we use testnet or not\n * @param body body of the add minter request\n * @param provider optional provider do broadcast tx\n */\n\nconst sendAddNFTMinter = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAddNFTMinter(testnet, body, provider), body.signatureId);\n\nexports.sendAddNFTMinter = sendAddNFTMinter;","map":{"version":3,"mappings":"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","names":["mintNFT","body","tatum_1","exports","getNFTsByAddress","chain","contractAddress","address","getNFTProvenanceData","tokenId","getNFTContractAddress","txId","getNFTMetadataURI","account","url","getNFTImage","data","metadata","metadataUrl","replace","get","imageUrl","image","originalUrl","publicUrl","getNFTRoyalty","deployNFT","testnet","provider","model_1","CELO","transaction_1","ETH","MATIC","KLAY","ONE","TRON","BSC","FLOW","ALGO","Error","createNFT","file","name","description","scheme","ipfsHash","storage_1","metadataHash","Buffer","from","JSON","stringify","privateKey","fromPrivateKey","result","metadataPublicUrl","imagePublicUrl","mintNFTWithUri","provenance","authorAddresses","mintMultipleNFTWithUri","burnNFT","updateCashbackForAuthorNFT","transferNFT","prepareAddNFTMinter","params","minter","helpers_1","undefined","erc721_abi_1","sendAddNFTMinter","signatureId"],"sourceRoot":"","sources":["../../../src/nft/nft.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}