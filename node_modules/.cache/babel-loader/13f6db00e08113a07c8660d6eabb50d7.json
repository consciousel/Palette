{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScArgumentsParser = void 0;\n\nconst errors_1 = require(\"./errors\");\n/**\n * Class with static methods useful for fetching and checking arguments from a transaction's data field that should trigger\n * a smart contract call\n */\n\n\nclass ScArgumentsParser {\n  /**\n   * Returns an array containing all the arguments from a data field representing a smart contract call\n   * @param dataField this field represents the data filed to extract arguments from\n   * @return {functionName, args} returns the function name and an array containing all the smart contract call arguments\n   * @throws ErrInvalidScCallDataField the function returns an ErrInvalidScCallDataField exception if the input isn't a smart contract call valid input\n   */\n  static parseSmartContractCallDataField(dataField) {\n    if (!this.isValidSmartContractCallDataField(dataField)) {\n      throw new errors_1.ErrInvalidScCallDataField(dataField);\n    }\n\n    let args = new Array();\n    let items = dataField.split(\"@\");\n\n    if (items.length === 0) {\n      return {\n        functionName: dataField,\n        args: new Array()\n      };\n    }\n\n    for (let i = 1; i < items.length; i++) {\n      args.push(items[i]);\n    }\n\n    return {\n      functionName: items[0],\n      args: args\n    };\n  }\n  /**\n   * Returns a Boolean value representing if the input data field is a valid smart contract call input\n   * @param dataField this field represents the input to check\n   */\n\n\n  static isValidSmartContractCallDataField(dataField) {\n    let items = dataField.split(\"@\");\n\n    if (items.length === 0) {\n      return true; // only function call, no arguments\n    }\n\n    for (let i = 1; i < items.length; i++) {\n      if (!this.isValidScArgument(items[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   *\n   * @param input input represents the input argument to check\n   * @return true if the provided argument resembles a valid smart contract call argument\n   */\n\n\n  static isValidScArgument(input) {\n    if (input.length % 2 != 0) {\n      return false;\n    }\n\n    for (let i = 0; i < input.length; i++) {\n      if (!this.validHexChars.includes(input[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n\nexports.ScArgumentsParser = ScArgumentsParser;\nScArgumentsParser.validHexChars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;;;;;;AAIA,MAAaA,iBAAb,CAA8B;AAI1B;;;;;;AAM6C,SAA/BC,+BAA+B,CAACC,SAAD,EAAkB;AAC3D,QAAI,CAAC,KAAKC,iCAAL,CAAuCD,SAAvC,CAAL,EAAwD;AACpD,YAAM,IAAIE,kCAAJ,CAA8BF,SAA9B,CAAN;AACH;;AAED,QAAIG,IAAI,GAAG,IAAIC,KAAJ,EAAX;AACA,QAAIC,KAAK,GAAGL,SAAS,CAACM,KAAV,CAAgB,GAAhB,CAAZ;;AACA,QAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACpB,aAAO;AACHC,oBAAY,EAAER,SADX;AAEHG,YAAI,EAAE,IAAIC,KAAJ;AAFH,OAAP;AAIH;;AAED,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACE,MAA1B,EAAkCE,CAAC,EAAnC,EAAuC;AACnCN,UAAI,CAACO,IAAL,CAAUL,KAAK,CAACI,CAAD,CAAf;AACH;;AAED,WAAO;AACHD,kBAAY,EAAEH,KAAK,CAAC,CAAD,CADhB;AAEHF,UAAI,EAAEA;AAFH,KAAP;AAIH;AAED;;;;;;AAI+C,SAAjCF,iCAAiC,CAACD,SAAD,EAAkB;AAC7D,QAAIK,KAAK,GAAGL,SAAS,CAACM,KAAV,CAAgB,GAAhB,CAAZ;;AACA,QAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACpB,aAAO,IAAP,CADoB,CACP;AAChB;;AAED,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACE,MAA1B,EAAkCE,CAAC,EAAnC,EAAuC;AACnC,UAAI,CAAC,KAAKE,iBAAL,CAAuBN,KAAK,CAACI,CAAD,CAA5B,CAAL,EAAuC;AACnC,eAAO,KAAP;AACH;AACJ;;AAED,WAAO,IAAP;AACH;AAED;;;;;;;AAK+B,SAAjBE,iBAAiB,CAACC,KAAD,EAAc;AACzC,QAAIA,KAAK,CAACL,MAAN,GAAe,CAAf,IAAoB,CAAxB,EAA2B;AACvB,aAAO,KAAP;AACH;;AAED,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGG,KAAK,CAACL,MAA1B,EAAkCE,CAAC,EAAnC,EAAuC;AACnC,UAAI,CAAC,KAAKI,aAAL,CAAmBC,QAAnB,CAA4BF,KAAK,CAACH,CAAD,CAAjC,CAAL,EAA4C;AACxC,eAAO,KAAP;AACH;AACJ;;AAED,WAAO,IAAP;AACH;;AAtEyB;;AAA9BM;AAEmBjB,kCAAgB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkE,GAAlE,EAAuE,GAAvE,EAA4E,GAA5E,CAAhB","names":["ScArgumentsParser","parseSmartContractCallDataField","dataField","isValidSmartContractCallDataField","errors_1","args","Array","items","split","length","functionName","i","push","isValidScArgument","input","validHexChars","includes","exports"],"sourceRoot":"","sources":["../src/scArgumentsParser.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}