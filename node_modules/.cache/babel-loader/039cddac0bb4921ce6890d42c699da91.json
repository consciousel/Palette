{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendEgldDeployNftTransaction = exports.sendEgldTransferNftTransaction = exports.sendEgldSmartContractMethodInvocationTransaction = exports.sendEgldDeployEsdtTransaction = exports.sendEgldTransaction = exports.sendEgldStoreDataTransaction = exports.prepareEgldSignedTransaction = exports.prepareEgldTransferNftSignedTransaction = exports.prepareEgldWipeNftSignedTransaction = exports.prepareEgldFreezeNftSignedTransaction = exports.prepareEgldAddOrBurnNftQuantitySignedTransaction = exports.prepareEgldStopNftCreateSignedTransaction = exports.prepareEgldTransferNftCreateRoleSignedTransaction = exports.prepareEgldCreateNftOrSftSignedTransaction = exports.prepareEgldDeployNftOrSftSignedTransaction = exports.prepareEgldControlChangesEsdtSignedTransaction = exports.prepareEgldFreezeOrWipeOrOwvershipEsdtSignedTransaction = exports.prepareEgldSpecialRoleEsdtOrNftSignedTransaction = exports.prepareEgldPauseEsdtSignedTransaction = exports.prepareEgldBurnEsdtSignedTransaction = exports.prepareEgldMintEsdtSignedTransaction = exports.prepareEgldTransferEsdtSignedTransaction = exports.prepareEgldDeployEsdtSignedTransaction = exports.prepareEgldStoreDataTransaction = exports.signEgldKMSTransaction = exports.getEgldClient = exports.signEgldTransaction = exports.egldGetGasLimit = exports.egldGetGasPrice = exports.egldGetConfig = void 0;\n\nconst bignumber_js_1 = require(\"bignumber.js\");\n\nconst erdjs_1 = require(\"@elrondnetwork/erdjs\");\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst constants_1 = require(\"../constants\");\n\nconst model_1 = require(\"../model\");\n\nconst address_1 = require(\"../wallet/address\");\n\nconst ELROND_V3_ENDPOINT = () => `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/egld/node`;\n/**\n * Get Elrond network config\n */\n\n\nconst egldGetConfig = async () => {\n  const gasStationUrl = await exports.getEgldClient();\n\n  try {\n    const {\n      data\n    } = await tatum_1.axios.get(`${gasStationUrl}/${process.env.TATUM_API_KEY}/network/config`);\n    return data;\n  } catch (e) {\n    console.error(e.toString());\n  }\n\n  return null;\n};\n\nexports.egldGetConfig = egldGetConfig;\n/**\n * Estimate Gas price for the transaction.\n */\n\nconst egldGetGasPrice = async () => {\n  var _a, _b;\n\n  const {\n    data\n  } = await exports.egldGetConfig();\n  const price = (_a = data === null || data === void 0 ? void 0 : data.config) === null || _a === void 0 ? void 0 : _a.erd_min_gas_price;\n\n  if (price) {\n    return price;\n  }\n\n  throw Error(((_b = data === null || data === void 0 ? void 0 : data.data) === null || _b === void 0 ? void 0 : _b.returnMessage) || 'egld.gasPrice.error');\n};\n\nexports.egldGetGasPrice = egldGetGasPrice;\n/**\n * Estimate Gas limit for the transaction.\n */\n\nconst egldGetGasLimit = async tx => {\n  var _a, _b;\n\n  const gasStationUrl = await exports.getEgldClient();\n  const {\n    data\n  } = await tatum_1.axios.post(`${gasStationUrl}/${process.env.TATUM_API_KEY}/transaction/cost`, tx);\n  const gas = (_a = data === null || data === void 0 ? void 0 : data.data) === null || _a === void 0 ? void 0 : _a.txGasUnits;\n\n  if (gas) {\n    return gas;\n  }\n\n  throw Error(((_b = data === null || data === void 0 ? void 0 : data.data) === null || _b === void 0 ? void 0 : _b.returnMessage) || 'egld.gasLimit.error');\n};\n\nexports.egldGetGasLimit = egldGetGasLimit;\n/**\n * Sign transaction\n */\n\nconst signEgldTransaction = async (tx, fromPrivateKey) => {\n  const fromAddrSigner = new erdjs_1.UserSigner(erdjs_1.UserSecretKey.fromString(fromPrivateKey));\n  fromAddrSigner.sign(tx);\n  return JSON.stringify(tx.toSendable());\n};\n\nexports.signEgldTransaction = signEgldTransaction;\n/**\n * Returns EGLD server to connect to.\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @param fromPrivateKey optional private key of sender account\n */\n\nconst getEgldClient = provider => {\n  const client = provider || ELROND_V3_ENDPOINT();\n  return client;\n};\n\nexports.getEgldClient = getEgldClient;\n/**\n * Sign EGLD pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param fromPrivateKey private key to sign transaction with.\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst signEgldKMSTransaction = async (tx, fromPrivateKey, provider) => {\n  if (tx.chain !== model_1.Currency.EGLD) {\n    throw Error('Unsupported chain.');\n  }\n\n  const client = exports.getEgldClient(provider);\n  const transaction = JSON.parse(tx.serializedTransaction);\n  return await prepareSignedTransactionAbstraction(client, transaction, undefined, fromPrivateKey);\n};\n\nexports.signEgldKMSTransaction = signEgldKMSTransaction;\n/**\n * Sign EGLD Store data transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEgldStoreDataTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.CreateRecord);\n  const {\n    fromPrivateKey,\n    signatureId,\n    from,\n    data\n  } = body;\n  const client = exports.getEgldClient(provider);\n  const address = from || (await address_1.generateAddressFromPrivatekey(model_1.Currency.EGLD, false, fromPrivateKey));\n\n  if (!address) {\n    throw new Error('Recipient must be provided.');\n  }\n\n  const tx = {\n    from: from || 0,\n    to: address,\n    value: '0',\n    data\n  };\n  return await prepareSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEgldStoreDataTransaction = prepareEgldStoreDataTransaction;\n/**\n * Encode number for ESDT transaction\n * @param n number or BigNumber\n * @returns n as hex encoded string with an even number of characters\n */\n\nconst encodeNumber = n => {\n  const bn = new bignumber_js_1.BigNumber(n);\n\n  if (bn.isNaN()) {\n    return '';\n  }\n\n  const result = bn.toString(16).toLowerCase();\n  return `${(result.length % 2 ? '' : '0') + result}`;\n};\n/**\n * Prepare properties for ESDT Issue transaction\n * @param props content of the data transaction\n * @returns props as encoded string\n */\n\n\nconst prepareProperties = props => {\n  if (!props) {\n    return '';\n  }\n\n  const keys = Object.keys(props);\n  const asHexTrue = '0x01'; // Buffer.from('true').toString('hex')\n\n  const asHexFalse = '0x'; // Buffer.from('false').toString('hex')\n\n  let result = '';\n\n  for (const k of keys) {\n    result += `@${Buffer.from(k).toString('hex')}@${props[k] ? asHexTrue : asHexFalse}`;\n  }\n\n  return result;\n};\n/**\n * Prepare data for ESDT transactions\n * @param data content of the data\n * @returns data as string\n */\n\n\nconst prepareEgldEsdtIssuanceData = async data => {\n  await tatum_1.validateBody(data, model_1.EsdtIssue);\n  const tokenName = Buffer.from(data.name).toString('hex');\n  const tokenTicker = Buffer.from(data.symbol).toString('hex');\n  const initialSupply = encodeNumber(data.supply);\n  const decimals = encodeNumber(data.digits);\n  const properties = prepareProperties(data.properties);\n  return `${data.service}@${tokenName}@${tokenTicker}@${initialSupply}@${decimals}` + properties;\n};\n\nconst prepareEgldEsdtTransferData = async data => {\n  await tatum_1.validateBody(data, model_1.EsdtTransfer);\n  const tokenId = Buffer.from(data.tokenId).toString('hex');\n  const value = encodeNumber(data.value);\n  let args = '';\n\n  if (data.methodName) {\n    args += '@' + Buffer.from(data.methodName).toString('hex');\n\n    for (const k of data.arguments || []) {\n      if (new bignumber_js_1.BigNumber(k).isNaN()) {\n        args += `@${Buffer.from(k).toString('hex')}`;\n      } else {\n        args += `@${encodeNumber(new bignumber_js_1.BigNumber(k))}`;\n      }\n    }\n  }\n\n  return `${data.service}@${tokenId}@${value}` + args;\n};\n\nconst prepareEgldEsdtMintOrBurnData = async data => {\n  await tatum_1.validateBody(data, model_1.EsdtMint);\n  const tokenId = Buffer.from(data.tokenId).toString('hex');\n  const supply = encodeNumber(data.supply);\n  return `${data.service}@${tokenId}@${supply}`;\n};\n\nconst prepareEgldEsdtPauseData = async data => {\n  await tatum_1.validateBody(data, model_1.EsdtToken);\n  const tokenId = Buffer.from(data.tokenId).toString('hex');\n  return `${data.service}@${tokenId}`;\n};\n\nconst prepareEgldEsdtFreezeOrWipeOrOwnershipData = async data => {\n  await tatum_1.validateBody(data, model_1.EsdtFreezeOrWipeOrOwnership);\n  const tokenId = Buffer.from(data.tokenId).toString('hex');\n  const account = Buffer.from(data.account).toString('hex');\n  return `${data.service}@${tokenId}@${account}`;\n};\n\nconst prepareEgldEsdtSpecialRoleData = async data => {\n  await tatum_1.validateBody(data, model_1.EsdtSpecialRole);\n  const tokenId = Buffer.from(data.tokenId).toString('hex');\n  const account = Buffer.from(data.account).toString('hex');\n  let roles = '';\n\n  for (const k of data.role) {\n    roles += `@${Buffer.from(k).toString('hex')}`;\n  }\n\n  return `${data.service}@${tokenId}@${account}` + roles;\n};\n\nconst prepareEgldEsdtControlChangesData = async data => {\n  await tatum_1.validateBody(data, model_1.EsdtControlChanges);\n  const tokenId = Buffer.from(data.tokenId).toString('hex');\n  const properties = prepareProperties(data.properties);\n  return `${data.service}@${tokenId}` + properties;\n};\n\nconst prepareEgldIssuanceNftOrSftData = async data => {\n  await tatum_1.validateBody(data, model_1.EsdtIssueNftOrSft);\n  const tokenName = Buffer.from(data.name).toString('hex');\n  const tokenTicker = Buffer.from(data.symbol).toString('hex');\n  const properties = prepareProperties(data.properties);\n  return `${data.service}@${tokenName}@${tokenTicker}` + properties;\n};\n\nconst prepareEgldCreateNftOrSftData = async data => {\n  await tatum_1.validateBody(data, model_1.EsdtCreateNftOrSft);\n  const tokenId = Buffer.from(data.tokenId).toString('hex');\n  const nftName = Buffer.from(data.nftName).toString('hex');\n  const quantity = encodeNumber(data.quantity);\n  const royalties = encodeNumber(new bignumber_js_1.BigNumber(data.royalties).multipliedBy(100));\n  const attributes = Buffer.from(data.attributes).toString('hex');\n  let uris = '';\n\n  for (const k of data.uri) {\n    uris += `@${Buffer.from(k).toString('hex')}`;\n  }\n\n  return `${data.service}@${tokenId}@${quantity}@${nftName}@${royalties}` + `@${data.hash}@${attributes}` + uris;\n};\n\nconst prepareEgldTransferNftCreateRoleData = async data => {\n  await tatum_1.validateBody(data, model_1.EsdtTransferNftCreateRole);\n  const tokenId = Buffer.from(data.tokenId).toString('hex');\n  const from = Buffer.from(data.from).toString('hex');\n  const to = Buffer.from(data.to).toString('hex');\n  return `${data.service}@${tokenId}@${from}@${to}`;\n};\n\nconst prepareEgldStopNftCreateData = async data => {\n  await tatum_1.validateBody(data, model_1.EsdtToken);\n  const tokenId = Buffer.from(data.tokenId).toString('hex');\n  return `${data.service}@${tokenId}`;\n};\n\nconst prepareEgldAddOrBurnNftQuantityData = async data => {\n  await tatum_1.validateBody(data, model_1.EsdtAddOrBurnNftQuantity);\n  const tokenId = Buffer.from(data.tokenId).toString('hex');\n  const nonce = encodeNumber(data.nonce);\n  const quantity = encodeNumber(data.quantity);\n  return `${data.service}@${tokenId}@${nonce}@${quantity}`;\n};\n\nconst prepareEgldFreezeOrWipeNftData = async data => {\n  await tatum_1.validateBody(data, model_1.EsdtFreezeOrWipeNft);\n  const tokenId = Buffer.from(data.tokenId).toString('hex');\n  const nonce = encodeNumber(data.nonce);\n  const account = Buffer.from(data.account).toString('hex');\n  return `${data.service}@${tokenId}@${nonce}@${account}`;\n};\n\nconst prepareEgldTransferNftData = async data => {\n  await tatum_1.validateBody(data, model_1.EsdtTransferNft);\n  const tokenId = Buffer.from(data.tokenId).toString('hex');\n  const nonce = encodeNumber(data.nonce);\n  const quantity = encodeNumber(data.quantity);\n  const to = Buffer.from(data.to).toString('hex');\n  let args = '';\n\n  if (data.methodName) {\n    args += '@' + Buffer.from(data.methodName).toString('hex');\n\n    for (const k of data.arguments || []) {\n      if (new bignumber_js_1.BigNumber(k).isNaN()) {\n        args += `@${Buffer.from(k).toString('hex')}`;\n      } else {\n        args += `@${encodeNumber(new bignumber_js_1.BigNumber(k))}`;\n      }\n    }\n  }\n\n  return `${data.service}@${tokenId}@${nonce}@${quantity}@${to}` + args;\n};\n/**\n * Sign transaction abstraction. Nothing is broadcast to the blockchain.\n * @param client Web3 client of the EGLD Server to connect to. If not set, default public server will be used.\n * @param transaction content of the transaction to broadcast\n * @param signatureId signature ID\n * @param fromPrivateKey private key\n * @param fee Fee object\n * @returns transaction data to be broadcast to blockchain.\n */\n\n\nconst prepareSignedTransactionAbstraction = async (client, transaction, signatureId, fromPrivateKey) => {\n  const sender = transaction.from || (await address_1.generateAddressFromPrivatekey(model_1.Currency.EGLD, false, fromPrivateKey));\n  const {\n    data\n  } = await exports.egldGetConfig();\n  const {\n    config\n  } = data;\n  const gasPrice = (config === null || config === void 0 ? void 0 : config.erd_min_gas_price) || 1000000000;\n  const nonce = await blockchain_1.egldGetTransactionsCount(sender);\n  const egldTx = {\n    nonce,\n    value: new bignumber_js_1.BigNumber(transaction.value).isLessThan(0) ? '0' : new bignumber_js_1.BigNumber(transaction.value).multipliedBy(1e18).toFixed(),\n    receiver: transaction.to,\n    sender,\n    gasPrice,\n    gasLimit: 0,\n    data: transaction.data ? Buffer.from(transaction.data).toString('base64') : undefined,\n    chainID: config.erd_chain_id,\n    version: config.erd_min_transaction_version\n  };\n  const gasLimit = await exports.egldGetGasLimit(egldTx);\n  egldTx.gasLimit = gasLimit;\n\n  if (signatureId) {\n    return JSON.stringify({\n      from: sender,\n      to: transaction.to,\n      value: transaction.value,\n      data: transaction.data,\n      gasPrice,\n      gasLimit\n    });\n  }\n\n  const erdjsTransaction = new erdjs_1.Transaction({\n    nonce: new erdjs_1.Nonce(egldTx.nonce),\n    value: erdjs_1.Balance.fromString(egldTx.value),\n    receiver: new erdjs_1.Address(egldTx.receiver),\n    sender: new erdjs_1.Address(egldTx.sender),\n    gasPrice: new erdjs_1.GasPrice(egldTx.gasPrice),\n    gasLimit: new erdjs_1.GasLimit(egldTx.gasLimit),\n    data: transaction.data ? new erdjs_1.TransactionPayload(transaction.data) : undefined,\n    chainID: new erdjs_1.ChainID(egldTx.chainID),\n    version: new erdjs_1.TransactionVersion(egldTx.version)\n  });\n  return await exports.signEgldTransaction(erdjsTransaction, fromPrivateKey);\n};\n/**\n * Sign ESDT transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\n\nconst prepareEgldDeployEsdtSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EgldEsdtTransaction);\n  const {\n    fromPrivateKey,\n    signatureId,\n    from,\n    amount,\n    data\n  } = body;\n  const client = exports.getEgldClient(provider);\n  const value = amount ? new bignumber_js_1.BigNumber(amount).toNumber() : 0.05;\n  const sender = from || (await address_1.generateAddressFromPrivatekey(model_1.Currency.EGLD, false, fromPrivateKey));\n  const tx = {\n    from: sender,\n    to: constants_1.ESDT_SYSTEM_SMART_CONTRACT_ADDRESS,\n    value,\n    data: await prepareEgldEsdtIssuanceData(Object.assign(Object.assign({}, data), {\n      service: data.service || 'issue'\n    }))\n  };\n  return await prepareSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEgldDeployEsdtSignedTransaction = prepareEgldDeployEsdtSignedTransaction;\n/**\n * Sign ESDT transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEgldTransferEsdtSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EgldEsdtTransaction);\n  const {\n    fromPrivateKey,\n    signatureId,\n    from,\n    to,\n    data\n  } = body;\n  const client = exports.getEgldClient(provider);\n  const sender = from || (await address_1.generateAddressFromPrivatekey(model_1.Currency.EGLD, false, fromPrivateKey));\n  const tx = {\n    from: sender,\n    to,\n    data: await prepareEgldEsdtTransferData(Object.assign(Object.assign({}, data), {\n      service: data.service || 'ESDTTransfer'\n    }))\n  };\n  return await prepareSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEgldTransferEsdtSignedTransaction = prepareEgldTransferEsdtSignedTransaction;\n/**\n * Sign ESDT mint transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEgldMintEsdtSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EgldEsdtTransaction);\n  const {\n    fromPrivateKey,\n    signatureId,\n    from,\n    data\n  } = body;\n  const client = exports.getEgldClient(provider);\n  const sender = from || (await address_1.generateAddressFromPrivatekey(model_1.Currency.EGLD, false, fromPrivateKey));\n  const tx = {\n    from: sender,\n    to: constants_1.ESDT_SYSTEM_SMART_CONTRACT_ADDRESS,\n    data: await prepareEgldEsdtMintOrBurnData(Object.assign(Object.assign({}, data), {\n      service: data.service || 'mint'\n    }))\n  };\n  return await prepareSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEgldMintEsdtSignedTransaction = prepareEgldMintEsdtSignedTransaction;\n/**\n * Sign ESDT burn transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEgldBurnEsdtSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EgldEsdtTransaction);\n  const {\n    fromPrivateKey,\n    signatureId,\n    from,\n    data\n  } = body;\n  const client = exports.getEgldClient(provider);\n  const sender = from || (await address_1.generateAddressFromPrivatekey(model_1.Currency.EGLD, false, fromPrivateKey));\n  const tx = {\n    from: sender,\n    to: constants_1.ESDT_SYSTEM_SMART_CONTRACT_ADDRESS,\n    data: await prepareEgldEsdtMintOrBurnData(Object.assign(Object.assign({}, data), {\n      service: data.service || 'ESDTBurn'\n    }))\n  };\n  return await prepareSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEgldBurnEsdtSignedTransaction = prepareEgldBurnEsdtSignedTransaction;\n/**\n * Sign ESDT pause transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEgldPauseEsdtSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EgldEsdtTransaction);\n  const {\n    fromPrivateKey,\n    signatureId,\n    from,\n    data\n  } = body;\n  const client = exports.getEgldClient(provider);\n  const sender = from || (await address_1.generateAddressFromPrivatekey(model_1.Currency.EGLD, false, fromPrivateKey));\n  const tx = {\n    from: sender,\n    to: constants_1.ESDT_SYSTEM_SMART_CONTRACT_ADDRESS,\n    data: await prepareEgldEsdtPauseData(Object.assign(Object.assign({}, data), {\n      service: data.service || 'pause'\n    }))\n  };\n  return await prepareSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEgldPauseEsdtSignedTransaction = prepareEgldPauseEsdtSignedTransaction;\n/**\n * Sign ESDT special role transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEgldSpecialRoleEsdtOrNftSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EgldEsdtTransaction);\n  const {\n    fromPrivateKey,\n    signatureId,\n    from,\n    data\n  } = body;\n  const client = exports.getEgldClient(provider);\n  const sender = from || (await address_1.generateAddressFromPrivatekey(model_1.Currency.EGLD, false, fromPrivateKey));\n  const tx = {\n    from: sender,\n    to: constants_1.ESDT_SYSTEM_SMART_CONTRACT_ADDRESS,\n    data: await prepareEgldEsdtSpecialRoleData(Object.assign(Object.assign({}, data), {\n      service: data.service || 'setSpecialRole'\n    }))\n  };\n  return await prepareSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEgldSpecialRoleEsdtOrNftSignedTransaction = prepareEgldSpecialRoleEsdtOrNftSignedTransaction;\n/**\n * Sign ESDT freze | wipe | transfer ownership transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEgldFreezeOrWipeOrOwvershipEsdtSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EgldEsdtTransaction);\n  const {\n    fromPrivateKey,\n    signatureId,\n    from,\n    data\n  } = body;\n  const client = exports.getEgldClient(provider);\n  const sender = from || (await address_1.generateAddressFromPrivatekey(model_1.Currency.EGLD, false, fromPrivateKey));\n  const tx = {\n    from: sender,\n    to: constants_1.ESDT_SYSTEM_SMART_CONTRACT_ADDRESS,\n    data: await prepareEgldEsdtFreezeOrWipeOrOwnershipData(Object.assign(Object.assign({}, data), {\n      service: data.service || 'transferOwnership'\n    }))\n  };\n  return await prepareSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEgldFreezeOrWipeOrOwvershipEsdtSignedTransaction = prepareEgldFreezeOrWipeOrOwvershipEsdtSignedTransaction;\n/**\n * Sign ESDT control changes (upgrading props) transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEgldControlChangesEsdtSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EgldEsdtTransaction);\n  const {\n    fromPrivateKey,\n    signatureId,\n    from,\n    data\n  } = body;\n  const client = exports.getEgldClient(provider);\n  const sender = from || (await address_1.generateAddressFromPrivatekey(model_1.Currency.EGLD, false, fromPrivateKey));\n  const tx = {\n    from: sender,\n    to: constants_1.ESDT_SYSTEM_SMART_CONTRACT_ADDRESS,\n    data: await prepareEgldEsdtControlChangesData(Object.assign(Object.assign({}, data), {\n      service: data.service || 'controlChanges'\n    }))\n  };\n  return await prepareSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEgldControlChangesEsdtSignedTransaction = prepareEgldControlChangesEsdtSignedTransaction;\n/**\n * Sign ESDT issue transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEgldDeployNftOrSftSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EgldEsdtTransaction);\n  const {\n    fromPrivateKey,\n    signatureId,\n    from,\n    amount,\n    data\n  } = body;\n  const client = exports.getEgldClient(provider);\n  const value = amount ? new bignumber_js_1.BigNumber(amount).toNumber() : 0.05;\n  const sender = from || (await address_1.generateAddressFromPrivatekey(model_1.Currency.EGLD, false, fromPrivateKey)); // @ts-ignore\n\n  const tx = {\n    from: sender,\n    to: constants_1.ESDT_SYSTEM_SMART_CONTRACT_ADDRESS,\n    value,\n    data: await prepareEgldIssuanceNftOrSftData(Object.assign(Object.assign({}, data), {\n      service: data.service || 'issueNonFungible'\n    }))\n  };\n  return await prepareSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEgldDeployNftOrSftSignedTransaction = prepareEgldDeployNftOrSftSignedTransaction;\n/**\n * Sign ESDT create NFT/SFT transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEgldCreateNftOrSftSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EgldEsdtTransaction);\n  const {\n    fromPrivateKey,\n    signatureId,\n    from,\n    amount,\n    data\n  } = body;\n  const client = exports.getEgldClient(provider);\n  const value = amount ? new bignumber_js_1.BigNumber(amount).toNumber() : 0;\n  const sender = from || (await address_1.generateAddressFromPrivatekey(model_1.Currency.EGLD, false, fromPrivateKey));\n  const tx = {\n    from: sender,\n    to: sender,\n    value,\n    data: await prepareEgldCreateNftOrSftData(Object.assign(Object.assign({}, data), {\n      service: data.service || 'ESDTNFTCreate'\n    }))\n  }; // gas limit = 60000000 + (1500 * data.length) + (50000 * NFT size)\n  // const gasLimit = fee?.gasLimit ? fee.gasLimit : new BigNumber('60000000').plus((tx.data as string).length).multipliedBy(1500).toString()\n\n  return await prepareSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEgldCreateNftOrSftSignedTransaction = prepareEgldCreateNftOrSftSignedTransaction;\n/**\n * Sign ESDT transfer NFT create role transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEgldTransferNftCreateRoleSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EgldEsdtTransaction);\n  const {\n    fromPrivateKey,\n    signatureId,\n    from,\n    amount,\n    data\n  } = body;\n  const client = exports.getEgldClient(provider);\n  const value = amount ? new bignumber_js_1.BigNumber(amount).toNumber() : 0;\n  const sender = from || (await address_1.generateAddressFromPrivatekey(model_1.Currency.EGLD, false, fromPrivateKey));\n  const tx = {\n    from: sender,\n    to: constants_1.ESDT_SYSTEM_SMART_CONTRACT_ADDRESS,\n    value,\n    data: await prepareEgldTransferNftCreateRoleData(Object.assign(Object.assign({}, data), {\n      service: data.service || 'transferNFTCreateRole'\n    }))\n  }; // gas limit = 60000000 + (1500 * data.length)\n  // const gasLimit = fee?.gasLimit ? fee.gasLimit : new BigNumber('60000000').plus((tx.data as string).length).multipliedBy(1500).toString()\n\n  return await prepareSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEgldTransferNftCreateRoleSignedTransaction = prepareEgldTransferNftCreateRoleSignedTransaction;\n/**\n * Sign ESDT stop NFT create transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEgldStopNftCreateSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EgldEsdtTransaction);\n  const {\n    fromPrivateKey,\n    signatureId,\n    from,\n    amount,\n    data\n  } = body;\n  const client = exports.getEgldClient(provider);\n  const value = amount ? new bignumber_js_1.BigNumber(amount).toNumber() : 0;\n  const sender = from || (await address_1.generateAddressFromPrivatekey(model_1.Currency.EGLD, false, fromPrivateKey));\n  const tx = {\n    from: sender,\n    to: constants_1.ESDT_SYSTEM_SMART_CONTRACT_ADDRESS,\n    value,\n    data: await prepareEgldStopNftCreateData(Object.assign(Object.assign({}, data), {\n      service: data.service || 'stopNFTCreate'\n    }))\n  };\n  return await prepareSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEgldStopNftCreateSignedTransaction = prepareEgldStopNftCreateSignedTransaction;\n/**\n * Sign ESDT Burn or Add quantity (SFT only) transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEgldAddOrBurnNftQuantitySignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EgldEsdtTransaction);\n  const {\n    fromPrivateKey,\n    signatureId,\n    from,\n    amount,\n    data\n  } = body;\n  const client = exports.getEgldClient(provider);\n  const value = amount ? new bignumber_js_1.BigNumber(amount).toNumber() : 0;\n  const sender = from || (await address_1.generateAddressFromPrivatekey(model_1.Currency.EGLD, false, fromPrivateKey));\n  const tx = {\n    from: sender,\n    to: sender,\n    value,\n    data: await prepareEgldAddOrBurnNftQuantityData(Object.assign(Object.assign({}, data), {\n      service: data.service || 'ESDTNFTBurn'\n    }))\n  };\n  return await prepareSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEgldAddOrBurnNftQuantitySignedTransaction = prepareEgldAddOrBurnNftQuantitySignedTransaction;\n/**\n * Sign ESDT freeze NFT transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEgldFreezeNftSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EgldEsdtTransaction);\n  const {\n    fromPrivateKey,\n    signatureId,\n    from,\n    amount,\n    data\n  } = body;\n  const client = exports.getEgldClient(provider);\n  const value = amount ? new bignumber_js_1.BigNumber(amount).toNumber() : 0;\n  const sender = from || (await address_1.generateAddressFromPrivatekey(model_1.Currency.EGLD, false, fromPrivateKey));\n  const tx = {\n    from: sender,\n    to: constants_1.ESDT_SYSTEM_SMART_CONTRACT_ADDRESS,\n    value,\n    data: await prepareEgldFreezeOrWipeNftData(Object.assign(Object.assign({}, data), {\n      service: data.service || 'freezeSingleNFT'\n    }))\n  };\n  return await prepareSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEgldFreezeNftSignedTransaction = prepareEgldFreezeNftSignedTransaction;\n/**\n * Sign ESDT freeze NFT transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEgldWipeNftSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EgldEsdtTransaction);\n  const {\n    fromPrivateKey,\n    signatureId,\n    from,\n    amount,\n    data\n  } = body;\n  const client = exports.getEgldClient(provider);\n  const value = amount ? new bignumber_js_1.BigNumber(amount).toNumber() : 0;\n  const sender = from || (await address_1.generateAddressFromPrivatekey(model_1.Currency.EGLD, false, fromPrivateKey));\n  const tx = {\n    from: sender,\n    to: constants_1.ESDT_SYSTEM_SMART_CONTRACT_ADDRESS,\n    value,\n    data: await prepareEgldFreezeOrWipeNftData(Object.assign(Object.assign({}, data), {\n      service: data.service || 'wipeSingleNFT'\n    }))\n  };\n  return await prepareSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEgldWipeNftSignedTransaction = prepareEgldWipeNftSignedTransaction;\n/**\n * Sign ESDT transfer NFT transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEgldTransferNftSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EgldEsdtTransaction);\n  const {\n    fromPrivateKey,\n    signatureId,\n    from,\n    amount,\n    data\n  } = body;\n  const client = exports.getEgldClient(provider);\n  const value = amount ? new bignumber_js_1.BigNumber(amount).toNumber() : 0;\n  const sender = from || (await address_1.generateAddressFromPrivatekey(model_1.Currency.EGLD, false, fromPrivateKey));\n  const tx = {\n    from: sender,\n    to: sender,\n    value,\n    data: await prepareEgldTransferNftData(Object.assign(Object.assign({}, data), {\n      service: data.service || 'ESDTNFTTransfer'\n    }))\n  }; // TRANSFER: GasLimit: 1000000 + length of Data field in bytes * 1500\n  // TRANSFER TO SMART CONTRACT: GasLimit: 1000000 + extra for smart contract call\n  // const gasLimit = fee?.gasLimit ? fee.gasLimit : new BigNumber('1000000').plus((tx.data as string).length).multipliedBy(1500).toString()\n\n  return await prepareSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEgldTransferNftSignedTransaction = prepareEgldTransferNftSignedTransaction;\n/**\n * Sign EGLD transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEgldSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EgldEsdtTransaction);\n  const {\n    fromPrivateKey,\n    signatureId,\n    from,\n    to,\n    amount,\n    data\n  } = body;\n  const client = exports.getEgldClient(provider);\n  const tx = {\n    from: from || 0,\n    to: to,\n    value: amount,\n    data\n  };\n  return await prepareSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEgldSignedTransaction = prepareEgldSignedTransaction;\n/**\n * Send EGLD store data transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendEgldStoreDataTransaction = async (body, provider) => blockchain_1.egldBroadcast(await exports.prepareEgldStoreDataTransaction(body, provider), body.signatureId);\n\nexports.sendEgldStoreDataTransaction = sendEgldStoreDataTransaction;\n/**\n * Send EGLD or supported ERC20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendEgldTransaction = async (body, provider) => blockchain_1.egldBroadcast(await exports.prepareEgldSignedTransaction(body, provider), body.signatureId);\n\nexports.sendEgldTransaction = sendEgldTransaction;\n/**\n * Send EGLD deploy ESDT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendEgldDeployEsdtTransaction = async (body, provider) => blockchain_1.egldBroadcast(await exports.prepareEgldDeployEsdtSignedTransaction(body, provider), body.signatureId);\n\nexports.sendEgldDeployEsdtTransaction = sendEgldDeployEsdtTransaction;\n/**\n * Send EGLD invoke smart contract transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendEgldSmartContractMethodInvocationTransaction = async (body, provider) => {\n  return blockchain_1.egldBroadcast(await exports.prepareEgldTransferEsdtSignedTransaction(body, provider), body.signatureId);\n};\n\nexports.sendEgldSmartContractMethodInvocationTransaction = sendEgldSmartContractMethodInvocationTransaction;\n/**\n * Send EGLD ERC721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendEgldTransferNftTransaction = async (body, provider) => blockchain_1.egldBroadcast(await exports.prepareEgldTransferNftSignedTransaction(body, provider), body.signatureId);\n\nexports.sendEgldTransferNftTransaction = sendEgldTransferNftTransaction;\n/**\n * Send EGLD NFT deploy to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendEgldDeployNftTransaction = async (body, provider) => blockchain_1.egldBroadcast(await exports.prepareEgldDeployNftOrSftSignedTransaction(body, provider), body.signatureId);\n\nexports.sendEgldDeployNftTransaction = sendEgldDeployNftTransaction; // TODO: add ERC-1155 support","map":{"version":3,"mappings":"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","names":["ELROND_V3_ENDPOINT","process","env","TATUM_API_URL","constants_1","egldGetConfig","gasStationUrl","exports","data","tatum_1","get","TATUM_API_KEY","e","console","error","toString","egldGetGasPrice","price","config","_a","erd_min_gas_price","Error","_b","returnMessage","egldGetGasLimit","tx","post","gas","txGasUnits","signEgldTransaction","fromPrivateKey","fromAddrSigner","erdjs_1","fromString","sign","JSON","stringify","toSendable","getEgldClient","provider","client","signEgldKMSTransaction","chain","model_1","EGLD","transaction","parse","serializedTransaction","prepareSignedTransactionAbstraction","undefined","prepareEgldStoreDataTransaction","body","signatureId","from","address","address_1","to","value","encodeNumber","n","bn","bignumber_js_1","isNaN","result","toLowerCase","length","prepareProperties","props","keys","Object","asHexTrue","asHexFalse","k","Buffer","prepareEgldEsdtIssuanceData","tokenName","name","tokenTicker","symbol","initialSupply","supply","decimals","digits","properties","service","prepareEgldEsdtTransferData","tokenId","args","methodName","arguments","prepareEgldEsdtMintOrBurnData","prepareEgldEsdtPauseData","prepareEgldEsdtFreezeOrWipeOrOwnershipData","account","prepareEgldEsdtSpecialRoleData","roles","role","prepareEgldEsdtControlChangesData","prepareEgldIssuanceNftOrSftData","prepareEgldCreateNftOrSftData","nftName","quantity","royalties","multipliedBy","attributes","uris","uri","hash","prepareEgldTransferNftCreateRoleData","prepareEgldStopNftCreateData","prepareEgldAddOrBurnNftQuantityData","nonce","prepareEgldFreezeOrWipeNftData","prepareEgldTransferNftData","sender","gasPrice","blockchain_1","egldTx","isLessThan","toFixed","receiver","gasLimit","chainID","erd_chain_id","version","erd_min_transaction_version","erdjsTransaction","prepareEgldDeployEsdtSignedTransaction","amount","toNumber","prepareEgldTransferEsdtSignedTransaction","prepareEgldMintEsdtSignedTransaction","prepareEgldBurnEsdtSignedTransaction","prepareEgldPauseEsdtSignedTransaction","prepareEgldSpecialRoleEsdtOrNftSignedTransaction","prepareEgldFreezeOrWipeOrOwvershipEsdtSignedTransaction","prepareEgldControlChangesEsdtSignedTransaction","prepareEgldDeployNftOrSftSignedTransaction","prepareEgldCreateNftOrSftSignedTransaction","prepareEgldTransferNftCreateRoleSignedTransaction","prepareEgldStopNftCreateSignedTransaction","prepareEgldAddOrBurnNftQuantitySignedTransaction","prepareEgldFreezeNftSignedTransaction","prepareEgldWipeNftSignedTransaction","prepareEgldTransferNftSignedTransaction","prepareEgldSignedTransaction","sendEgldStoreDataTransaction","sendEgldTransaction","sendEgldDeployEsdtTransaction","sendEgldSmartContractMethodInvocationTransaction","sendEgldTransferNftTransaction","sendEgldDeployNftTransaction"],"sourceRoot":"","sources":["../../../src/transaction/egld.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}