{"ast":null,"code":"(generator => {\n  if (typeof window === 'object') {\n    const exports = {};\n\n    if (typeof module !== 'undefined' && module.exports) {\n      module.exports = generator(exports, false);\n    } else {\n      window.bls = generator(exports, false);\n    }\n  } else {\n    generator(exports, true);\n  }\n})((exports, isNodeJs) => {\n  /* eslint-disable */\n  exports.BN254 = 0;\n  exports.BN381_1 = 1;\n  exports.BLS12_381 = 5;\n  exports.ethMode = false;\n  exports.ETH_MODE_DRAFT_05 = 1;\n  exports.ETH_MODE_DRAFT_06 = 2;\n  exports.ETH_MODE_DRAFT_07 = 3;\n\n  const setup = (exports, curveType) => {\n    const mod = exports.mod;\n    const MCLBN_FP_UNIT_SIZE = 6;\n    const MCLBN_FR_UNIT_SIZE = exports.ethMode ? 4 : 6;\n    const BLS_COMPILER_TIME_VAR_ADJ = exports.ethMode ? 200 : 0;\n    const MCLBN_COMPILED_TIME_VAR = MCLBN_FR_UNIT_SIZE * 10 + MCLBN_FP_UNIT_SIZE + BLS_COMPILER_TIME_VAR_ADJ;\n    const BLS_ID_SIZE = MCLBN_FR_UNIT_SIZE * 8;\n    const BLS_SECRETKEY_SIZE = MCLBN_FP_UNIT_SIZE * 8;\n    const BLS_PUBLICKEY_SIZE = BLS_SECRETKEY_SIZE * 3 * (exports.ethMode ? 1 : 2);\n    const BLS_SIGNATURE_SIZE = BLS_SECRETKEY_SIZE * 3 * (exports.ethMode ? 2 : 1);\n\n    const _malloc = size => {\n      return mod._blsMalloc(size);\n    };\n\n    const _free = pos => {\n      mod._blsFree(pos);\n    };\n\n    const ptrToAsciiStr = (pos, n) => {\n      let s = '';\n\n      for (let i = 0; i < n; i++) {\n        s += String.fromCharCode(mod.HEAP8[pos + i]);\n      }\n\n      return s;\n    };\n\n    const asciiStrToPtr = (pos, s) => {\n      for (let i = 0; i < s.length; i++) {\n        mod.HEAP8[pos + i] = s.charCodeAt(i);\n      }\n    };\n\n    exports.toHex = (a, start, n) => {\n      let s = '';\n\n      for (let i = 0; i < n; i++) {\n        s += ('0' + a[start + i].toString(16)).slice(-2);\n      }\n\n      return s;\n    }; // Uint8Array to hex string\n\n\n    exports.toHexStr = a => {\n      return exports.toHex(a, 0, a.length);\n    }; // hex string to Uint8Array\n\n\n    exports.fromHexStr = s => {\n      if (s.length & 1) throw new Error('fromHexStr:length must be even ' + s.length);\n      const n = s.length / 2;\n      const a = new Uint8Array(n);\n\n      for (let i = 0; i < n; i++) {\n        a[i] = parseInt(s.slice(i * 2, i * 2 + 2), 16);\n      }\n\n      return a;\n    }; ///////////////////////////\n\n\n    const copyToUint32Array = (a, pos) => {\n      a.set(mod.HEAP32.subarray(pos / 4, pos / 4 + a.length)); //    for (let i = 0; i < a.length; i++) {\n      //      a[i] = mod.HEAP32[pos / 4 + i]\n      //    }\n    };\n\n    const copyFromUint32Array = (pos, a) => {\n      mod.HEAP32.set(a, pos / 4); //    for (let i = 0; i < a.length; i++) {\n      //      mod.HEAP32[pos / 4 + i] = a[i]\n      //    }\n    }; //////////////////////////////////\n\n\n    const _wrapGetStr = function (func) {\n      let returnAsStr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return function (x) {\n        let ioMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        const maxBufSize = 3096;\n\n        const pos = _malloc(maxBufSize);\n\n        const n = func(pos, maxBufSize, x, ioMode);\n\n        if (n <= 0) {\n          throw new Error('err gen_str:' + x);\n        }\n\n        let s = null;\n\n        if (returnAsStr) {\n          s = ptrToAsciiStr(pos, n);\n        } else {\n          s = new Uint8Array(mod.HEAP8.subarray(pos, pos + n));\n        }\n\n        _free(pos);\n\n        return s;\n      };\n    };\n\n    const _wrapSerialize = func => {\n      return _wrapGetStr(func, false);\n    };\n\n    const _wrapDeserialize = func => {\n      return (x, buf) => {\n        const pos = _malloc(buf.length);\n\n        mod.HEAP8.set(buf, pos);\n        const r = func(x, pos, buf.length);\n\n        _free(pos);\n\n        if (r === 0) throw new Error('err _wrapDeserialize', buf);\n      };\n    };\n    /*\n      argNum : n\n      func(x0, ..., x_(n-1), buf, ioMode)\n      => func(x0, ..., x_(n-1), pos, buf.length, ioMode)\n    */\n\n\n    const _wrapInput = function (func, argNum) {\n      let returnValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return function () {\n        const args = [...arguments];\n        const buf = args[argNum];\n        const typeStr = Object.prototype.toString.apply(buf);\n\n        if (['[object String]', '[object Uint8Array]', '[object Array]'].indexOf(typeStr) < 0) {\n          throw new Error(`err bad type:\"${typeStr}\". Use String or Uint8Array.`);\n        }\n\n        const ioMode = args[argNum + 1]; // may undefined\n\n        const pos = _malloc(buf.length);\n\n        if (typeStr === '[object String]') {\n          asciiStrToPtr(pos, buf);\n        } else {\n          mod.HEAP8.set(buf, pos);\n        }\n\n        const r = func(...args.slice(0, argNum), pos, buf.length, ioMode);\n\n        _free(pos);\n\n        if (returnValue) return r;\n        if (r) throw new Error('err _wrapInput ' + buf);\n      };\n    };\n\n    const callSetter = (func, a, p1, p2) => {\n      const pos = _malloc(a.length * 4);\n\n      func(pos, p1, p2); // p1, p2 may be undefined\n\n      copyToUint32Array(a, pos);\n\n      _free(pos);\n    };\n\n    const callGetter = (func, a, p1, p2) => {\n      const pos = _malloc(a.length * 4);\n\n      mod.HEAP32.set(a, pos / 4);\n      const s = func(pos, p1, p2);\n\n      _free(pos);\n\n      return s;\n    };\n\n    const callShare = (func, a, size, vec, id) => {\n      const pos = a._allocAndCopy();\n\n      const idPos = id._allocAndCopy();\n\n      const vecPos = _malloc(size * vec.length);\n\n      for (let i = 0; i < vec.length; i++) {\n        copyFromUint32Array(vecPos + size * i, vec[i].a_);\n      }\n\n      func(pos, vecPos, vec.length, idPos);\n\n      _free(vecPos);\n\n      _free(idPos);\n\n      a._saveAndFree(pos);\n    };\n\n    const callRecover = (func, a, size, vec, idVec) => {\n      const n = vec.length;\n      if (n != idVec.length) throw 'recover:bad length';\n\n      const secPos = a._alloc();\n\n      const vecPos = _malloc(size * n);\n\n      const idVecPos = _malloc(BLS_ID_SIZE * n);\n\n      for (let i = 0; i < n; i++) {\n        copyFromUint32Array(vecPos + size * i, vec[i].a_);\n        copyFromUint32Array(idVecPos + BLS_ID_SIZE * i, idVec[i].a_);\n      }\n\n      const r = func(secPos, vecPos, idVecPos, n);\n\n      _free(idVecPos);\n\n      _free(vecPos);\n\n      a._saveAndFree(secPos);\n\n      if (r) throw 'callRecover';\n    }; // change curveType\n\n\n    exports.blsInit = function () {\n      let curveType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exports.ethMode ? exports.BLS12_381 : exports.BN254;\n\n      const r = mod._blsInit(curveType, MCLBN_COMPILED_TIME_VAR);\n\n      if (r) throw 'blsInit err ' + r;\n    };\n\n    exports.getCurveOrder = _wrapGetStr(mod._blsGetCurveOrder);\n    exports.getFieldOrder = _wrapGetStr(mod._blsGetFieldOrder);\n    exports.blsIdSetDecStr = _wrapInput(mod._blsIdSetDecStr, 1);\n    exports.blsIdSetHexStr = _wrapInput(mod._blsIdSetHexStr, 1);\n    exports.blsIdGetDecStr = _wrapGetStr(mod._blsIdGetDecStr);\n    exports.blsIdGetHexStr = _wrapGetStr(mod._blsIdGetHexStr);\n    exports.blsIdSerialize = _wrapSerialize(mod._blsIdSerialize);\n    exports.blsSecretKeySerialize = _wrapSerialize(mod._blsSecretKeySerialize);\n    exports.blsPublicKeySerialize = _wrapSerialize(mod._blsPublicKeySerialize);\n    exports.blsSignatureSerialize = _wrapSerialize(mod._blsSignatureSerialize);\n    exports.blsIdDeserialize = _wrapDeserialize(mod._blsIdDeserialize);\n    exports.blsSecretKeyDeserialize = _wrapDeserialize(mod._blsSecretKeyDeserialize);\n    exports.blsPublicKeyDeserialize = _wrapDeserialize(mod._blsPublicKeyDeserialize);\n    exports.blsSignatureDeserialize = _wrapDeserialize(mod._blsSignatureDeserialize);\n    exports.blsPublicKeySerializeUncompressed = _wrapSerialize(mod._blsPublicKeySerializeUncompressed);\n    exports.blsSignatureSerializeUncompressed = _wrapSerialize(mod._blsSignatureSerializeUncompressed);\n    exports.blsPublicKeyDeserializeUncompressed = _wrapDeserialize(mod._blsPublicKeyDeserializeUncompressed);\n    exports.blsSignatureDeserializeUncompressed = _wrapDeserialize(mod._blsSignatureDeserializeUncompressed);\n    exports.blsSecretKeySetLittleEndian = _wrapInput(mod._blsSecretKeySetLittleEndian, 1);\n    exports.blsSecretKeySetLittleEndianMod = _wrapInput(mod._blsSecretKeySetLittleEndianMod, 1);\n    exports.blsHashToSecretKey = _wrapInput(mod._blsHashToSecretKey, 1);\n    exports.blsSign = _wrapInput(mod._blsSign, 2);\n    exports.blsVerify = _wrapInput(mod._blsVerify, 2, true);\n\n    class Common {\n      constructor(size) {\n        this.a_ = new Uint32Array(size / 4);\n      }\n\n      deserializeHexStr(s) {\n        this.deserialize(exports.fromHexStr(s));\n      }\n\n      serializeToHexStr() {\n        return exports.toHexStr(this.serialize());\n      }\n\n      dump() {\n        let msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n        console.log(msg + this.serializeToHexStr());\n      }\n\n      clear() {\n        this.a_.fill(0);\n      } // alloc new array\n\n\n      _alloc() {\n        return _malloc(this.a_.length * 4);\n      } // alloc and copy a_ to mod.HEAP32[pos / 4]\n\n\n      _allocAndCopy() {\n        const pos = this._alloc();\n\n        mod.HEAP32.set(this.a_, pos / 4);\n        return pos;\n      } // save pos to a_\n\n\n      _save(pos) {\n        this.a_.set(mod.HEAP32.subarray(pos / 4, pos / 4 + this.a_.length));\n      } // save and free\n\n\n      _saveAndFree(pos) {\n        this._save(pos);\n\n        _free(pos);\n      } // set parameter (p1, p2 may be undefined)\n\n\n      _setter(func, p1, p2) {\n        const pos = this._alloc();\n\n        const r = func(pos, p1, p2);\n\n        this._saveAndFree(pos);\n\n        if (r) throw new Error('_setter err');\n      } // getter (p1, p2 may be undefined)\n\n\n      _getter(func, p1, p2) {\n        const pos = this._allocAndCopy();\n\n        const s = func(pos, p1, p2);\n\n        _free(pos);\n\n        return s;\n      }\n\n      _isEqual(func, rhs) {\n        const xPos = this._allocAndCopy();\n\n        const yPos = rhs._allocAndCopy();\n\n        const r = func(xPos, yPos);\n\n        _free(yPos);\n\n        _free(xPos);\n\n        return r === 1;\n      } // func(y, this) and return y\n\n\n      _op1(func) {\n        const y = new this.constructor();\n\n        const xPos = this._allocAndCopy();\n\n        const yPos = y._alloc();\n\n        func(yPos, xPos);\n\n        y._saveAndFree(yPos);\n\n        _free(xPos);\n\n        return y;\n      } // func(z, this, y) and return z\n\n\n      _op2(func, y) {\n        let Cstr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        const z = Cstr ? new Cstr() : new this.constructor();\n\n        const xPos = this._allocAndCopy();\n\n        const yPos = y._allocAndCopy();\n\n        const zPos = z._alloc();\n\n        func(zPos, xPos, yPos);\n\n        z._saveAndFree(zPos);\n\n        _free(yPos);\n\n        _free(xPos);\n\n        return z;\n      } // func(self, y)\n\n\n      _update(func, y) {\n        const xPos = this._allocAndCopy();\n\n        const yPos = y._allocAndCopy();\n\n        func(xPos, yPos);\n\n        _free(yPos);\n\n        this._saveAndFree(xPos);\n      }\n\n    }\n\n    exports.Id = class extends Common {\n      constructor() {\n        super(BLS_ID_SIZE);\n      }\n\n      setInt(x) {\n        this._setter(mod._blsIdSetInt, x);\n      }\n\n      isEqual(rhs) {\n        return this._isEqual(mod._blsIdIsEqual, rhs);\n      }\n\n      deserialize(s) {\n        this._setter(exports.blsIdDeserialize, s);\n      }\n\n      serialize() {\n        return this._getter(exports.blsIdSerialize);\n      }\n\n      setStr(s) {\n        let base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n\n        switch (base) {\n          case 10:\n            this._setter(exports.blsIdSetDecStr, s);\n\n            return;\n\n          case 16:\n            this._setter(exports.blsIdSetHexStr, s);\n\n            return;\n\n          default:\n            throw 'BlsId.setStr:bad base:' + base;\n        }\n      }\n\n      getStr() {\n        let base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n\n        switch (base) {\n          case 10:\n            return this._getter(exports.blsIdGetDecStr);\n\n          case 16:\n            return this._getter(exports.blsIdGetHexStr);\n\n          default:\n            throw 'BlsId.getStr:bad base:' + base;\n        }\n      }\n\n      setLittleEndian(s) {\n        this._setter(exports.blsSecretKeySetLittleEndian, s);\n      }\n\n      setLittleEndianMod(s) {\n        this._setter(exports.blsSecretKeySetLittleEndianMod, s);\n      }\n\n      setByCSPRNG() {\n        const a = new Uint8Array(BLS_ID_SIZE);\n        exports.getRandomValues(a);\n        this.setLittleEndian(a);\n      }\n\n    };\n\n    exports.deserializeHexStrToId = s => {\n      const r = new exports.Id();\n      r.deserializeHexStr(s);\n      return r;\n    };\n\n    exports.SecretKey = class extends Common {\n      constructor() {\n        super(BLS_SECRETKEY_SIZE);\n      }\n\n      setInt(x) {\n        this._setter(mod._blsIdSetInt, x); // same as Id\n\n      }\n\n      isZero() {\n        return this._getter(mod._blsSecretKeyIsZero) === 1;\n      }\n\n      isEqual(rhs) {\n        return this._isEqual(mod._blsSecretKeyIsEqual, rhs);\n      }\n\n      deserialize(s) {\n        this._setter(exports.blsSecretKeyDeserialize, s);\n      }\n\n      serialize() {\n        return this._getter(exports.blsSecretKeySerialize);\n      }\n\n      add(rhs) {\n        this._update(mod._blsSecretKeyAdd, rhs);\n      }\n\n      share(msk, id) {\n        callShare(mod._blsSecretKeyShare, this, BLS_SECRETKEY_SIZE, msk, id);\n      }\n\n      recover(secVec, idVec) {\n        callRecover(mod._blsSecretKeyRecover, this, BLS_SECRETKEY_SIZE, secVec, idVec);\n      }\n\n      setHashOf(s) {\n        this._setter(exports.blsHashToSecretKey, s);\n      }\n\n      setLittleEndian(s) {\n        this._setter(exports.blsSecretKeySetLittleEndian, s);\n      }\n\n      setLittleEndianMod(s) {\n        this._setter(exports.blsSecretKeySetLittleEndianMod, s);\n      }\n\n      setByCSPRNG() {\n        const a = new Uint8Array(BLS_SECRETKEY_SIZE);\n        exports.getRandomValues(a);\n        this.setLittleEndian(a);\n      }\n\n      getPublicKey() {\n        const pub = new exports.PublicKey();\n\n        const secPos = this._allocAndCopy();\n\n        const pubPos = pub._alloc();\n\n        mod._blsGetPublicKey(pubPos, secPos);\n\n        pub._saveAndFree(pubPos);\n\n        _free(secPos);\n\n        return pub;\n      }\n      /*\n        input\n        m : message (string or Uint8Array)\n        return\n        BlsSignature\n      */\n\n\n      sign(m) {\n        const sig = new exports.Signature();\n\n        const secPos = this._allocAndCopy();\n\n        const sigPos = sig._alloc();\n\n        exports.blsSign(sigPos, secPos, m);\n\n        sig._saveAndFree(sigPos);\n\n        _free(secPos);\n\n        return sig;\n      }\n\n    };\n\n    exports.deserializeHexStrToSecretKey = s => {\n      const r = new exports.SecretKey();\n      r.deserializeHexStr(s);\n      return r;\n    };\n\n    exports.PublicKey = class extends Common {\n      constructor() {\n        super(BLS_PUBLICKEY_SIZE);\n      }\n\n      isZero() {\n        return this._getter(mod._blsPublicKeyIsZero) === 1;\n      }\n\n      isEqual(rhs) {\n        return this._isEqual(mod._blsPublicKeyIsEqual, rhs);\n      }\n\n      deserialize(s) {\n        this._setter(exports.blsPublicKeyDeserialize, s);\n      }\n\n      serialize() {\n        return this._getter(exports.blsPublicKeySerialize);\n      }\n\n      deserializeUncompressed(s) {\n        this._setter(exports.blsPublicKeyDeserializeUncompressed, s);\n      }\n\n      serializeUncompressed() {\n        return this._getter(exports.blsPublicKeySerializeUncompressed);\n      }\n\n      add(rhs) {\n        this._update(mod._blsPublicKeyAdd, rhs);\n      }\n\n      share(msk, id) {\n        callShare(mod._blsPublicKeyShare, this, BLS_PUBLICKEY_SIZE, msk, id);\n      }\n\n      recover(secVec, idVec) {\n        callRecover(mod._blsPublicKeyRecover, this, BLS_PUBLICKEY_SIZE, secVec, idVec);\n      }\n\n      isValidOrder() {\n        return this._getter(mod._blsPublicKeyIsValidOrder);\n      }\n\n      verify(sig, m) {\n        const pubPos = this._allocAndCopy();\n\n        const sigPos = sig._allocAndCopy();\n\n        const r = exports.blsVerify(sigPos, pubPos, m);\n\n        _free(sigPos);\n\n        _free(pubPos);\n\n        return r != 0;\n      }\n\n    };\n\n    exports.deserializeHexStrToPublicKey = s => {\n      const r = new exports.PublicKey();\n      r.deserializeHexStr(s);\n      return r;\n    };\n\n    exports.Signature = class extends Common {\n      constructor() {\n        super(BLS_SIGNATURE_SIZE);\n      }\n\n      isZero() {\n        return this._getter(mod._blsSignatureIsZero) === 1;\n      }\n\n      isEqual(rhs) {\n        return this._isEqual(mod._blsSignatureIsEqual, rhs);\n      }\n\n      deserialize(s) {\n        this._setter(exports.blsSignatureDeserialize, s);\n      }\n\n      serialize() {\n        return this._getter(exports.blsSignatureSerialize);\n      }\n\n      deserializeUncompressed(s) {\n        this._setter(exports.blsSignatureDeserializeUncompressed, s);\n      }\n\n      serializeUncompressed() {\n        return this._getter(exports.blsSignatureSerializeUncompressed);\n      }\n\n      add(rhs) {\n        this._update(mod._blsSignatureAdd, rhs);\n      }\n\n      recover(secVec, idVec) {\n        callRecover(mod._blsSignatureRecover, this, BLS_SIGNATURE_SIZE, secVec, idVec);\n      }\n\n      isValidOrder() {\n        return this._getter(mod._blsSignatureIsValidOrder);\n      } // this = aggSig\n\n\n      aggregate(sigVec) {\n        const n = sigVec.length;\n\n        const aggSigPos = this._allocAndCopy();\n\n        const sigVecPos = _malloc(BLS_SIGNATURE_SIZE * n);\n\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(sigVec[i].a_, (sigVecPos + BLS_SIGNATURE_SIZE * i) / 4);\n        }\n\n        const r = mod._blsAggregateSignature(aggSigPos, sigVecPos, n);\n\n        _free(sigVecPos);\n\n        this._saveAndFree(aggSigPos);\n\n        return r == 1;\n      } // this = aggSig\n\n\n      fastAggregateVerify(pubVec, msg) {\n        const n = pubVec.length;\n        const msgSize = msg.length;\n\n        const aggSigPos = this._allocAndCopy();\n\n        const pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n);\n\n        const msgPos = _malloc(msgSize);\n\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4);\n        }\n\n        mod.HEAP8.set(msg, msgPos);\n\n        const r = mod._blsFastAggregateVerify(aggSigPos, pubVecPos, n, msgPos, msgSize);\n\n        _free(msgPos);\n\n        _free(pubVecPos);\n\n        _free(aggSigPos);\n\n        return r == 1;\n      } // this = aggSig\n      // msgVec = (32 * pubVec.length)-size Uint8Array\n\n\n      aggregateVerifyNoCheck(pubVec, msgVec) {\n        const n = pubVec.length;\n        const msgSize = 32;\n\n        if (n == 0 || msgVec.length != msgSize * n) {\n          return false;\n        }\n\n        const aggSigPos = this._allocAndCopy();\n\n        const pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n);\n\n        const msgPos = _malloc(msgVec.length);\n\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4);\n        }\n\n        mod.HEAP8.set(msgVec, msgPos);\n\n        const r = mod._blsAggregateVerifyNoCheck(aggSigPos, pubVecPos, msgPos, msgSize, n);\n\n        _free(msgPos);\n\n        _free(pubVecPos);\n\n        _free(aggSigPos);\n\n        return r == 1;\n      }\n\n    };\n\n    exports.deserializeHexStrToSignature = s => {\n      const r = new exports.Signature();\n      r.deserializeHexStr(s);\n      return r;\n    }; // 1 (draft-05) 2 (draft-06) 3 (draft-07)\n\n\n    exports.setETHmode = mode => {\n      if (mod._blsSetETHmode(mode) != 0) throw new Error(`bad setETHmode ${mode}`);\n    }; // make setter check the correctness of the order if doVerify\n\n\n    exports.verifySignatureOrder = doVerify => {\n      mod._blsSignatureVerifyOrder(doVerify);\n    }; // make setter check the correctness of the order if doVerify\n\n\n    exports.verifyPublicKeyOrder = doVerify => {\n      mod._blsPublicKeyVerifyOrder(doVerify);\n    };\n\n    exports.areAllMsgDifferent = (msgs, msgSize) => {\n      const n = msgs.length / msgSize;\n      if (msgs.length != n * msgSize) return false;\n      h = {};\n\n      for (let i = 0; i < n; i++) {\n        const m = msgs.subarray(i * msgSize, (i + 1) * msgSize);\n        if (m in h) return false;\n        h[m] = true;\n      }\n\n      return true;\n    };\n    /*\n      return true if all pub[i].verify(sigs[i], msgs[i])\n      msgs is array of 32-byte Uint8Array\n    */\n\n\n    exports.multiVerify = (pubs, sigs, msgs) => {\n      const MSG_SIZE = 32;\n      const RAND_SIZE = 8; // 64-bit rand\n\n      const threadNum = 0; // not used\n\n      const n = sigs.length;\n      if (pubs.length != n || msgs.length != n) return false;\n\n      for (let i = 0; i < n; i++) {\n        if (msgs[i].length != MSG_SIZE) return false;\n      }\n\n      const sigPos = _malloc(BLS_SIGNATURE_SIZE * n);\n\n      const pubPos = _malloc(BLS_PUBLICKEY_SIZE * n);\n\n      const msgPos = _malloc(MSG_SIZE * n);\n\n      const randPos = _malloc(RAND_SIZE * n);\n\n      exports.getRandomValues(mod.HEAP8.subarray(randPos, randPos + RAND_SIZE * n));\n\n      for (let i = 0; i < n; i++) {\n        mod.HEAP32.set(sigs[i].a_, (sigPos + BLS_SIGNATURE_SIZE * i) / 4);\n        mod.HEAP32.set(pubs[i].a_, (pubPos + BLS_PUBLICKEY_SIZE * i) / 4);\n        mod.HEAP8.set(msgs[i], msgPos + MSG_SIZE * i);\n      }\n\n      const r = mod._blsMultiVerify(sigPos, pubPos, msgPos, MSG_SIZE, randPos, RAND_SIZE, n, threadNum);\n\n      _free(randPos);\n\n      _free(msgPos);\n\n      _free(pubPos);\n\n      _free(sigPos);\n\n      return r == 1;\n    };\n\n    exports.blsInit(curveType);\n\n    if (exports.ethMode) {\n      exports.setETHmode(exports.ETH_MODE_DRAFT_07);\n    }\n  }; // setup()\n\n\n  const _cryptoGetRandomValues = function (p, n) {\n    const a = new Uint8Array(n);\n    exports.getRandomValues(a);\n\n    for (let i = 0; i < n; i++) {\n      exports.mod.HEAP8[p + i] = a[i];\n    }\n  }; // f(a:array) fills a with random value\n\n\n  exports.setRandFunc = f => {\n    exports.getRandomValues = f;\n  };\n\n  exports.init = function () {\n    let curveType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exports.BN254;\n    exports.curveType = curveType;\n    const name = 'bls_c';\n    return new Promise(resolve => {\n      if (isNodeJs) {\n        const crypto = require('crypto');\n\n        exports.getRandomValues = crypto.randomFillSync;\n\n        const path = require('path');\n\n        const js = require(`./${name}.js`);\n\n        const Module = {\n          cryptoGetRandomValues: _cryptoGetRandomValues,\n          locateFile: baseName => {\n            return path.join(__dirname, baseName);\n          }\n        };\n        js(Module).then(_mod => {\n          exports.mod = _mod;\n          setup(exports, curveType);\n          resolve();\n        });\n      } else {\n        const crypto = window.crypto || window.msCrypto;\n\n        exports.getRandomValues = x => crypto.getRandomValues(x);\n\n        fetch(`./${name}.wasm`) // eslint-disable-line\n        .then(response => response.arrayBuffer()).then(buffer => new Uint8Array(buffer)).then(() => {\n          if (typeof module !== 'undefined' && module.exports) {\n            exports.mod = require('./bls_c')();\n          } else {\n            exports.mod = Module(); // eslint-disable-line\n          }\n\n          exports.mod.cryptoGetRandomValues = _cryptoGetRandomValues;\n\n          exports.mod.onRuntimeInitialized = () => {\n            setup(exports, curveType);\n            resolve();\n          };\n        });\n      }\n    });\n  };\n\n  return exports;\n});","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/NFT_minter/node_modules/@elrondnetwork/bls-wasm/bls.js"],"names":["generator","window","exports","module","bls","isNodeJs","BN254","BN381_1","BLS12_381","ethMode","ETH_MODE_DRAFT_05","ETH_MODE_DRAFT_06","ETH_MODE_DRAFT_07","setup","curveType","mod","MCLBN_FP_UNIT_SIZE","MCLBN_FR_UNIT_SIZE","BLS_COMPILER_TIME_VAR_ADJ","MCLBN_COMPILED_TIME_VAR","BLS_ID_SIZE","BLS_SECRETKEY_SIZE","BLS_PUBLICKEY_SIZE","BLS_SIGNATURE_SIZE","_malloc","size","_blsMalloc","_free","pos","_blsFree","ptrToAsciiStr","n","s","i","String","fromCharCode","HEAP8","asciiStrToPtr","length","charCodeAt","toHex","a","start","toString","slice","toHexStr","fromHexStr","Error","Uint8Array","parseInt","copyToUint32Array","set","HEAP32","subarray","copyFromUint32Array","_wrapGetStr","func","returnAsStr","x","ioMode","maxBufSize","_wrapSerialize","_wrapDeserialize","buf","r","_wrapInput","argNum","returnValue","args","arguments","typeStr","Object","prototype","apply","indexOf","callSetter","p1","p2","callGetter","callShare","vec","id","_allocAndCopy","idPos","vecPos","a_","_saveAndFree","callRecover","idVec","secPos","_alloc","idVecPos","blsInit","_blsInit","getCurveOrder","_blsGetCurveOrder","getFieldOrder","_blsGetFieldOrder","blsIdSetDecStr","_blsIdSetDecStr","blsIdSetHexStr","_blsIdSetHexStr","blsIdGetDecStr","_blsIdGetDecStr","blsIdGetHexStr","_blsIdGetHexStr","blsIdSerialize","_blsIdSerialize","blsSecretKeySerialize","_blsSecretKeySerialize","blsPublicKeySerialize","_blsPublicKeySerialize","blsSignatureSerialize","_blsSignatureSerialize","blsIdDeserialize","_blsIdDeserialize","blsSecretKeyDeserialize","_blsSecretKeyDeserialize","blsPublicKeyDeserialize","_blsPublicKeyDeserialize","blsSignatureDeserialize","_blsSignatureDeserialize","blsPublicKeySerializeUncompressed","_blsPublicKeySerializeUncompressed","blsSignatureSerializeUncompressed","_blsSignatureSerializeUncompressed","blsPublicKeyDeserializeUncompressed","_blsPublicKeyDeserializeUncompressed","blsSignatureDeserializeUncompressed","_blsSignatureDeserializeUncompressed","blsSecretKeySetLittleEndian","_blsSecretKeySetLittleEndian","blsSecretKeySetLittleEndianMod","_blsSecretKeySetLittleEndianMod","blsHashToSecretKey","_blsHashToSecretKey","blsSign","_blsSign","blsVerify","_blsVerify","Common","constructor","Uint32Array","deserializeHexStr","deserialize","serializeToHexStr","serialize","dump","msg","console","log","clear","fill","_save","_setter","_getter","_isEqual","rhs","xPos","yPos","_op1","y","_op2","Cstr","z","zPos","_update","Id","setInt","_blsIdSetInt","isEqual","_blsIdIsEqual","setStr","base","getStr","setLittleEndian","setLittleEndianMod","setByCSPRNG","getRandomValues","deserializeHexStrToId","SecretKey","isZero","_blsSecretKeyIsZero","_blsSecretKeyIsEqual","add","_blsSecretKeyAdd","share","msk","_blsSecretKeyShare","recover","secVec","_blsSecretKeyRecover","setHashOf","getPublicKey","pub","PublicKey","pubPos","_blsGetPublicKey","sign","m","sig","Signature","sigPos","deserializeHexStrToSecretKey","_blsPublicKeyIsZero","_blsPublicKeyIsEqual","deserializeUncompressed","serializeUncompressed","_blsPublicKeyAdd","_blsPublicKeyShare","_blsPublicKeyRecover","isValidOrder","_blsPublicKeyIsValidOrder","verify","deserializeHexStrToPublicKey","_blsSignatureIsZero","_blsSignatureIsEqual","_blsSignatureAdd","_blsSignatureRecover","_blsSignatureIsValidOrder","aggregate","sigVec","aggSigPos","sigVecPos","_blsAggregateSignature","fastAggregateVerify","pubVec","msgSize","pubVecPos","msgPos","_blsFastAggregateVerify","aggregateVerifyNoCheck","msgVec","_blsAggregateVerifyNoCheck","deserializeHexStrToSignature","setETHmode","mode","_blsSetETHmode","verifySignatureOrder","doVerify","_blsSignatureVerifyOrder","verifyPublicKeyOrder","_blsPublicKeyVerifyOrder","areAllMsgDifferent","msgs","h","multiVerify","pubs","sigs","MSG_SIZE","RAND_SIZE","threadNum","randPos","_blsMultiVerify","_cryptoGetRandomValues","p","setRandFunc","f","init","name","Promise","resolve","crypto","require","randomFillSync","path","js","Module","cryptoGetRandomValues","locateFile","baseName","join","__dirname","then","_mod","msCrypto","fetch","response","arrayBuffer","buffer","onRuntimeInitialized"],"mappings":"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","sourcesContent":["(generator => {\n  if (typeof window === 'object') {\n    const exports = {}\n\n    if (typeof module !== 'undefined' && module.exports) {\n      module.exports = generator(exports, false)\n    } else {\n      window.bls = generator(exports, false)\n    }\n  } else {\n    generator(exports, true)\n  }\n})((exports, isNodeJs) => {\n  /* eslint-disable */\n  exports.BN254 = 0\n  exports.BN381_1 = 1\n  exports.BLS12_381 = 5\n  exports.ethMode = false\n  exports.ETH_MODE_DRAFT_05 = 1\n  exports.ETH_MODE_DRAFT_06 = 2\n  exports.ETH_MODE_DRAFT_07 = 3\n\n  const setup = (exports, curveType) => {\n    const mod = exports.mod\n    const MCLBN_FP_UNIT_SIZE = 6\n    const MCLBN_FR_UNIT_SIZE = exports.ethMode ? 4 : 6\n    const BLS_COMPILER_TIME_VAR_ADJ = exports.ethMode ? 200 : 0\n    const MCLBN_COMPILED_TIME_VAR = (MCLBN_FR_UNIT_SIZE * 10 + MCLBN_FP_UNIT_SIZE) + BLS_COMPILER_TIME_VAR_ADJ\n    const BLS_ID_SIZE = MCLBN_FR_UNIT_SIZE * 8\n    const BLS_SECRETKEY_SIZE = MCLBN_FP_UNIT_SIZE * 8\n    const BLS_PUBLICKEY_SIZE = BLS_SECRETKEY_SIZE * 3 * (exports.ethMode ? 1 : 2)\n    const BLS_SIGNATURE_SIZE = BLS_SECRETKEY_SIZE * 3 * (exports.ethMode ? 2 : 1)\n\n    const _malloc = size => {\n      return mod._blsMalloc(size)\n    }\n    const _free = pos => {\n      mod._blsFree(pos)\n    }\n    const ptrToAsciiStr = (pos, n) => {\n      let s = ''\n      for (let i = 0; i < n; i++) {\n        s += String.fromCharCode(mod.HEAP8[pos + i])\n      }\n      return s\n    }\n    const asciiStrToPtr = (pos, s) => {\n      for (let i = 0; i < s.length; i++) {\n        mod.HEAP8[pos + i] = s.charCodeAt(i)\n      }\n    }\n    exports.toHex = (a, start, n) => {\n      let s = ''\n      for (let i = 0; i < n; i++) {\n        s += ('0' + a[start + i].toString(16)).slice(-2)\n      }\n      return s\n    }\n    // Uint8Array to hex string\n    exports.toHexStr = a => {\n      return exports.toHex(a, 0, a.length)\n    }\n    // hex string to Uint8Array\n    exports.fromHexStr = s => {\n      if (s.length & 1) throw new Error('fromHexStr:length must be even ' + s.length)\n      const n = s.length / 2\n      const a = new Uint8Array(n)\n      for (let i = 0; i < n; i++) {\n        a[i] = parseInt(s.slice(i * 2, i * 2 + 2), 16)\n      }\n      return a\n    }\n///////////////////////////\n    const copyToUint32Array = (a, pos) => {\n      a.set(mod.HEAP32.subarray(pos / 4, pos / 4 + a.length))\n//    for (let i = 0; i < a.length; i++) {\n//      a[i] = mod.HEAP32[pos / 4 + i]\n//    }\n    }\n    const copyFromUint32Array = (pos, a) => {\n      mod.HEAP32.set(a, pos / 4)\n//    for (let i = 0; i < a.length; i++) {\n//      mod.HEAP32[pos / 4 + i] = a[i]\n//    }\n    }\n//////////////////////////////////\n    const _wrapGetStr = (func, returnAsStr = true) => {\n      return (x, ioMode = 0) => {\n        const maxBufSize = 3096\n        const pos = _malloc(maxBufSize)\n        const n = func(pos, maxBufSize, x, ioMode)\n        if (n <= 0) {\n          throw new Error('err gen_str:' + x)\n        }\n        let s = null\n        if (returnAsStr) {\n          s = ptrToAsciiStr(pos, n)\n        } else {\n          s = new Uint8Array(mod.HEAP8.subarray(pos, pos + n))\n        }\n        _free(pos)\n        return s\n      }\n    }\n    const _wrapSerialize = func => {\n      return _wrapGetStr(func, false)\n    }\n    const _wrapDeserialize = func => {\n      return (x, buf) => {\n        const pos = _malloc(buf.length)\n        mod.HEAP8.set(buf, pos)\n        const r = func(x, pos, buf.length)\n        _free(pos)\n        if (r === 0) throw new Error('err _wrapDeserialize', buf)\n      }\n    }\n    /*\n      argNum : n\n      func(x0, ..., x_(n-1), buf, ioMode)\n      => func(x0, ..., x_(n-1), pos, buf.length, ioMode)\n    */\n    const _wrapInput = (func, argNum, returnValue = false) => {\n      return function () {\n        const args = [...arguments]\n        const buf = args[argNum]\n        const typeStr = Object.prototype.toString.apply(buf)\n        if (['[object String]', '[object Uint8Array]', '[object Array]'].indexOf(typeStr) < 0) {\n          throw new Error(`err bad type:\"${typeStr}\". Use String or Uint8Array.`)\n        }\n        const ioMode = args[argNum + 1] // may undefined\n        const pos = _malloc(buf.length)\n        if (typeStr === '[object String]') {\n          asciiStrToPtr(pos, buf)\n        } else {\n          mod.HEAP8.set(buf, pos)\n        }\n        const r = func(...args.slice(0, argNum), pos, buf.length, ioMode)\n        _free(pos)\n        if (returnValue) return r\n        if (r) throw new Error('err _wrapInput ' + buf)\n      }\n    }\n    const callSetter = (func, a, p1, p2) => {\n      const pos = _malloc(a.length * 4)\n      func(pos, p1, p2) // p1, p2 may be undefined\n      copyToUint32Array(a, pos)\n      _free(pos)\n    }\n    const callGetter = (func, a, p1, p2) => {\n      const pos = _malloc(a.length * 4)\n      mod.HEAP32.set(a, pos / 4)\n      const s = func(pos, p1, p2)\n      _free(pos)\n      return s\n    }\n    const callShare = (func, a, size, vec, id) => {\n      const pos = a._allocAndCopy()\n      const idPos = id._allocAndCopy()\n      const vecPos = _malloc(size * vec.length)\n      for (let i = 0; i < vec.length; i++) {\n        copyFromUint32Array(vecPos + size * i, vec[i].a_)\n      }\n      func(pos, vecPos, vec.length, idPos)\n      _free(vecPos)\n      _free(idPos)\n      a._saveAndFree(pos)\n    }\n    const callRecover = (func, a, size, vec, idVec) => {\n      const n = vec.length\n      if (n != idVec.length) throw ('recover:bad length')\n      const secPos = a._alloc()\n      const vecPos = _malloc(size * n)\n      const idVecPos = _malloc(BLS_ID_SIZE * n)\n      for (let i = 0; i < n; i++) {\n        copyFromUint32Array(vecPos + size * i, vec[i].a_)\n        copyFromUint32Array(idVecPos + BLS_ID_SIZE * i, idVec[i].a_)\n      }\n      const r = func(secPos, vecPos, idVecPos, n)\n      _free(idVecPos)\n      _free(vecPos)\n      a._saveAndFree(secPos)\n      if (r) throw ('callRecover')\n    }\n\n    // change curveType\n    exports.blsInit = (curveType = (exports.ethMode ? exports.BLS12_381 : exports.BN254)) => {\n      const r = mod._blsInit(curveType, MCLBN_COMPILED_TIME_VAR)\n      if (r) throw ('blsInit err ' + r)\n    }\n    exports.getCurveOrder = _wrapGetStr(mod._blsGetCurveOrder)\n    exports.getFieldOrder = _wrapGetStr(mod._blsGetFieldOrder)\n\n    exports.blsIdSetDecStr = _wrapInput(mod._blsIdSetDecStr, 1)\n    exports.blsIdSetHexStr = _wrapInput(mod._blsIdSetHexStr, 1)\n    exports.blsIdGetDecStr = _wrapGetStr(mod._blsIdGetDecStr)\n    exports.blsIdGetHexStr = _wrapGetStr(mod._blsIdGetHexStr)\n\n    exports.blsIdSerialize = _wrapSerialize(mod._blsIdSerialize)\n    exports.blsSecretKeySerialize = _wrapSerialize(mod._blsSecretKeySerialize)\n    exports.blsPublicKeySerialize = _wrapSerialize(mod._blsPublicKeySerialize)\n    exports.blsSignatureSerialize = _wrapSerialize(mod._blsSignatureSerialize)\n\n    exports.blsIdDeserialize = _wrapDeserialize(mod._blsIdDeserialize)\n    exports.blsSecretKeyDeserialize = _wrapDeserialize(mod._blsSecretKeyDeserialize)\n    exports.blsPublicKeyDeserialize = _wrapDeserialize(mod._blsPublicKeyDeserialize)\n    exports.blsSignatureDeserialize = _wrapDeserialize(mod._blsSignatureDeserialize)\n\n    exports.blsPublicKeySerializeUncompressed = _wrapSerialize(mod._blsPublicKeySerializeUncompressed)\n    exports.blsSignatureSerializeUncompressed = _wrapSerialize(mod._blsSignatureSerializeUncompressed)\n    exports.blsPublicKeyDeserializeUncompressed = _wrapDeserialize(mod._blsPublicKeyDeserializeUncompressed)\n    exports.blsSignatureDeserializeUncompressed = _wrapDeserialize(mod._blsSignatureDeserializeUncompressed)\n\n    exports.blsSecretKeySetLittleEndian = _wrapInput(mod._blsSecretKeySetLittleEndian, 1)\n    exports.blsSecretKeySetLittleEndianMod = _wrapInput(mod._blsSecretKeySetLittleEndianMod, 1)\n    exports.blsHashToSecretKey = _wrapInput(mod._blsHashToSecretKey, 1)\n    exports.blsSign = _wrapInput(mod._blsSign, 2)\n    exports.blsVerify = _wrapInput(mod._blsVerify, 2, true)\n\n    class Common {\n      constructor (size) {\n        this.a_ = new Uint32Array(size / 4)\n      }\n      deserializeHexStr (s) {\n        this.deserialize(exports.fromHexStr(s))\n      }\n      serializeToHexStr () {\n        return exports.toHexStr(this.serialize())\n      }\n      dump (msg = '') {\n        console.log(msg + this.serializeToHexStr())\n      }\n      clear () {\n        this.a_.fill(0)\n      }\n      // alloc new array\n      _alloc () {\n        return _malloc(this.a_.length * 4)\n      }\n      // alloc and copy a_ to mod.HEAP32[pos / 4]\n      _allocAndCopy () {\n        const pos = this._alloc()\n        mod.HEAP32.set(this.a_, pos / 4)\n        return pos\n      }\n      // save pos to a_\n      _save (pos) {\n        this.a_.set(mod.HEAP32.subarray(pos / 4, pos / 4 + this.a_.length))\n      }\n      // save and free\n      _saveAndFree(pos) {\n        this._save(pos)\n        _free(pos)\n      }\n      // set parameter (p1, p2 may be undefined)\n      _setter (func, p1, p2) {\n        const pos = this._alloc()\n        const r = func(pos, p1, p2)\n        this._saveAndFree(pos)\n        if (r) throw new Error('_setter err')\n      }\n      // getter (p1, p2 may be undefined)\n      _getter (func, p1, p2) {\n        const pos = this._allocAndCopy()\n        const s = func(pos, p1, p2)\n        _free(pos)\n        return s\n      }\n      _isEqual (func, rhs) {\n        const xPos = this._allocAndCopy()\n        const yPos = rhs._allocAndCopy()\n        const r = func(xPos, yPos)\n        _free(yPos)\n        _free(xPos)\n        return r === 1\n      }\n      // func(y, this) and return y\n      _op1 (func) {\n        const y = new this.constructor()\n        const xPos = this._allocAndCopy()\n        const yPos = y._alloc()\n        func(yPos, xPos)\n        y._saveAndFree(yPos)\n        _free(xPos)\n        return y\n      }\n      // func(z, this, y) and return z\n      _op2 (func, y, Cstr = null) {\n        const z = Cstr ? new Cstr() : new this.constructor()\n        const xPos = this._allocAndCopy()\n        const yPos = y._allocAndCopy()\n        const zPos = z._alloc()\n        func(zPos, xPos, yPos)\n        z._saveAndFree(zPos)\n        _free(yPos)\n        _free(xPos)\n        return z\n      }\n      // func(self, y)\n      _update (func, y) {\n        const xPos = this._allocAndCopy()\n        const yPos = y._allocAndCopy()\n        func(xPos, yPos)\n        _free(yPos)\n        this._saveAndFree(xPos)\n      }\n    }\n\n    exports.Id = class extends Common {\n      constructor () {\n        super(BLS_ID_SIZE)\n      }\n      setInt (x) {\n        this._setter(mod._blsIdSetInt, x)\n      }\n      isEqual (rhs) {\n        return this._isEqual(mod._blsIdIsEqual, rhs)\n      }\n      deserialize (s) {\n        this._setter(exports.blsIdDeserialize, s)\n      }\n      serialize () {\n        return this._getter(exports.blsIdSerialize)\n      }\n      setStr (s, base = 10) {\n        switch (base) {\n          case 10:\n            this._setter(exports.blsIdSetDecStr, s)\n            return\n          case 16:\n            this._setter(exports.blsIdSetHexStr, s)\n            return\n          default:\n            throw ('BlsId.setStr:bad base:' + base)\n        }\n      }\n      getStr (base = 10) {\n        switch (base) {\n          case 10:\n            return this._getter(exports.blsIdGetDecStr)\n          case 16:\n            return this._getter(exports.blsIdGetHexStr)\n          default:\n            throw ('BlsId.getStr:bad base:' + base)\n        }\n      }\n      setLittleEndian (s) {\n        this._setter(exports.blsSecretKeySetLittleEndian, s)\n      }\n      setLittleEndianMod (s) {\n        this._setter(exports.blsSecretKeySetLittleEndianMod, s)\n      }\n      setByCSPRNG () {\n        const a = new Uint8Array(BLS_ID_SIZE)\n        exports.getRandomValues(a)\n        this.setLittleEndian(a)\n      }\n    }\n    exports.deserializeHexStrToId = s => {\n      const r = new exports.Id()\n      r.deserializeHexStr(s)\n      return r\n    }\n\n    exports.SecretKey = class extends Common {\n      constructor () {\n        super(BLS_SECRETKEY_SIZE)\n      }\n      setInt (x) {\n        this._setter(mod._blsIdSetInt, x) // same as Id\n      }\n      isZero () {\n        return this._getter(mod._blsSecretKeyIsZero) === 1\n      }\n      isEqual (rhs) {\n        return this._isEqual(mod._blsSecretKeyIsEqual, rhs)\n      }\n      deserialize (s) {\n        this._setter(exports.blsSecretKeyDeserialize, s)\n      }\n      serialize () {\n        return this._getter(exports.blsSecretKeySerialize)\n      }\n      add (rhs) {\n        this._update(mod._blsSecretKeyAdd, rhs)\n      }\n      share (msk, id) {\n        callShare(mod._blsSecretKeyShare, this, BLS_SECRETKEY_SIZE, msk, id)\n      }\n      recover (secVec, idVec) {\n        callRecover(mod._blsSecretKeyRecover, this, BLS_SECRETKEY_SIZE, secVec, idVec)\n      }\n      setHashOf (s) {\n        this._setter(exports.blsHashToSecretKey, s)\n      }\n      setLittleEndian (s) {\n        this._setter(exports.blsSecretKeySetLittleEndian, s)\n      }\n      setLittleEndianMod (s) {\n        this._setter(exports.blsSecretKeySetLittleEndianMod, s)\n      }\n      setByCSPRNG () {\n        const a = new Uint8Array(BLS_SECRETKEY_SIZE)\n        exports.getRandomValues(a)\n        this.setLittleEndian(a)\n      }\n      getPublicKey () {\n        const pub = new exports.PublicKey()\n        const secPos = this._allocAndCopy()\n        const pubPos = pub._alloc()\n        mod._blsGetPublicKey(pubPos, secPos)\n        pub._saveAndFree(pubPos)\n        _free(secPos)\n        return pub\n      }\n      /*\n        input\n        m : message (string or Uint8Array)\n        return\n        BlsSignature\n      */\n      sign (m) {\n        const sig = new exports.Signature()\n        const secPos = this._allocAndCopy()\n        const sigPos = sig._alloc()\n        exports.blsSign(sigPos, secPos, m)\n        sig._saveAndFree(sigPos)\n        _free(secPos)\n        return sig\n      }\n    }\n    exports.deserializeHexStrToSecretKey = s => {\n      const r = new exports.SecretKey()\n      r.deserializeHexStr(s)\n      return r\n    }\n\n    exports.PublicKey = class extends Common {\n      constructor () {\n        super(BLS_PUBLICKEY_SIZE)\n      }\n      isZero () {\n        return this._getter(mod._blsPublicKeyIsZero) === 1\n      }\n      isEqual (rhs) {\n        return this._isEqual(mod._blsPublicKeyIsEqual, rhs)\n      }\n      deserialize (s) {\n        this._setter(exports.blsPublicKeyDeserialize, s)\n      }\n      serialize () {\n        return this._getter(exports.blsPublicKeySerialize)\n      }\n      deserializeUncompressed (s) {\n        this._setter(exports.blsPublicKeyDeserializeUncompressed, s)\n      }\n      serializeUncompressed () {\n        return this._getter(exports.blsPublicKeySerializeUncompressed)\n      }\n      add (rhs) {\n        this._update(mod._blsPublicKeyAdd, rhs)\n      }\n      share (msk, id) {\n        callShare(mod._blsPublicKeyShare, this, BLS_PUBLICKEY_SIZE, msk, id)\n      }\n      recover (secVec, idVec) {\n        callRecover(mod._blsPublicKeyRecover, this, BLS_PUBLICKEY_SIZE, secVec, idVec)\n      }\n      isValidOrder () {\n        return this._getter(mod._blsPublicKeyIsValidOrder)\n      }\n      verify (sig, m) {\n        const pubPos = this._allocAndCopy()\n        const sigPos = sig._allocAndCopy()\n        const r = exports.blsVerify(sigPos, pubPos, m)\n        _free(sigPos)\n        _free(pubPos)\n        return r != 0\n      }\n    }\n    exports.deserializeHexStrToPublicKey = s => {\n      const r = new exports.PublicKey()\n      r.deserializeHexStr(s)\n      return r\n    }\n\n    exports.Signature = class extends Common {\n      constructor () {\n        super(BLS_SIGNATURE_SIZE)\n      }\n      isZero () {\n        return this._getter(mod._blsSignatureIsZero) === 1\n      }\n      isEqual (rhs) {\n        return this._isEqual(mod._blsSignatureIsEqual, rhs)\n      }\n      deserialize (s) {\n        this._setter(exports.blsSignatureDeserialize, s)\n      }\n      serialize () {\n        return this._getter(exports.blsSignatureSerialize)\n      }\n      deserializeUncompressed (s) {\n        this._setter(exports.blsSignatureDeserializeUncompressed, s)\n      }\n      serializeUncompressed () {\n        return this._getter(exports.blsSignatureSerializeUncompressed)\n      }\n      add (rhs) {\n        this._update(mod._blsSignatureAdd, rhs)\n      }\n      recover (secVec, idVec) {\n        callRecover(mod._blsSignatureRecover, this, BLS_SIGNATURE_SIZE, secVec, idVec)\n      }\n      isValidOrder () {\n        return this._getter(mod._blsSignatureIsValidOrder)\n      }\n      // this = aggSig\n      aggregate (sigVec) {\n        const n = sigVec.length\n        const aggSigPos = this._allocAndCopy()\n        const sigVecPos = _malloc(BLS_SIGNATURE_SIZE * n)\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(sigVec[i].a_, (sigVecPos + BLS_SIGNATURE_SIZE * i) / 4)\n        }\n        const r = mod._blsAggregateSignature(aggSigPos, sigVecPos, n)\n        _free(sigVecPos)\n        this._saveAndFree(aggSigPos)\n        return r == 1\n      }\n      // this = aggSig\n      fastAggregateVerify (pubVec, msg) {\n        const n = pubVec.length\n        const msgSize = msg.length\n        const aggSigPos = this._allocAndCopy()\n        const pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n)\n        const msgPos = _malloc(msgSize)\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4)\n        }\n        mod.HEAP8.set(msg, msgPos)\n        const r = mod._blsFastAggregateVerify(aggSigPos, pubVecPos, n, msgPos, msgSize)\n        _free(msgPos)\n        _free(pubVecPos)\n        _free(aggSigPos)\n        return r == 1\n      }\n      // this = aggSig\n      // msgVec = (32 * pubVec.length)-size Uint8Array\n      aggregateVerifyNoCheck (pubVec, msgVec) {\n        const n = pubVec.length\n        const msgSize = 32\n        if (n == 0 || msgVec.length != msgSize * n) {\n          return false\n        }\n        const aggSigPos = this._allocAndCopy()\n        const pubVecPos = _malloc(BLS_PUBLICKEY_SIZE * n)\n        const msgPos = _malloc(msgVec.length)\n        for (let i = 0; i < n; i++) {\n          mod.HEAP32.set(pubVec[i].a_, (pubVecPos + BLS_PUBLICKEY_SIZE * i) / 4)\n        }\n        mod.HEAP8.set(msgVec, msgPos)\n        const r = mod._blsAggregateVerifyNoCheck(aggSigPos, pubVecPos, msgPos, msgSize, n)\n        _free(msgPos)\n        _free(pubVecPos)\n        _free(aggSigPos)\n        return r == 1\n      }\n    }\n    exports.deserializeHexStrToSignature = s => {\n      const r = new exports.Signature()\n      r.deserializeHexStr(s)\n      return r\n    }\n    // 1 (draft-05) 2 (draft-06) 3 (draft-07)\n    exports.setETHmode = (mode) => {\n      if (mod._blsSetETHmode(mode) != 0) throw new Error(`bad setETHmode ${mode}`)\n    }\n    // make setter check the correctness of the order if doVerify\n    exports.verifySignatureOrder = (doVerify) => {\n      mod._blsSignatureVerifyOrder(doVerify)\n    }\n    // make setter check the correctness of the order if doVerify\n    exports.verifyPublicKeyOrder = (doVerify) => {\n      mod._blsPublicKeyVerifyOrder(doVerify)\n    }\n    exports.areAllMsgDifferent = (msgs, msgSize) => {\n      const n = msgs.length / msgSize\n      if (msgs.length != n * msgSize) return false\n      h = {}\n      for (let i = 0; i < n; i++) {\n        const m = msgs.subarray(i * msgSize, (i + 1) * msgSize)\n        if (m in h) return false\n        h[m] = true\n      }\n      return true\n    }\n    /*\n      return true if all pub[i].verify(sigs[i], msgs[i])\n      msgs is array of 32-byte Uint8Array\n    */\n    exports.multiVerify = (pubs, sigs, msgs) => {\n      const MSG_SIZE = 32\n      const RAND_SIZE = 8 // 64-bit rand\n      const threadNum = 0 // not used\n      const n = sigs.length\n      if (pubs.length != n || msgs.length != n) return false\n      for (let i = 0; i < n; i++) {\n        if (msgs[i].length != MSG_SIZE) return false\n      }\n      const sigPos = _malloc(BLS_SIGNATURE_SIZE * n)\n      const pubPos = _malloc(BLS_PUBLICKEY_SIZE * n)\n      const msgPos = _malloc(MSG_SIZE * n)\n      const randPos = _malloc(RAND_SIZE * n)\n\n      exports.getRandomValues(mod.HEAP8.subarray(randPos, randPos + RAND_SIZE * n))\n      for (let i = 0; i < n; i++) {\n        mod.HEAP32.set(sigs[i].a_, (sigPos + BLS_SIGNATURE_SIZE * i) / 4)\n        mod.HEAP32.set(pubs[i].a_, (pubPos + BLS_PUBLICKEY_SIZE * i) / 4)\n        mod.HEAP8.set(msgs[i], msgPos + MSG_SIZE * i)\n      }\n      const r = mod._blsMultiVerify(sigPos, pubPos, msgPos, MSG_SIZE, randPos, RAND_SIZE, n, threadNum)\n\n      _free(randPos)\n      _free(msgPos)\n      _free(pubPos)\n      _free(sigPos)\n      return r == 1\n    }\n    exports.blsInit(curveType)\n    if (exports.ethMode) {\n      exports.setETHmode(exports.ETH_MODE_DRAFT_07)\n    }\n  } // setup()\n  const _cryptoGetRandomValues = function(p, n) {\n    const a = new Uint8Array(n)\n    exports.getRandomValues(a)\n    for (let i = 0; i < n; i++) {\n      exports.mod.HEAP8[p + i] = a[i]\n    }\n  }\n  // f(a:array) fills a with random value\n  exports.setRandFunc = f => {\n    exports.getRandomValues = f\n  }\n  exports.init = (curveType = exports.BN254) => {\n    exports.curveType = curveType\n    const name = 'bls_c'\n    return new Promise(resolve => {\n      if (isNodeJs) {\n        const crypto = require('crypto')\n        exports.getRandomValues = crypto.randomFillSync\n        const path = require('path')\n        const js = require(`./${name}.js`)\n        const Module = {\n          cryptoGetRandomValues : _cryptoGetRandomValues,\n          locateFile: baseName => { return path.join(__dirname, baseName) }\n        }\n        js(Module)\n          .then(_mod => {\n            exports.mod = _mod\n            setup(exports, curveType)\n            resolve()\n          })\n      } else {\n        const crypto = window.crypto || window.msCrypto\n        exports.getRandomValues = x => crypto.getRandomValues(x)\n        fetch(`./${name}.wasm`) // eslint-disable-line\n          .then(response => response.arrayBuffer())\n          .then(buffer => new Uint8Array(buffer))\n          .then(() => {\n            if (typeof module !== 'undefined' && module.exports) {\n              exports.mod = require('./bls_c')()\n            } else {\n              exports.mod = Module() // eslint-disable-line\n            }\n\n            exports.mod.cryptoGetRandomValues = _cryptoGetRandomValues\n            exports.mod.onRuntimeInitialized = () => {\n              setup(exports, curveType)\n              resolve()\n            }\n          })\n      }\n    })\n  }\n  return exports\n})\n"]},"metadata":{},"sourceType":"script"}