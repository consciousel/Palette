{"ast":null,"code":"var axios = require(\"axios\").default;\n\nconst data = {};\nexport const NFTPortPinJSONToIPFS = (name, description, artist, url, collection, attributes) => {\n  let _attributes = [{\n    \"trait_type\": \"Artist\",\n    \"value\": artist\n  }];\n  console.log(_attributes);\n  console.log(attributes.length);\n\n  if (attributes.length !== \"\") {\n    console.log(attributes);\n\n    _attributes.concat(attributes);\n  }\n\n  console.log(_attributes);\n  var options = {\n    method: 'POST',\n    url: 'https://api.nftport.xyz/v0/metadata',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: '2d0719e3-a0ba-461f-a382-a5558bd86ac2'\n    },\n    data: {\n      \"name\": name,\n      \"description\": description,\n      \"file_url\": url,\n      \"attributes\": _attributes\n    }\n  };\n  console.log(options.data); // return axios\n  //   .request(options).then(function (response) {\n  //     console.log(response.data);\n  //     const url = response.data.metadata_uri;\n  //     console.log(url);\n  //     return {\n  //       success: true,\n  //       nftPortUrl: response.data.metadata_uri,\n  //     };\n  //   }).catch(function (error) {\n  //   console.error(error);\n  //   return {\n  //     success: false,\n  //     message: error.message,\n  //   }\n  // });\n};\n_c = NFTPortPinJSONToIPFS;\n\nvar _c;\n\n$RefreshReg$(_c, \"NFTPortPinJSONToIPFS\");","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/NFT_minter/src/utils/nftport.js"],"names":["axios","require","default","data","NFTPortPinJSONToIPFS","name","description","artist","url","collection","attributes","_attributes","console","log","length","concat","options","method","headers","Authorization"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiBC,OAA7B;;AAEA,MAAMC,IAAI,GAAG,EAAb;AAEA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,IAAD,EAAOC,WAAP,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,UAAjC,EAA6CC,UAA7C,KAA4D;AAC9F,MAAIC,WAAW,GAAG,CAChB;AACE,kBAAa,QADf;AAEE,aAAQJ;AAFV,GADgB,CAAlB;AAOAK,EAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,UAAU,CAACI,MAAvB;;AACA,MAAGJ,UAAU,CAACI,MAAX,KAAoB,EAAvB,EAA0B;AACxBF,IAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;;AACAC,IAAAA,WAAW,CAACI,MAAZ,CAAmBL,UAAnB;AACD;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AAEA,MAAIK,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAE,MADI;AAEZT,IAAAA,GAAG,EAAE,qCAFO;AAGZU,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPC,MAAAA,aAAa,EAAE;AAFR,KAHG;AAOZhB,IAAAA,IAAI,EAAE;AACJ,cAAQE,IADJ;AAEJ,qBAAcC,WAFV;AAGJ,kBAAWE,GAHP;AAIJ,oBAAaG;AAJT;AAPM,GAAd;AAeAC,EAAAA,OAAO,CAACC,GAAR,CAAYG,OAAO,CAACb,IAApB,EA/B8F,CAiC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAED,CAlDM;KAAMC,oB","sourcesContent":["var axios = require(\"axios\").default;\r\n\r\nconst data = {};\r\n\r\nexport const NFTPortPinJSONToIPFS = (name, description, artist, url, collection, attributes) => {\r\n  let _attributes = [\r\n    {\r\n      \"trait_type\":\"Artist\",\r\n      \"value\":artist\r\n    },\r\n  ]\r\n\r\n  console.log(_attributes);\r\n  console.log(attributes.length);\r\n  if(attributes.length!==\"\"){\r\n    console.log(attributes);\r\n    _attributes.concat(attributes);\r\n  }\r\n  console.log(_attributes);\r\n\r\n  var options = {\r\n    method: 'POST',\r\n    url: 'https://api.nftport.xyz/v0/metadata',\r\n    headers: {\r\n      'Content-Type': 'application/json', \r\n      Authorization: '2d0719e3-a0ba-461f-a382-a5558bd86ac2'\r\n    },\r\n    data: {\r\n      \"name\": name,\r\n      \"description\":description,\r\n      \"file_url\":url,\r\n      \"attributes\":_attributes,\r\n    }\r\n  }\r\n  \r\n  console.log(options.data)\r\n\r\n  // return axios\r\n  //   .request(options).then(function (response) {\r\n  //     console.log(response.data);\r\n  //     const url = response.data.metadata_uri;\r\n  //     console.log(url);\r\n  //     return {\r\n  //       success: true,\r\n  //       nftPortUrl: response.data.metadata_uri,\r\n  //     };\r\n  //   }).catch(function (error) {\r\n  //   console.error(error);\r\n  //   return {\r\n  //     success: false,\r\n  //     message: error.message,\r\n  //   }\r\n  // });\r\n\r\n};\r\n"]},"metadata":{},"sourceType":"module"}