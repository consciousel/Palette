{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MuxedAccount = exports.Account = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _bignumber = require('bignumber.js');\n\nvar _bignumber2 = _interopRequireDefault(_bignumber);\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _strkey = require('./strkey');\n\nvar _decode_encode_muxed_account = require('./util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Create a new Account object.\n *\n * `Account` represents a single account in the Stellar network and its sequence\n * number. Account tracks the sequence number as it is used by {@link\n * TransactionBuilder}. See\n * [Accounts](https://developers.stellar.org/docs/glossary/accounts/) for\n * more information about how accounts work in Stellar.\n *\n * @constructor\n *\n * @param {string} accountId - ID of the account (ex.\n *     `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`). If you\n *     provide a muxed account address, this will throw; use {@link\n *     MuxedAccount} instead.\n * @param {string} sequence  - current sequence number of the account\n */\n\n\nvar Account = exports.Account = function () {\n  function Account(accountId, sequence) {\n    _classCallCheck(this, Account);\n\n    if (_strkey.StrKey.isValidMed25519PublicKey(accountId)) {\n      throw new Error('accountId is an M-address; use MuxedAccount instead');\n    }\n\n    if (!_strkey.StrKey.isValidEd25519PublicKey(accountId)) {\n      throw new Error('accountId is invalid');\n    }\n\n    if (!(0, _isString2.default)(sequence)) {\n      throw new Error('sequence must be of type string');\n    }\n\n    this._accountId = accountId;\n    this.sequence = new _bignumber2.default(sequence);\n  }\n  /**\n   * Returns Stellar account ID, ex.\n   * `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`.\n   * @returns {string}\n   */\n\n\n  _createClass(Account, [{\n    key: 'accountId',\n    value: function accountId() {\n      return this._accountId;\n    }\n    /**\n     * @returns {string}  sequence number for the account as a string\n     */\n\n  }, {\n    key: 'sequenceNumber',\n    value: function sequenceNumber() {\n      return this.sequence.toString();\n    }\n    /**\n     * Increments sequence number in this object by one.\n     * @returns {void}\n     */\n\n  }, {\n    key: 'incrementSequenceNumber',\n    value: function incrementSequenceNumber() {\n      this.sequence = this.sequence.add(1);\n    }\n    /**\n     * Creates a muxed \"sub\"account with this base address and an ID set.\n     *\n     * @param  {string} id - the ID of the new muxed account\n     * @return {MuxedAccount} a new instance w/ the specified parameters\n     *\n     * @see MuxedAccount\n     */\n\n  }, {\n    key: 'createSubaccount',\n    value: function createSubaccount(id) {\n      return new MuxedAccount(this, id);\n    }\n  }]);\n\n  return Account;\n}();\n/**\n * Represents a muxed account for transactions and operations.\n *\n * A muxed (or *multiplexed*) account (defined rigorously in\n * [CAP-27](https://stellar.org/protocol/cap-27) and briefly in\n * [SEP-23](https://stellar.org/protocol/sep-23)) is one that resolves a single\n * Stellar `G...`` account to many different underlying IDs.\n *\n * For example, you may have a single Stellar address for accounting purposes:\n *   GA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJVSGZ\n *\n * Yet would like to use it for 4 different family members:\n *   1: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAGZFQ\n *   2: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAALIWQ\n *   3: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAPYHQ\n *   4: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAQLQQ\n *\n * This object makes it easy to create muxed accounts from regular accounts,\n * duplicate them, get/set the underlying IDs, etc. without mucking around with\n * the raw XDR.\n *\n * Because muxed accounts are purely an off-chain convention, they all share the\n * sequence number tied to their underlying G... account. Thus, this object\n * *requires* an {@link Account} instance to be passed in, so that muxed\n * instances of an account can collectively modify the sequence number whenever\n * a muxed account is used as the source of a @{link Transaction} with {@link\n * TransactionBuilder}.\n *\n * @constructor\n *\n * @param {Account}   account - the @{link Account} instance representing the\n *                              underlying G... address\n * @param {string}    id      - a stringified uint64 value that represents the\n *                              ID of the muxed account\n *\n * @link https://developers.stellar.org/docs/glossary/muxed-accounts/\n */\n\n\nvar MuxedAccount = exports.MuxedAccount = function () {\n  function MuxedAccount(baseAccount, id) {\n    _classCallCheck(this, MuxedAccount);\n\n    var accountId = baseAccount.accountId();\n\n    if (!_strkey.StrKey.isValidEd25519PublicKey(accountId)) {\n      throw new Error('accountId is invalid');\n    }\n\n    this.account = baseAccount;\n    this._muxedXdr = (0, _decode_encode_muxed_account.encodeMuxedAccount)(accountId, id);\n    this._mAddress = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(this._muxedXdr, true);\n    this._id = id;\n  }\n  /**\n   * Parses an M-address into a MuxedAccount object.\n   *\n   * @param  {string} mAddress    - an M-address to transform\n   * @param  {string} sequenceNum - the sequence number of the underlying {@link\n   *     Account}, to use for the underlying base account (@link\n   *     MuxedAccount.baseAccount). If you're using the SDK, you can use\n   *     `server.loadAccount` to fetch this if you don't know it.\n   *\n   * @return {MuxedAccount}\n   */\n\n\n  _createClass(MuxedAccount, [{\n    key: 'baseAccount',\n\n    /**\n     * @return {Account} the underlying account object shared among all muxed\n     *     accounts with this Stellar address\n     */\n    value: function baseAccount() {\n      return this.account;\n    }\n    /**\n     * @return {string} the M-address representing this account's (G-address, ID)\n     */\n\n  }, {\n    key: 'accountId',\n    value: function accountId() {\n      return this._mAddress;\n    }\n  }, {\n    key: 'id',\n    value: function id() {\n      return this._id;\n    }\n  }, {\n    key: 'setId',\n    value: function setId(id) {\n      if (!(0, _isString2.default)(id)) {\n        throw new Error('id should be a string representing a number (uint64)');\n      }\n\n      this._muxedXdr.med25519().id(_stellarXdr_generated2.default.Uint64.fromString(id));\n\n      this._mAddress = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(this._muxedXdr, true);\n      this._id = id;\n      return this;\n    }\n    /**\n     * Accesses the underlying account's sequence number.\n     * @return {string}  strigified sequence number for the underlying account\n     */\n\n  }, {\n    key: 'sequenceNumber',\n    value: function sequenceNumber() {\n      return this.account.sequenceNumber();\n    }\n    /**\n     * Increments the underlying account's sequence number by one.\n     * @return {void}\n     */\n\n  }, {\n    key: 'incrementSequenceNumber',\n    value: function incrementSequenceNumber() {\n      return this.account.incrementSequenceNumber();\n    }\n    /**\n     * Creates another muxed \"sub\"account from the base with a new ID set\n     *\n     * @param  {string} id - the ID of the new muxed account\n     * @return {MuxedAccount} a new instance w/ the specified parameters\n     */\n\n  }, {\n    key: 'createSubaccount',\n    value: function createSubaccount(id) {\n      return new MuxedAccount(this.account, id);\n    }\n    /**\n     * @return {xdr.MuxedAccount} the XDR object representing this muxed account's\n     *     G-address and uint64 ID\n     */\n\n  }, {\n    key: 'toXDRObject',\n    value: function toXDRObject() {\n      return this._muxedXdr;\n    }\n  }, {\n    key: 'equals',\n    value: function equals(otherMuxedAccount) {\n      return this.accountId() === otherMuxedAccount.accountId();\n    }\n  }], [{\n    key: 'fromAddress',\n    value: function fromAddress(mAddress, sequenceNum) {\n      var muxedAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(mAddress, true);\n      var gAddress = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(muxedAccount, false);\n      var id = muxedAccount.med25519().id().toString();\n      return new MuxedAccount(new Account(gAddress, sequenceNum), id);\n    }\n  }]);\n\n  return MuxedAccount;\n}();","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/NFT_minter/node_modules/stellar-base/lib/account.js"],"names":["Object","defineProperty","exports","value","MuxedAccount","Account","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_isString","require","_isString2","_interopRequireDefault","_bignumber","_bignumber2","_stellarXdr_generated","_stellarXdr_generated2","_strkey","_decode_encode_muxed_account","obj","__esModule","default","_classCallCheck","instance","TypeError","accountId","sequence","StrKey","isValidMed25519PublicKey","Error","isValidEd25519PublicKey","_accountId","sequenceNumber","toString","incrementSequenceNumber","add","createSubaccount","id","baseAccount","account","_muxedXdr","encodeMuxedAccount","_mAddress","encodeMuxedAccountToAddress","_id","setId","med25519","Uint64","fromString","toXDRObject","equals","otherMuxedAccount","fromAddress","mAddress","sequenceNum","muxedAccount","decodeAddressToMuxedAccount","gAddress"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MuxedAccount = exports.Account = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _bignumber = require('bignumber.js');\n\nvar _bignumber2 = _interopRequireDefault(_bignumber);\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _strkey = require('./strkey');\n\nvar _decode_encode_muxed_account = require('./util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Create a new Account object.\n *\n * `Account` represents a single account in the Stellar network and its sequence\n * number. Account tracks the sequence number as it is used by {@link\n * TransactionBuilder}. See\n * [Accounts](https://developers.stellar.org/docs/glossary/accounts/) for\n * more information about how accounts work in Stellar.\n *\n * @constructor\n *\n * @param {string} accountId - ID of the account (ex.\n *     `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`). If you\n *     provide a muxed account address, this will throw; use {@link\n *     MuxedAccount} instead.\n * @param {string} sequence  - current sequence number of the account\n */\nvar Account = exports.Account = function () {\n  function Account(accountId, sequence) {\n    _classCallCheck(this, Account);\n\n    if (_strkey.StrKey.isValidMed25519PublicKey(accountId)) {\n      throw new Error('accountId is an M-address; use MuxedAccount instead');\n    }\n\n    if (!_strkey.StrKey.isValidEd25519PublicKey(accountId)) {\n      throw new Error('accountId is invalid');\n    }\n    if (!(0, _isString2.default)(sequence)) {\n      throw new Error('sequence must be of type string');\n    }\n\n    this._accountId = accountId;\n    this.sequence = new _bignumber2.default(sequence);\n  }\n\n  /**\n   * Returns Stellar account ID, ex.\n   * `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`.\n   * @returns {string}\n   */\n\n\n  _createClass(Account, [{\n    key: 'accountId',\n    value: function accountId() {\n      return this._accountId;\n    }\n\n    /**\n     * @returns {string}  sequence number for the account as a string\n     */\n\n  }, {\n    key: 'sequenceNumber',\n    value: function sequenceNumber() {\n      return this.sequence.toString();\n    }\n\n    /**\n     * Increments sequence number in this object by one.\n     * @returns {void}\n     */\n\n  }, {\n    key: 'incrementSequenceNumber',\n    value: function incrementSequenceNumber() {\n      this.sequence = this.sequence.add(1);\n    }\n\n    /**\n     * Creates a muxed \"sub\"account with this base address and an ID set.\n     *\n     * @param  {string} id - the ID of the new muxed account\n     * @return {MuxedAccount} a new instance w/ the specified parameters\n     *\n     * @see MuxedAccount\n     */\n\n  }, {\n    key: 'createSubaccount',\n    value: function createSubaccount(id) {\n      return new MuxedAccount(this, id);\n    }\n  }]);\n\n  return Account;\n}();\n\n/**\n * Represents a muxed account for transactions and operations.\n *\n * A muxed (or *multiplexed*) account (defined rigorously in\n * [CAP-27](https://stellar.org/protocol/cap-27) and briefly in\n * [SEP-23](https://stellar.org/protocol/sep-23)) is one that resolves a single\n * Stellar `G...`` account to many different underlying IDs.\n *\n * For example, you may have a single Stellar address for accounting purposes:\n *   GA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJVSGZ\n *\n * Yet would like to use it for 4 different family members:\n *   1: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAGZFQ\n *   2: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAALIWQ\n *   3: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAPYHQ\n *   4: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAQLQQ\n *\n * This object makes it easy to create muxed accounts from regular accounts,\n * duplicate them, get/set the underlying IDs, etc. without mucking around with\n * the raw XDR.\n *\n * Because muxed accounts are purely an off-chain convention, they all share the\n * sequence number tied to their underlying G... account. Thus, this object\n * *requires* an {@link Account} instance to be passed in, so that muxed\n * instances of an account can collectively modify the sequence number whenever\n * a muxed account is used as the source of a @{link Transaction} with {@link\n * TransactionBuilder}.\n *\n * @constructor\n *\n * @param {Account}   account - the @{link Account} instance representing the\n *                              underlying G... address\n * @param {string}    id      - a stringified uint64 value that represents the\n *                              ID of the muxed account\n *\n * @link https://developers.stellar.org/docs/glossary/muxed-accounts/\n */\n\n\nvar MuxedAccount = exports.MuxedAccount = function () {\n  function MuxedAccount(baseAccount, id) {\n    _classCallCheck(this, MuxedAccount);\n\n    var accountId = baseAccount.accountId();\n    if (!_strkey.StrKey.isValidEd25519PublicKey(accountId)) {\n      throw new Error('accountId is invalid');\n    }\n\n    this.account = baseAccount;\n    this._muxedXdr = (0, _decode_encode_muxed_account.encodeMuxedAccount)(accountId, id);\n    this._mAddress = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(this._muxedXdr, true);\n    this._id = id;\n  }\n\n  /**\n   * Parses an M-address into a MuxedAccount object.\n   *\n   * @param  {string} mAddress    - an M-address to transform\n   * @param  {string} sequenceNum - the sequence number of the underlying {@link\n   *     Account}, to use for the underlying base account (@link\n   *     MuxedAccount.baseAccount). If you're using the SDK, you can use\n   *     `server.loadAccount` to fetch this if you don't know it.\n   *\n   * @return {MuxedAccount}\n   */\n\n\n  _createClass(MuxedAccount, [{\n    key: 'baseAccount',\n\n\n    /**\n     * @return {Account} the underlying account object shared among all muxed\n     *     accounts with this Stellar address\n     */\n    value: function baseAccount() {\n      return this.account;\n    }\n\n    /**\n     * @return {string} the M-address representing this account's (G-address, ID)\n     */\n\n  }, {\n    key: 'accountId',\n    value: function accountId() {\n      return this._mAddress;\n    }\n  }, {\n    key: 'id',\n    value: function id() {\n      return this._id;\n    }\n  }, {\n    key: 'setId',\n    value: function setId(id) {\n      if (!(0, _isString2.default)(id)) {\n        throw new Error('id should be a string representing a number (uint64)');\n      }\n\n      this._muxedXdr.med25519().id(_stellarXdr_generated2.default.Uint64.fromString(id));\n      this._mAddress = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(this._muxedXdr, true);\n      this._id = id;\n      return this;\n    }\n\n    /**\n     * Accesses the underlying account's sequence number.\n     * @return {string}  strigified sequence number for the underlying account\n     */\n\n  }, {\n    key: 'sequenceNumber',\n    value: function sequenceNumber() {\n      return this.account.sequenceNumber();\n    }\n\n    /**\n     * Increments the underlying account's sequence number by one.\n     * @return {void}\n     */\n\n  }, {\n    key: 'incrementSequenceNumber',\n    value: function incrementSequenceNumber() {\n      return this.account.incrementSequenceNumber();\n    }\n\n    /**\n     * Creates another muxed \"sub\"account from the base with a new ID set\n     *\n     * @param  {string} id - the ID of the new muxed account\n     * @return {MuxedAccount} a new instance w/ the specified parameters\n     */\n\n  }, {\n    key: 'createSubaccount',\n    value: function createSubaccount(id) {\n      return new MuxedAccount(this.account, id);\n    }\n\n    /**\n     * @return {xdr.MuxedAccount} the XDR object representing this muxed account's\n     *     G-address and uint64 ID\n     */\n\n  }, {\n    key: 'toXDRObject',\n    value: function toXDRObject() {\n      return this._muxedXdr;\n    }\n  }, {\n    key: 'equals',\n    value: function equals(otherMuxedAccount) {\n      return this.accountId() === otherMuxedAccount.accountId();\n    }\n  }], [{\n    key: 'fromAddress',\n    value: function fromAddress(mAddress, sequenceNum) {\n      var muxedAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(mAddress, true);\n      var gAddress = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(muxedAccount, false);\n      var id = muxedAccount.med25519().id().toString();\n\n      return new MuxedAccount(new Account(gAddress, sequenceNum), id);\n    }\n  }]);\n\n  return MuxedAccount;\n}();"]},"metadata":{},"sourceType":"script"}