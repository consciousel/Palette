{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mint721BuiltInPrivateKeyValidator = void 0;\n\nconst class_validator_1 = require(\"class-validator\");\n\nconst request_1 = require(\"../request\");\n\nconst SignatureIdValidator_1 = require(\"./SignatureIdValidator\");\n\nlet Mint721BuiltInPrivateKeyValidator = class Mint721BuiltInPrivateKeyValidator {\n  constructor() {\n    this.message = null;\n  }\n\n  defaultMessage(validationArguments) {\n    if (this.message) {\n      return this.message;\n    }\n\n    return 'If you fill signatureId or privateKey/secret/fromPrivateKey, then tokenId, contractAddress must be present.';\n  }\n\n  validate(value, validationArguments) {\n    const data = validationArguments === null || validationArguments === void 0 ? void 0 : validationArguments.object;\n    const chains = [request_1.Currency.BSC, request_1.Currency.ETH, request_1.Currency.CELO, request_1.Currency.ONE, request_1.Currency.MATIC, request_1.Currency.KLAY];\n    const isAllowedChain = chains.includes(data.chain);\n\n    if (data.minter) {\n      if (data.fromPrivateKey || data.signatureId) {\n        this.message = `If minter is present, no private key or signatureId must be entered. Minter is available only on these chains - ${chains}`;\n        return false;\n      }\n\n      if (!this.validateRequiredFields(data)) {\n        return false;\n      }\n    }\n\n    if (!data.fromPrivateKey && !data.signatureId) {\n      if (isAllowedChain) {\n        return true;\n      } else {\n        if (!this.validateNonBuiltInPrivateKey(data, validationArguments)) {\n          return false;\n        }\n      }\n    } else {\n      if (!this.validateNonBuiltInPrivateKey(data, validationArguments)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  validateNonBuiltInPrivateKey(data, validationArguments) {\n    if (!this.validateRequiredFields(data)) {\n      return false;\n    }\n\n    if (!data.fromPrivateKey && !data.signatureId) {\n      this.message = 'Field fromPrivateKey or signatureId must be filled.';\n      return false;\n    }\n\n    const signatureIdValidation = new SignatureIdValidator_1.SignatureIdValidator();\n    return signatureIdValidation.validate(data, validationArguments);\n  }\n\n  validateRequiredFields(data) {\n    if (data.chain === request_1.Currency.CELO && (!data.feeCurrency || ![request_1.Currency.CELO, request_1.Currency.CUSD, request_1.Currency.CEUR].includes(data.feeCurrency))) {\n      this.message = 'CELO chain must have assigned feeCurrency field.';\n      return false;\n    }\n\n    if (!data.tokenId) {\n      this.message = 'Field tokenId must be present.';\n      return false;\n    }\n\n    if (!data.contractAddress) {\n      this.message = 'Field contractAddress must be present.';\n      return false;\n    }\n\n    return true;\n  }\n\n};\nMint721BuiltInPrivateKeyValidator = __decorate([class_validator_1.ValidatorConstraint({\n  name: 'builtInPrivateKey',\n  async: false\n})], Mint721BuiltInPrivateKeyValidator);\nexports.Mint721BuiltInPrivateKeyValidator = Mint721BuiltInPrivateKeyValidator;","map":{"version":3,"mappings":"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","names":["Mint721BuiltInPrivateKeyValidator","constructor","defaultMessage","validationArguments","message","validate","value","data","object","chains","request_1","BSC","ETH","CELO","ONE","MATIC","KLAY","isAllowedChain","includes","chain","minter","fromPrivateKey","signatureId","validateRequiredFields","validateNonBuiltInPrivateKey","signatureIdValidation","SignatureIdValidator_1","feeCurrency","CUSD","CEUR","tokenId","contractAddress","class_validator_1","name","async","exports"],"sourceRoot":"","sources":["../../../../src/model/validation/Mint721BuiltInPrivateKeyValidator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}