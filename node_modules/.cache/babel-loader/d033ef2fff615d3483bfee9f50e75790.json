{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator, __read, __spreadArray, __values } from \"tslib\";\nimport EventEmitter from \"eventemitter3\";\nimport { dedupeLogs, dedupeNewHeads, makeBackfiller } from \"../subscriptions/subscriptionBackfill\";\nimport { isSubscriptionEvent } from \"../types\";\nimport { fromHex } from \"../util/hex\";\nimport { makeResponse } from \"../util/jsonRpc\";\nimport { callWhenDone, makeCancelToken, throwIfCancelled, withBackoffRetries, withTimeout } from \"../util/promises\";\nvar HEARTBEAT_INTERVAL = 30000;\nvar HEARTBEAT_WAIT_TIME = 10000;\nvar BACKFILL_TIMEOUT = 60000;\nvar BACKFILL_RETRIES = 5;\n/**\n * Subscriptions have a memory of recent events they have sent so that in the\n * event that they disconnect and need to backfill, they can detect re-orgs.\n * Keep a buffer that goes back at least these many blocks, the maximum amount\n * at which we might conceivably see a re-org.\n *\n * Note that while our buffer goes back this many blocks, it may contain more\n * than this many elements, since in the case of logs subscriptions more than\n * one event may be emitted for a block.\n */\n\nvar RETAINED_EVENT_BLOCK_COUNT = 10;\n\nvar AlchemyWebSocketProvider =\n/** @class */\nfunction (_super) {\n  __extends(AlchemyWebSocketProvider, _super);\n\n  function AlchemyWebSocketProvider(ws, sendJsonRpcPayload, jsonRpcSenders) {\n    var _this = _super.call(this) || this;\n\n    _this.ws = ws;\n    _this.sendJsonRpcPayload = sendJsonRpcPayload;\n    _this.jsonRpcSenders = jsonRpcSenders; // In the case of a WebSocket reconnection, all subscriptions are lost and we\n    // create new ones to replace them, but we want to create the illusion that\n    // the original subscriptions persist. Thus, maintain a mapping from the\n    // \"virtual\" subscription ids which are visible to the consumer to the\n    // \"physical\" subscription ids of the actual connections. This terminology is\n    // borrowed from virtual and physical memory, which has a similar mapping.\n\n    _this.virtualSubscriptionsById = new Map();\n    _this.virtualIdsByPhysicalId = new Map();\n    _this.cancelBackfill = noop;\n\n    _this.startHeartbeat = function () {\n      if (_this.heartbeatIntervalId != null) {\n        return;\n      }\n\n      _this.heartbeatIntervalId = setInterval(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var _a;\n\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                _b.trys.push([0, 2,, 3]);\n\n                return [4\n                /*yield*/\n                , withTimeout(this.jsonRpcSenders.send(\"net_version\"), HEARTBEAT_WAIT_TIME)];\n\n              case 1:\n                _b.sent();\n\n                return [3\n                /*break*/\n                , 3];\n\n              case 2:\n                _a = _b.sent();\n                this.ws.reconnect();\n                return [3\n                /*break*/\n                , 3];\n\n              case 3:\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      }, HEARTBEAT_INTERVAL);\n    };\n\n    _this.stopHeartbeatAndBackfill = function () {\n      if (_this.heartbeatIntervalId != null) {\n        clearInterval(_this.heartbeatIntervalId);\n        _this.heartbeatIntervalId = undefined;\n      }\n\n      _this.cancelBackfill();\n    };\n\n    _this.handleMessage = function (event) {\n      var message = JSON.parse(event.data);\n\n      if (!isSubscriptionEvent(message)) {\n        return;\n      }\n\n      var physicalId = message.params.subscription;\n\n      var virtualId = _this.virtualIdsByPhysicalId.get(physicalId);\n\n      if (!virtualId) {\n        return;\n      }\n\n      var subscription = _this.virtualSubscriptionsById.get(virtualId);\n\n      if (subscription.method !== \"eth_subscribe\") {\n        _this.emitGenericEvent(virtualId, message.params.result);\n\n        return;\n      }\n\n      switch (subscription.params[0]) {\n        case \"newHeads\":\n          {\n            var newHeadsSubscription = subscription;\n            var newHeadsMessage = message;\n            var isBackfilling = newHeadsSubscription.isBackfilling,\n                backfillBuffer = newHeadsSubscription.backfillBuffer;\n            var result = newHeadsMessage.params.result;\n\n            if (isBackfilling) {\n              addToNewHeadsEventsBuffer(backfillBuffer, result);\n            } else {\n              _this.emitNewHeadsEvent(virtualId, result);\n            }\n\n            break;\n          }\n\n        case \"logs\":\n          {\n            var logsSubscription = subscription;\n            var logsMessage = message;\n            var isBackfilling = logsSubscription.isBackfilling,\n                backfillBuffer = logsSubscription.backfillBuffer;\n            var result = logsMessage.params.result;\n\n            if (isBackfilling) {\n              addToLogsEventsBuffer(backfillBuffer, result);\n            } else {\n              _this.emitLogsEvent(virtualId, result);\n            }\n\n            break;\n          }\n\n        default:\n          _this.emitGenericEvent(virtualId, message.params.result);\n\n      }\n    };\n\n    _this.handleReopen = function () {\n      var e_1, _a;\n\n      _this.virtualIdsByPhysicalId.clear();\n\n      var _b = makeCancelToken(),\n          cancel = _b.cancel,\n          isCancelled = _b.isCancelled;\n\n      _this.cancelBackfill = cancel;\n\n      var _loop_1 = function (subscription) {\n        (function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var error_1;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  _a.trys.push([0, 2,, 3]);\n\n                  return [4\n                  /*yield*/\n                  , this.resubscribeAndBackfill(isCancelled, subscription)];\n\n                case 1:\n                  _a.sent();\n\n                  return [3\n                  /*break*/\n                  , 3];\n\n                case 2:\n                  error_1 = _a.sent();\n\n                  if (!isCancelled()) {\n                    console.error(\"Error while backfilling \\\"\" + subscription.params[0] + \"\\\" subscription. Some events may be missing.\", error_1);\n                  }\n\n                  return [3\n                  /*break*/\n                  , 3];\n\n                case 3:\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        })();\n      };\n\n      try {\n        for (var _c = __values(_this.virtualSubscriptionsById.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var subscription = _d.value;\n\n          _loop_1(subscription);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      _this.startHeartbeat();\n    };\n\n    _this.backfiller = makeBackfiller(jsonRpcSenders);\n\n    _this.addSocketListeners();\n\n    _this.startHeartbeat();\n\n    return _this;\n  }\n\n  AlchemyWebSocketProvider.prototype.send = function (request, callback) {\n    if (isSubscribeRequest(request)) {\n      var id = request.id;\n\n      if (id === undefined) {\n        // The JSON-RPC spec says to return nothing if there is no request id.\n        return;\n      }\n\n      callWhenDone(this.subscribe(request), callback);\n      return;\n    }\n\n    if (isUnsubscribeRequest(request)) {\n      callWhenDone(this.unsubscribe(request), callback);\n      return;\n    }\n\n    callWhenDone(this.sendJsonRpcPayload(request), callback);\n  };\n\n  AlchemyWebSocketProvider.prototype.supportsSubscriptions = function () {\n    return true;\n  };\n\n  AlchemyWebSocketProvider.prototype.disconnect = function (code, reason) {\n    this.removeSocketListeners();\n    this.removeAllListeners();\n    this.stopHeartbeatAndBackfill();\n    this.ws.close(code, reason);\n  };\n\n  AlchemyWebSocketProvider.prototype.connect = function () {// No-op. We're already connected when passed a websocket in the\n    // constructor.\n  };\n\n  AlchemyWebSocketProvider.prototype.reset = function () {// No-op.\n  };\n\n  AlchemyWebSocketProvider.prototype.reconnect = function () {// No-op. This isn't called anywhere.\n  };\n\n  AlchemyWebSocketProvider.prototype.subscribe = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var method, _a, params, startingBlockNumber, response, id;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            method = request.method, _a = request.params, params = _a === void 0 ? [] : _a;\n            return [4\n            /*yield*/\n            , this.getBlockNumber()];\n\n          case 1:\n            startingBlockNumber = _b.sent();\n            return [4\n            /*yield*/\n            , this.sendJsonRpcPayload(request)];\n\n          case 2:\n            response = _b.sent();\n            id = response.result;\n            this.virtualSubscriptionsById.set(id, {\n              method: method,\n              params: params,\n              startingBlockNumber: startingBlockNumber,\n              virtualId: id,\n              physicalId: id,\n              sentEvents: [],\n              isBackfilling: false,\n              backfillBuffer: []\n            });\n            this.virtualIdsByPhysicalId.set(id, id);\n            return [2\n            /*return*/\n            , makeResponse(request.id, id)];\n        }\n      });\n    });\n  };\n\n  AlchemyWebSocketProvider.prototype.unsubscribe = function (request) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var subscriptionId, virtualSubscription, physicalId, physicalRequest;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            subscriptionId = (_a = request.params) === null || _a === void 0 ? void 0 : _a[0];\n            virtualSubscription = this.virtualSubscriptionsById.get(subscriptionId);\n\n            if (!virtualSubscription) {\n              return [2\n              /*return*/\n              , makeResponse(request.id, false)];\n            }\n\n            physicalId = virtualSubscription.physicalId;\n            physicalRequest = __assign(__assign({}, request), {\n              params: [physicalId]\n            });\n            return [4\n            /*yield*/\n            , this.sendJsonRpcPayload(physicalRequest)];\n\n          case 1:\n            _b.sent();\n\n            this.virtualSubscriptionsById.delete(subscriptionId);\n            this.virtualIdsByPhysicalId.delete(physicalId);\n            return [2\n            /*return*/\n            , makeResponse(request.id, true)];\n        }\n      });\n    });\n  };\n\n  AlchemyWebSocketProvider.prototype.addSocketListeners = function () {\n    this.ws.addEventListener(\"message\", this.handleMessage);\n    this.ws.addEventListener(\"reopen\", this.handleReopen);\n    this.ws.addEventListener(\"down\", this.stopHeartbeatAndBackfill);\n  };\n\n  AlchemyWebSocketProvider.prototype.removeSocketListeners = function () {\n    this.ws.removeEventListener(\"message\", this.handleMessage);\n    this.ws.removeEventListener(\"reopen\", this.handleReopen);\n    this.ws.removeEventListener(\"down\", this.stopHeartbeatAndBackfill);\n  };\n\n  AlchemyWebSocketProvider.prototype.resubscribeAndBackfill = function (isCancelled, subscription) {\n    return __awaiter(this, void 0, void 0, function () {\n      var virtualId, method, params, sentEvents, backfillBuffer, startingBlockNumber, physicalId, _a, backfillEvents, events, filter_1, backfillEvents, events;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            virtualId = subscription.virtualId, method = subscription.method, params = subscription.params, sentEvents = subscription.sentEvents, backfillBuffer = subscription.backfillBuffer, startingBlockNumber = subscription.startingBlockNumber;\n            subscription.isBackfilling = true;\n            backfillBuffer.length = 0;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1,, 9, 10]);\n\n            return [4\n            /*yield*/\n            , this.jsonRpcSenders.send(method, params)];\n\n          case 2:\n            physicalId = _b.sent();\n            throwIfCancelled(isCancelled);\n            subscription.physicalId = physicalId;\n            this.virtualIdsByPhysicalId.set(physicalId, virtualId);\n            _a = params[0];\n\n            switch (_a) {\n              case \"newHeads\":\n                return [3\n                /*break*/\n                , 3];\n\n              case \"logs\":\n                return [3\n                /*break*/\n                , 5];\n            }\n\n            return [3\n            /*break*/\n            , 7];\n\n          case 3:\n            return [4\n            /*yield*/\n            , withBackoffRetries(function () {\n              return withTimeout(_this.backfiller.getNewHeadsBackfill(isCancelled, sentEvents, startingBlockNumber), BACKFILL_TIMEOUT);\n            }, BACKFILL_RETRIES, function () {\n              return !isCancelled();\n            })];\n\n          case 4:\n            backfillEvents = _b.sent();\n            throwIfCancelled(isCancelled);\n            events = dedupeNewHeads(__spreadArray(__spreadArray([], __read(backfillEvents)), __read(backfillBuffer)));\n            events.forEach(function (event) {\n              return _this.emitNewHeadsEvent(virtualId, event);\n            });\n            return [3\n            /*break*/\n            , 8];\n\n          case 5:\n            filter_1 = params[1] || {};\n            return [4\n            /*yield*/\n            , withBackoffRetries(function () {\n              return withTimeout(_this.backfiller.getLogsBackfill(isCancelled, filter_1, sentEvents, startingBlockNumber), BACKFILL_TIMEOUT);\n            }, BACKFILL_RETRIES, function () {\n              return !isCancelled();\n            })];\n\n          case 6:\n            backfillEvents = _b.sent();\n            throwIfCancelled(isCancelled);\n            events = dedupeLogs(__spreadArray(__spreadArray([], __read(backfillEvents)), __read(backfillBuffer)));\n            events.forEach(function (event) {\n              return _this.emitLogsEvent(virtualId, event);\n            });\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            return [3\n            /*break*/\n            , 8];\n\n          case 8:\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            subscription.isBackfilling = false;\n            backfillBuffer.length = 0;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 10:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AlchemyWebSocketProvider.prototype.getBlockNumber = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockNumberHex;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.jsonRpcSenders.send(\"eth_blockNumber\")];\n\n          case 1:\n            blockNumberHex = _a.sent();\n            return [2\n            /*return*/\n            , fromHex(blockNumberHex)];\n        }\n      });\n    });\n  };\n\n  AlchemyWebSocketProvider.prototype.emitNewHeadsEvent = function (virtualId, result) {\n    this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n  };\n\n  AlchemyWebSocketProvider.prototype.emitLogsEvent = function (virtualId, result) {\n    this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n  };\n  /**\n   * Emits an event to consumers, but also remembers it in its subscriptions's\n   * `sentEvents` buffer so that we can detect re-orgs if the connection drops\n   * and needs to be reconnected.\n   */\n\n\n  AlchemyWebSocketProvider.prototype.emitAndRememberEvent = function (virtualId, result, getBlockNumber) {\n    var subscription = this.virtualSubscriptionsById.get(virtualId);\n\n    if (!subscription) {\n      return;\n    } // Web3 modifies these event objects once we pass them on (changing hex\n    // numbers to numbers). We want the original event, so make a defensive\n    // copy.\n\n\n    addToPastEventsBuffer(subscription.sentEvents, __assign({}, result), getBlockNumber);\n    this.emitGenericEvent(virtualId, result);\n  };\n\n  AlchemyWebSocketProvider.prototype.emitGenericEvent = function (virtualId, result) {\n    var event = {\n      jsonrpc: \"2.0\",\n      method: \"eth_subscription\",\n      params: {\n        subscription: virtualId,\n        result: result\n      }\n    };\n    this.emit(\"data\", event);\n  };\n\n  return AlchemyWebSocketProvider;\n}(EventEmitter);\n\nexport { AlchemyWebSocketProvider };\n\nfunction addToNewHeadsEventsBuffer(pastEvents, event) {\n  addToPastEventsBuffer(pastEvents, event, getNewHeadsBlockNumber);\n}\n\nfunction addToLogsEventsBuffer(pastEvents, event) {\n  addToPastEventsBuffer(pastEvents, event, getLogsBlockNumber);\n}\n/**\n * Adds a new event to an array of events, evicting any events which\n * are so old that they will no longer feasibly be part of a reorg.\n */\n\n\nfunction addToPastEventsBuffer(pastEvents, event, getBlockNumber) {\n  var currentBlockNumber = getBlockNumber(event); // Find first index of an event recent enough to retain, then drop everything\n  // at a lower index.\n\n  var firstGoodIndex = pastEvents.findIndex(function (e) {\n    return getBlockNumber(e) > currentBlockNumber - RETAINED_EVENT_BLOCK_COUNT;\n  });\n\n  if (firstGoodIndex === -1) {\n    pastEvents.length = 0;\n  } else {\n    pastEvents.splice(0, firstGoodIndex);\n  }\n\n  pastEvents.push(event);\n}\n\nfunction isSubscribeRequest(request) {\n  return !Array.isArray(request) && request.method === \"eth_subscribe\";\n}\n\nfunction isUnsubscribeRequest(request) {\n  return !Array.isArray(request) && request.method === \"eth_unsubscribe\";\n}\n\nfunction getNewHeadsBlockNumber(event) {\n  return fromHex(event.number);\n}\n\nfunction getLogsBlockNumber(event) {\n  return fromHex(event.blockNumber);\n}\n\nfunction noop() {// Nothing.\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","dedupeLogs","dedupeNewHeads","makeBackfiller","isSubscriptionEvent","fromHex","makeResponse","callWhenDone","makeCancelToken","throwIfCancelled","withBackoffRetries","withTimeout","HEARTBEAT_INTERVAL","HEARTBEAT_WAIT_TIME","BACKFILL_TIMEOUT","BACKFILL_RETRIES","RETAINED_EVENT_BLOCK_COUNT","__extends","ws","sendJsonRpcPayload","jsonRpcSenders","_super","_this","Map","noop","heartbeatIntervalId","setInterval","send","_b","reconnect","clearInterval","undefined","cancelBackfill","event","message","JSON","parse","data","physicalId","params","subscription","virtualId","virtualIdsByPhysicalId","get","virtualSubscriptionsById","method","emitGenericEvent","result","newHeadsSubscription","newHeadsMessage","backfillBuffer","isBackfilling","addToNewHeadsEventsBuffer","emitNewHeadsEvent","logsSubscription","logsMessage","addToLogsEventsBuffer","emitLogsEvent","clear","cancel","isCancelled","resubscribeAndBackfill","_a","console","error","error_1","values","_d","startHeartbeat","backfiller","addSocketListeners","AlchemyWebSocketProvider","request","callback","isSubscribeRequest","id","subscribe","isUnsubscribeRequest","unsubscribe","code","reason","removeSocketListeners","removeAllListeners","stopHeartbeatAndBackfill","close","getBlockNumber","startingBlockNumber","response","set","sentEvents","subscriptionId","virtualSubscription","physicalRequest","delete","addEventListener","handleMessage","handleReopen","removeEventListener","length","getNewHeadsBackfill","backfillEvents","events","__read","forEach","filter_1","getLogsBackfill","blockNumberHex","emitAndRememberEvent","getNewHeadsBlockNumber","getLogsBlockNumber","addToPastEventsBuffer","__assign","jsonrpc","emit","pastEvents","currentBlockNumber","firstGoodIndex","findIndex","e","splice","push","Array","isArray","number","blockNumber"],"sourceRoot":"","sources":["../../../src/web3-adapter/webSocketProvider.ts"],"sourcesContent":["import EventEmitter from \"eventemitter3\";\nimport SturdyWebSocket from \"sturdy-websocket\";\nimport {\n  Backfiller,\n  dedupeLogs,\n  dedupeNewHeads,\n  LogsEvent,\n  LogsSubscriptionFilter,\n  makeBackfiller,\n  NewHeadsEvent,\n} from \"../subscriptions/subscriptionBackfill\";\nimport {\n  isSubscriptionEvent,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  SingleOrBatchRequest,\n  SingleOrBatchResponse,\n  SubscriptionEvent,\n  WebSocketMessage,\n} from \"../types\";\nimport { fromHex } from \"../util/hex\";\nimport { JsonRpcSenders, makeResponse } from \"../util/jsonRpc\";\nimport {\n  callWhenDone,\n  makeCancelToken,\n  throwIfCancelled,\n  withBackoffRetries,\n  withTimeout,\n} from \"../util/promises\";\nimport { SendJsonRpcPayloadFunction } from \"./sendJsonRpcPayload\";\n\nconst HEARTBEAT_INTERVAL = 30000;\nconst HEARTBEAT_WAIT_TIME = 10000;\nconst BACKFILL_TIMEOUT = 60000;\nconst BACKFILL_RETRIES = 5;\n/**\n * Subscriptions have a memory of recent events they have sent so that in the\n * event that they disconnect and need to backfill, they can detect re-orgs.\n * Keep a buffer that goes back at least these many blocks, the maximum amount\n * at which we might conceivably see a re-org.\n *\n * Note that while our buffer goes back this many blocks, it may contain more\n * than this many elements, since in the case of logs subscriptions more than\n * one event may be emitted for a block.\n */\nconst RETAINED_EVENT_BLOCK_COUNT = 10;\n\n/**\n * This is the undocumented interface required by Web3 for providers which\n * handle subscriptions.\n *\n * In addition to the stated methods here, it communicates subscription events\n * by using `EventEmitter#emit(\"data\", event)` to emit the events.\n */\nexport interface Web3SubscriptionProvider extends EventEmitter {\n  send(\n    payload: SingleOrBatchRequest,\n    callback: (error: any, response?: SingleOrBatchResponse) => void,\n  ): void;\n  disconnect(code?: number, reason?: string): void;\n  supportsSubscriptions(): true;\n  connect(): void;\n  reset(): void;\n  reconnect(): void;\n}\n\ninterface VirtualSubscription {\n  virtualId: string;\n  physicalId: string;\n  method: string;\n  params: any[];\n  isBackfilling: boolean;\n  startingBlockNumber: number;\n  sentEvents: any[];\n  backfillBuffer: any[];\n}\n\ninterface NewHeadsSubscription extends VirtualSubscription {\n  method: \"eth_subscribe\";\n  params: [\"newHeads\"];\n  isBackfilling: boolean;\n  sentEvents: NewHeadsEvent[];\n  backfillBuffer: NewHeadsEvent[];\n}\n\ninterface LogsSubscription extends VirtualSubscription {\n  method: \"eth_subscribe\";\n  params: [\"logs\", LogsSubscriptionFilter?];\n  isBackfilling: boolean;\n  sentEvents: LogsEvent[];\n  backfillBuffer: LogsEvent[];\n}\n\nexport class AlchemyWebSocketProvider\n  extends EventEmitter\n  implements Web3SubscriptionProvider\n{\n  // In the case of a WebSocket reconnection, all subscriptions are lost and we\n  // create new ones to replace them, but we want to create the illusion that\n  // the original subscriptions persist. Thus, maintain a mapping from the\n  // \"virtual\" subscription ids which are visible to the consumer to the\n  // \"physical\" subscription ids of the actual connections. This terminology is\n  // borrowed from virtual and physical memory, which has a similar mapping.\n  private readonly virtualSubscriptionsById: Map<string, VirtualSubscription> =\n    new Map();\n  private readonly virtualIdsByPhysicalId: Map<string, string> = new Map();\n  private readonly backfiller: Backfiller;\n  private heartbeatIntervalId?: NodeJS.Timeout;\n  private cancelBackfill = noop;\n\n  constructor(\n    private readonly ws: SturdyWebSocket,\n    private readonly sendJsonRpcPayload: SendJsonRpcPayloadFunction,\n    private readonly jsonRpcSenders: JsonRpcSenders,\n  ) {\n    super();\n    this.backfiller = makeBackfiller(jsonRpcSenders);\n    this.addSocketListeners();\n    this.startHeartbeat();\n  }\n\n  public send(\n    request: SingleOrBatchRequest,\n    callback: (error: any, response?: SingleOrBatchResponse) => void,\n  ): void {\n    if (isSubscribeRequest(request)) {\n      const { id } = request;\n      if (id === undefined) {\n        // The JSON-RPC spec says to return nothing if there is no request id.\n        return;\n      }\n      callWhenDone(this.subscribe(request), callback);\n      return;\n    }\n    if (isUnsubscribeRequest(request)) {\n      callWhenDone(this.unsubscribe(request), callback);\n      return;\n    }\n    callWhenDone(this.sendJsonRpcPayload(request), callback);\n  }\n\n  public supportsSubscriptions(): true {\n    return true;\n  }\n\n  public disconnect(code?: number, reason?: string): void {\n    this.removeSocketListeners();\n    this.removeAllListeners();\n    this.stopHeartbeatAndBackfill();\n    this.ws.close(code, reason);\n  }\n\n  public connect(): void {\n    // No-op. We're already connected when passed a websocket in the\n    // constructor.\n  }\n\n  public reset(): void {\n    // No-op.\n  }\n\n  public reconnect(): void {\n    // No-op. This isn't called anywhere.\n  }\n\n  private async subscribe(request: JsonRpcRequest): Promise<JsonRpcResponse> {\n    const { method, params = [] } = request;\n    const startingBlockNumber = await this.getBlockNumber();\n    const response = await this.sendJsonRpcPayload(request);\n    const id = response.result;\n    this.virtualSubscriptionsById.set(id, {\n      method,\n      params,\n      startingBlockNumber,\n      virtualId: id,\n      physicalId: id,\n      sentEvents: [],\n      isBackfilling: false,\n      backfillBuffer: [],\n    });\n    this.virtualIdsByPhysicalId.set(id, id);\n    return makeResponse(request.id!, id);\n  }\n\n  private async unsubscribe(request: JsonRpcRequest): Promise<JsonRpcResponse> {\n    const subscriptionId = request.params?.[0];\n    const virtualSubscription =\n      this.virtualSubscriptionsById.get(subscriptionId);\n    if (!virtualSubscription) {\n      return makeResponse(request.id!, false);\n    }\n    const { physicalId } = virtualSubscription;\n    const physicalRequest = { ...request, params: [physicalId] };\n    await this.sendJsonRpcPayload(physicalRequest);\n    this.virtualSubscriptionsById.delete(subscriptionId);\n    this.virtualIdsByPhysicalId.delete(physicalId);\n    return makeResponse(request.id!, true);\n  }\n\n  private addSocketListeners(): void {\n    this.ws.addEventListener(\"message\", this.handleMessage);\n    this.ws.addEventListener(\"reopen\", this.handleReopen);\n    this.ws.addEventListener(\"down\", this.stopHeartbeatAndBackfill);\n  }\n\n  private removeSocketListeners(): void {\n    this.ws.removeEventListener(\"message\", this.handleMessage);\n    this.ws.removeEventListener(\"reopen\", this.handleReopen);\n    this.ws.removeEventListener(\"down\", this.stopHeartbeatAndBackfill);\n  }\n\n  private startHeartbeat = (): void => {\n    if (this.heartbeatIntervalId != null) {\n      return;\n    }\n    this.heartbeatIntervalId = setInterval(async () => {\n      try {\n        await withTimeout(\n          this.jsonRpcSenders.send(\"net_version\"),\n          HEARTBEAT_WAIT_TIME,\n        );\n      } catch {\n        this.ws.reconnect();\n      }\n    }, HEARTBEAT_INTERVAL);\n  };\n\n  private stopHeartbeatAndBackfill = (): void => {\n    if (this.heartbeatIntervalId != null) {\n      clearInterval(this.heartbeatIntervalId);\n      this.heartbeatIntervalId = undefined;\n    }\n    this.cancelBackfill();\n  };\n\n  private handleMessage = (event: MessageEvent): void => {\n    const message: WebSocketMessage = JSON.parse(event.data);\n    if (!isSubscriptionEvent(message)) {\n      return;\n    }\n    const physicalId = message.params.subscription;\n    const virtualId = this.virtualIdsByPhysicalId.get(physicalId);\n    if (!virtualId) {\n      return;\n    }\n    const subscription = this.virtualSubscriptionsById.get(virtualId)!;\n    if (subscription.method !== \"eth_subscribe\") {\n      this.emitGenericEvent(virtualId, message.params.result);\n      return;\n    }\n    switch (subscription.params[0]) {\n      case \"newHeads\": {\n        const newHeadsSubscription = subscription as NewHeadsSubscription;\n        const newHeadsMessage = message as SubscriptionEvent<NewHeadsEvent>;\n        const { isBackfilling, backfillBuffer } = newHeadsSubscription;\n        const { result } = newHeadsMessage.params;\n        if (isBackfilling) {\n          addToNewHeadsEventsBuffer(backfillBuffer, result);\n        } else {\n          this.emitNewHeadsEvent(virtualId, result);\n        }\n        break;\n      }\n      case \"logs\": {\n        const logsSubscription = subscription as LogsSubscription;\n        const logsMessage = message as SubscriptionEvent<LogsEvent>;\n        const { isBackfilling, backfillBuffer } = logsSubscription;\n        const { result } = logsMessage.params;\n        if (isBackfilling) {\n          addToLogsEventsBuffer(backfillBuffer, result);\n        } else {\n          this.emitLogsEvent(virtualId, result);\n        }\n        break;\n      }\n      default:\n        this.emitGenericEvent(virtualId, message.params.result);\n    }\n  };\n\n  private handleReopen = (): void => {\n    this.virtualIdsByPhysicalId.clear();\n    const { cancel, isCancelled } = makeCancelToken();\n    this.cancelBackfill = cancel;\n    for (const subscription of this.virtualSubscriptionsById.values()) {\n      (async () => {\n        try {\n          await this.resubscribeAndBackfill(isCancelled, subscription);\n        } catch (error) {\n          if (!isCancelled()) {\n            console.error(\n              `Error while backfilling \"${subscription.params[0]}\" subscription. Some events may be missing.`,\n              error,\n            );\n          }\n        }\n      })();\n    }\n    this.startHeartbeat();\n  };\n\n  private async resubscribeAndBackfill(\n    isCancelled: () => boolean,\n    subscription: VirtualSubscription,\n  ): Promise<void> {\n    const {\n      virtualId,\n      method,\n      params,\n      sentEvents,\n      backfillBuffer,\n      startingBlockNumber,\n    } = subscription;\n    subscription.isBackfilling = true;\n    backfillBuffer.length = 0;\n    try {\n      const physicalId = await this.jsonRpcSenders.send(method, params);\n      throwIfCancelled(isCancelled);\n      subscription.physicalId = physicalId;\n      this.virtualIdsByPhysicalId.set(physicalId, virtualId);\n      switch (params[0]) {\n        case \"newHeads\": {\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getNewHeadsBackfill(\n                  isCancelled,\n                  sentEvents,\n                  startingBlockNumber,\n                ),\n                BACKFILL_TIMEOUT,\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled(),\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeNewHeads([...backfillEvents, ...backfillBuffer]);\n          events.forEach((event) => this.emitNewHeadsEvent(virtualId, event));\n          break;\n        }\n        case \"logs\": {\n          const filter: LogsSubscriptionFilter = params[1] || {};\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getLogsBackfill(\n                  isCancelled,\n                  filter,\n                  sentEvents,\n                  startingBlockNumber,\n                ),\n                BACKFILL_TIMEOUT,\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled(),\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeLogs([...backfillEvents, ...backfillBuffer]);\n          events.forEach((event) => this.emitLogsEvent(virtualId, event));\n          break;\n        }\n        default:\n          break;\n      }\n    } finally {\n      subscription.isBackfilling = false;\n      backfillBuffer.length = 0;\n    }\n  }\n\n  private async getBlockNumber(): Promise<number> {\n    const blockNumberHex: string = await this.jsonRpcSenders.send(\n      \"eth_blockNumber\",\n    );\n    return fromHex(blockNumberHex);\n  }\n\n  private emitNewHeadsEvent(virtualId: string, result: NewHeadsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n  }\n\n  private emitLogsEvent(virtualId: string, result: LogsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n  }\n\n  /**\n   * Emits an event to consumers, but also remembers it in its subscriptions's\n   * `sentEvents` buffer so that we can detect re-orgs if the connection drops\n   * and needs to be reconnected.\n   */\n  private emitAndRememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number,\n  ): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    // Web3 modifies these event objects once we pass them on (changing hex\n    // numbers to numbers). We want the original event, so make a defensive\n    // copy.\n    addToPastEventsBuffer(\n      subscription.sentEvents,\n      { ...result },\n      getBlockNumber,\n    );\n    this.emitGenericEvent(virtualId, result);\n  }\n\n  private emitGenericEvent(virtualId: string, result: any): void {\n    const event: SubscriptionEvent = {\n      jsonrpc: \"2.0\",\n      method: \"eth_subscription\",\n      params: {\n        subscription: virtualId,\n        result,\n      },\n    };\n    this.emit(\"data\", event);\n  }\n}\n\nfunction addToNewHeadsEventsBuffer(\n  pastEvents: NewHeadsEvent[],\n  event: NewHeadsEvent,\n): void {\n  addToPastEventsBuffer(pastEvents, event, getNewHeadsBlockNumber);\n}\n\nfunction addToLogsEventsBuffer(\n  pastEvents: LogsEvent[],\n  event: LogsEvent,\n): void {\n  addToPastEventsBuffer(pastEvents, event, getLogsBlockNumber);\n}\n\n/**\n * Adds a new event to an array of events, evicting any events which\n * are so old that they will no longer feasibly be part of a reorg.\n */\nfunction addToPastEventsBuffer<T>(\n  pastEvents: T[],\n  event: T,\n  getBlockNumber: (event: T) => number,\n): void {\n  const currentBlockNumber = getBlockNumber(event);\n  // Find first index of an event recent enough to retain, then drop everything\n  // at a lower index.\n  const firstGoodIndex = pastEvents.findIndex(\n    (e) => getBlockNumber(e) > currentBlockNumber - RETAINED_EVENT_BLOCK_COUNT,\n  );\n  if (firstGoodIndex === -1) {\n    pastEvents.length = 0;\n  } else {\n    pastEvents.splice(0, firstGoodIndex);\n  }\n  pastEvents.push(event);\n}\n\nfunction isSubscribeRequest(\n  request: SingleOrBatchRequest,\n): request is JsonRpcRequest {\n  return !Array.isArray(request) && request.method === \"eth_subscribe\";\n}\n\nfunction isUnsubscribeRequest(\n  request: SingleOrBatchRequest,\n): request is JsonRpcRequest {\n  return !Array.isArray(request) && request.method === \"eth_unsubscribe\";\n}\n\nfunction getNewHeadsBlockNumber(event: NewHeadsEvent): number {\n  return fromHex(event.number);\n}\n\nfunction getLogsBlockNumber(event: LogsEvent): number {\n  return fromHex(event.blockNumber);\n}\n\nfunction noop(): void {\n  // Nothing.\n}\n"]},"metadata":{},"sourceType":"module"}