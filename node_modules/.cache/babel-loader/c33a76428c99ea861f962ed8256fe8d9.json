{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.receiveAPDU = void 0;\n\nvar _errors = require(\"@ledgerhq/errors\");\n\nvar _rxjs = require(\"rxjs\");\n\nvar _logs = require(\"@ledgerhq/logs\");\n\nconst TagId = 0x05; // operator that transform the input raw stream into one apdu response and finishes\n\nconst receiveAPDU = rawStream => _rxjs.Observable.create(o => {\n  let notifiedIndex = 0;\n  let notifiedDataLength = 0;\n  let notifiedData = Buffer.alloc(0);\n  const sub = rawStream.subscribe({\n    complete: () => {\n      o.error(new _errors.DisconnectedDevice());\n      sub.unsubscribe();\n    },\n    error: e => {\n      (0, _logs.log)(\"ble-error\", \"in receiveAPDU \" + String(e));\n      o.error(e);\n      sub.unsubscribe();\n    },\n    next: value => {\n      const tag = value.readUInt8(0);\n      const index = value.readUInt16BE(1);\n      let data = value.slice(3);\n\n      if (tag !== TagId) {\n        o.error(new _errors.TransportError(\"Invalid tag \" + tag.toString(16), \"InvalidTag\"));\n        return;\n      }\n\n      if (notifiedIndex !== index) {\n        o.error(new _errors.TransportError(\"BLE: Invalid sequence number. discontinued chunk. Received \" + index + \" but expected \" + notifiedIndex, \"InvalidSequence\"));\n        return;\n      }\n\n      if (index === 0) {\n        notifiedDataLength = data.readUInt16BE(0);\n        data = data.slice(2);\n      }\n\n      notifiedIndex++;\n      notifiedData = Buffer.concat([notifiedData, data]);\n\n      if (notifiedData.length > notifiedDataLength) {\n        o.error(new _errors.TransportError(\"BLE: received too much data. discontinued chunk. Received \" + notifiedData.length + \" but expected \" + notifiedDataLength, \"BLETooMuchData\"));\n        return;\n      }\n\n      if (notifiedData.length === notifiedDataLength) {\n        o.next(notifiedData);\n        o.complete();\n        sub.unsubscribe();\n      }\n    }\n  });\n  return () => {\n    sub.unsubscribe();\n  };\n});\n\nexports.receiveAPDU = receiveAPDU;","map":{"version":3,"mappings":";;;;;;;AAEA;;AACA;;AACA;;AAEA,MAAMA,KAAK,GAAG,IAAd,C,CAEA;;AACO,MAAMC,WAAW,GACtBC,SADyB,IAGzBC,iBAAWC,MAAXD,CAAmBE,CAAD,IAAO;AACvB,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,kBAAkB,GAAG,CAAzB;AACA,MAAIC,YAAY,GAAGC,MAAM,CAACC,KAAPD,CAAa,CAAbA,CAAnB;AAEA,QAAME,GAAG,GAAGT,SAAS,CAACU,SAAVV,CAAoB;AAC9BW,YAAQ,EAAE,MAAM;AACdR,OAAC,CAACS,KAAFT,CAAQ,IAAIU,0BAAJ,EAARV;AACAM,SAAG,CAACK,WAAJL;AAH4B;AAK9BG,SAAK,EAAGG,CAAD,IAAO;AACZ,qBAAI,WAAJ,EAAiB,oBAAoBC,MAAM,CAACD,CAAD,CAA3C;AACAZ,OAAC,CAACS,KAAFT,CAAQY,CAARZ;AACAM,SAAG,CAACK,WAAJL;AAR4B;AAU9BQ,QAAI,EAAGC,KAAD,IAAW;AACf,YAAMC,GAAG,GAAGD,KAAK,CAACE,SAANF,CAAgB,CAAhBA,CAAZ;AACA,YAAMG,KAAK,GAAGH,KAAK,CAACI,YAANJ,CAAmB,CAAnBA,CAAd;AACA,UAAIK,IAAI,GAAGL,KAAK,CAACM,KAANN,CAAY,CAAZA,CAAX;;AAEA,UAAIC,GAAG,KAAKrB,KAAZ,EAAmB;AACjBK,SAAC,CAACS,KAAFT,CACE,IAAIsB,sBAAJ,CAAmB,iBAAiBN,GAAG,CAACO,QAAJP,CAAa,EAAbA,CAApC,EAAsD,YAAtD,CADFhB;AAGA;AACD;;AAED,UAAIC,aAAa,KAAKiB,KAAtB,EAA6B;AAC3BlB,SAAC,CAACS,KAAFT,CACE,IAAIsB,sBAAJ,CACE,gEACEJ,KADF,GAEE,gBAFF,GAGEjB,aAJJ,EAKE,iBALF,CADFD;AASA;AACD;;AAED,UAAIkB,KAAK,KAAK,CAAd,EAAiB;AACfhB,0BAAkB,GAAGkB,IAAI,CAACD,YAALC,CAAkB,CAAlBA,CAArBlB;AACAkB,YAAI,GAAGA,IAAI,CAACC,KAALD,CAAW,CAAXA,CAAPA;AACD;;AACDnB,mBAAa;AACbE,kBAAY,GAAGC,MAAM,CAACoB,MAAPpB,CAAc,CAACD,YAAD,EAAeiB,IAAf,CAAdhB,CAAfD;;AACA,UAAIA,YAAY,CAACsB,MAAbtB,GAAsBD,kBAA1B,EAA8C;AAC5CF,SAAC,CAACS,KAAFT,CACE,IAAIsB,sBAAJ,CACE,+DACEnB,YAAY,CAACsB,MADf,GAEE,gBAFF,GAGEvB,kBAJJ,EAKE,gBALF,CADFF;AASA;AACD;;AACD,UAAIG,YAAY,CAACsB,MAAbtB,KAAwBD,kBAA5B,EAAgD;AAC9CF,SAAC,CAACc,IAAFd,CAAOG,YAAPH;AACAA,SAAC,CAACQ,QAAFR;AACAM,WAAG,CAACK,WAAJL;AACD;AACF;AA1D6B,GAApBT,CAAZ;AA6DA,SAAO,MAAM;AACXS,OAAG,CAACK,WAAJL;AADF;AAlEF,EAHK","names":["TagId","receiveAPDU","rawStream","Observable","create","o","notifiedIndex","notifiedDataLength","notifiedData","Buffer","alloc","sub","subscribe","complete","error","DisconnectedDevice","unsubscribe","e","String","next","value","tag","readUInt8","index","readUInt16BE","data","slice","TransportError","toString","concat","length"],"sources":["../../src/ble/receiveAPDU.js"],"sourcesContent":["// @flow\n\nimport { TransportError, DisconnectedDevice } from \"@ledgerhq/errors\";\nimport { Observable } from \"rxjs\";\nimport { log } from \"@ledgerhq/logs\";\n\nconst TagId = 0x05;\n\n// operator that transform the input raw stream into one apdu response and finishes\nexport const receiveAPDU = (\n  rawStream: Observable<Buffer>\n): Observable<Buffer> =>\n  Observable.create((o) => {\n    let notifiedIndex = 0;\n    let notifiedDataLength = 0;\n    let notifiedData = Buffer.alloc(0);\n\n    const sub = rawStream.subscribe({\n      complete: () => {\n        o.error(new DisconnectedDevice());\n        sub.unsubscribe();\n      },\n      error: (e) => {\n        log(\"ble-error\", \"in receiveAPDU \" + String(e));\n        o.error(e);\n        sub.unsubscribe();\n      },\n      next: (value) => {\n        const tag = value.readUInt8(0);\n        const index = value.readUInt16BE(1);\n        let data = value.slice(3);\n\n        if (tag !== TagId) {\n          o.error(\n            new TransportError(\"Invalid tag \" + tag.toString(16), \"InvalidTag\")\n          );\n          return;\n        }\n\n        if (notifiedIndex !== index) {\n          o.error(\n            new TransportError(\n              \"BLE: Invalid sequence number. discontinued chunk. Received \" +\n                index +\n                \" but expected \" +\n                notifiedIndex,\n              \"InvalidSequence\"\n            )\n          );\n          return;\n        }\n\n        if (index === 0) {\n          notifiedDataLength = data.readUInt16BE(0);\n          data = data.slice(2);\n        }\n        notifiedIndex++;\n        notifiedData = Buffer.concat([notifiedData, data]);\n        if (notifiedData.length > notifiedDataLength) {\n          o.error(\n            new TransportError(\n              \"BLE: received too much data. discontinued chunk. Received \" +\n                notifiedData.length +\n                \" but expected \" +\n                notifiedDataLength,\n              \"BLETooMuchData\"\n            )\n          );\n          return;\n        }\n        if (notifiedData.length === notifiedDataLength) {\n          o.next(notifiedData);\n          o.complete();\n          sub.unsubscribe();\n        }\n      },\n    });\n\n    return () => {\n      sub.unsubscribe();\n    };\n  });\n"]},"metadata":{},"sourceType":"script"}