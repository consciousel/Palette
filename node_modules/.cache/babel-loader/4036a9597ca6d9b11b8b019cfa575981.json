{"ast":null,"code":"'use strict';\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendAccounts = void 0;\n\nconst debug = require('debug')('thor:injector');\n\nconst thor_devkit_1 = require(\"thor-devkit\");\n\nconst utils = require(\"../utils\");\n\nconst extendAccounts = function (web3) {\n  const web3Utils = web3.utils; // signTransaction supports both callback and promise style\n\n  web3.eth.accounts.signTransaction = function signTransaction(ethTx, privateKey, callback) {\n    debug('tx to sign: %O', ethTx);\n\n    const sign = function (tx) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!tx.chainTag) {\n          const chainTag = yield web3.eth.getChainTag();\n\n          if (chainTag) {\n            tx.chainTag = chainTag;\n          } else {\n            throw new Error('error getting chainTag');\n          }\n        }\n\n        if (!tx.blockRef) {\n          const blockRef = yield web3.eth.getBlockRef();\n\n          if (blockRef) {\n            tx.blockRef = blockRef;\n          } else {\n            throw new Error('error getting blockRef');\n          }\n        }\n\n        if (tx.data && utils.isHex(tx.data)) {\n          tx.data = utils.toPrefixedHex(tx.data);\n        } else if (tx.data) {\n          throw new Error('Data must be valid hex');\n        } else {\n          tx.data = '0x';\n        }\n\n        if (!tx.gas) {\n          const pubKey = thor_devkit_1.cry.secp256k1.derivePublicKey(Buffer.from(utils.sanitizeHex(privateKey), 'hex'));\n          const from = '0x' + thor_devkit_1.cry.publicKeyToAddress(pubKey).toString('hex');\n          const gas = yield web3.eth.estimateGas({\n            from,\n            to: tx.to ? tx.to : '',\n            value: tx.value ? tx.value : 0,\n            data: tx.data\n          });\n          tx.gas = gas;\n        }\n\n        if (!tx.nonce) {\n          tx.nonce = utils.newNonce();\n        }\n\n        const clause = {\n          value: tx.value || 0,\n          to: tx.to || null,\n          data: tx.data\n        };\n        const body = {\n          chainTag: utils.validNumberOrDefault(tx.chainTag, 0),\n          blockRef: tx.blockRef,\n          gas: tx.gas,\n          expiration: utils.validNumberOrDefault(tx.expiration, utils.params.defaultExpiration),\n          gasPriceCoef: utils.validNumberOrDefault(tx.gasPriceCoef, utils.params.defaultGasPriceCoef),\n          dependsOn: !tx.dependsOn ? null : tx.dependsOn,\n          nonce: typeof tx.nonce === 'string' ? utils.toPrefixedHex(tx.nonce) : tx.nonce,\n          clauses: [clause]\n        };\n        debug('body: %O', body);\n        const ThorTx = new thor_devkit_1.Transaction(body);\n        const priKey = Buffer.from(utils.sanitizeHex(privateKey), 'hex');\n        const signingHash = thor_devkit_1.cry.blake2b256(ThorTx.encode());\n        ThorTx.signature = thor_devkit_1.cry.secp256k1.sign(signingHash, priKey);\n        const result = {\n          rawTransaction: utils.toPrefixedHex(ThorTx.encode().toString('hex')),\n          messageHash: signingHash\n        };\n        return result;\n      });\n    }; // for supporting both callback and promise\n\n\n    if (callback instanceof Function) {\n      sign(ethTx).then(ret => {\n        return callback(null, ret);\n      }).catch(e => {\n        return callback(e);\n      });\n    } else {\n      return sign(ethTx);\n    }\n  };\n\n  web3.eth.accounts.recoverTransaction = function recoverTransaction(encodedRawTx) {\n    const decoded = thor_devkit_1.Transaction.decode(Buffer.from(utils.sanitizeHex(encodedRawTx), 'hex'));\n    return decoded.origin;\n  };\n\n  web3.eth.accounts.hashMessage = function hashMessage(data) {\n    const message = web3Utils.isHexStrict(data) ? web3Utils.hexToBytes(data) : data;\n    const messageBuffer = Buffer.from(message);\n    const prefix = '\\u0019VeChain Signed Message:\\n' + message.length.toString();\n    const prefixBuffer = Buffer.from(prefix);\n    const prefixedMessage = Buffer.concat([prefixBuffer, messageBuffer]);\n    return utils.toPrefixedHex(thor_devkit_1.cry.blake2b256(prefixedMessage).toString('hex'));\n  };\n\n  web3.eth.accounts.sign = function sign(data, privateKey) {\n    const hash = this.hashMessage(data);\n    const hashBuffer = Buffer.from(utils.sanitizeHex(hash), 'hex');\n    const privateKeyBuffer = Buffer.from(utils.sanitizeHex(privateKey), 'hex');\n    const signature = thor_devkit_1.cry.secp256k1.sign(hashBuffer, privateKeyBuffer).toString('hex');\n    return {\n      message: data,\n      messageHash: utils.toPrefixedHex(hash),\n      signature: utils.toPrefixedHex(signature)\n    };\n  };\n\n  web3.eth.accounts.recover = function recover(message, signature, preFixed) {\n    if (utils.isObject(message)) {\n      return this.recover(message.messageHash, message.signature, true);\n    }\n\n    if (!preFixed) {\n      message = this.hashMessage(message);\n    }\n\n    const hexBuffer = Buffer.from(utils.sanitizeHex(message), 'hex');\n    const signatureBuffer = Buffer.from(utils.sanitizeHex(signature), 'hex');\n    const pubKey = thor_devkit_1.cry.secp256k1.recover(hexBuffer, signatureBuffer);\n    const address = thor_devkit_1.cry.publicKeyToAddress(pubKey);\n    return utils.toPrefixedHex(address.toString('hex'));\n  };\n};\n\nexports.extendAccounts = extendAccounts;","map":{"version":3,"mappings":"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","names":["debug","require","extendAccounts","web3","web3Utils","utils","eth","accounts","signTransaction","ethTx","privateKey","callback","sign","tx","chainTag","getChainTag","Error","blockRef","getBlockRef","data","isHex","toPrefixedHex","gas","pubKey","thor_devkit_1","secp256k1","derivePublicKey","Buffer","from","sanitizeHex","publicKeyToAddress","toString","estimateGas","to","value","nonce","newNonce","clause","body","validNumberOrDefault","expiration","params","defaultExpiration","gasPriceCoef","defaultGasPriceCoef","dependsOn","clauses","ThorTx","priKey","signingHash","blake2b256","encode","signature","result","rawTransaction","messageHash","Function","then","ret","catch","e","recoverTransaction","encodedRawTx","decoded","decode","origin","hashMessage","message","isHexStrict","hexToBytes","messageBuffer","prefix","length","prefixBuffer","prefixedMessage","concat","hash","hashBuffer","privateKeyBuffer","recover","preFixed","isObject","hexBuffer","signatureBuffer","address","exports"],"sourceRoot":"","sources":["../../src/extend/accounts.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}