{"ast":null,"code":"import { ConstraintMetadata } from './metadata/ConstraintMetadata';\nimport { ValidationMetadata } from './metadata/ValidationMetadata';\nimport { ValidationTypes } from './validation/ValidationTypes';\nimport { getFromContainer } from './container';\nimport { MetadataStorage, getMetadataStorage } from './metadata/MetadataStorage';\n/**\n * Registers a custom validation decorator.\n */\n\nexport function registerDecorator(options) {\n  var constraintCls;\n\n  if (options.validator instanceof Function) {\n    constraintCls = options.validator;\n    var constraintClasses = getFromContainer(MetadataStorage).getTargetValidatorConstraints(options.validator);\n\n    if (constraintClasses.length > 1) {\n      throw \"More than one implementation of ValidatorConstraintInterface found for validator on: \" + options.target.name + \":\" + options.propertyName;\n    }\n  } else {\n    var validator_1 = options.validator;\n\n    constraintCls =\n    /** @class */\n    function () {\n      function CustomConstraint() {}\n\n      CustomConstraint.prototype.validate = function (value, validationArguments) {\n        return validator_1.validate(value, validationArguments);\n      };\n\n      CustomConstraint.prototype.defaultMessage = function (validationArguments) {\n        if (validator_1.defaultMessage) {\n          return validator_1.defaultMessage(validationArguments);\n        }\n\n        return '';\n      };\n\n      return CustomConstraint;\n    }();\n\n    getMetadataStorage().addConstraintMetadata(new ConstraintMetadata(constraintCls, options.name, options.async));\n  }\n\n  var validationMetadataArgs = {\n    type: options.name && ValidationTypes.isValid(options.name) ? options.name : ValidationTypes.CUSTOM_VALIDATION,\n    target: options.target,\n    propertyName: options.propertyName,\n    validationOptions: options.options,\n    constraintCls: constraintCls,\n    constraints: options.constraints\n  };\n  getMetadataStorage().addValidationMetadata(new ValidationMetadata(validationMetadataArgs));\n}","map":{"version":3,"mappings":"AAAA,SAASA,kBAAT,QAAmC,+BAAnC;AAEA,SAASC,kBAAT,QAAmC,+BAAnC;AAEA,SAASC,eAAT,QAAgC,8BAAhC;AAEA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,eAAT,EAA0BC,kBAA1B,QAAoD,4BAApD;AAwCA;;;;AAGA,OAAM,SAAUC,iBAAV,CAA4BC,OAA5B,EAA+D;AACnE,MAAIC,aAAJ;;AACA,MAAID,OAAO,CAACE,SAAR,YAA6BC,QAAjC,EAA2C;AACzCF,iBAAa,GAAGD,OAAO,CAACE,SAAxB;AACA,QAAME,iBAAiB,GAAGR,gBAAgB,CAACC,eAAD,CAAhB,CAAkCQ,6BAAlC,CAAgEL,OAAO,CAACE,SAAxE,CAA1B;;AACA,QAAIE,iBAAiB,CAACE,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,YAAM,0FAAwFN,OAAO,CAACO,MAAR,CAAeC,IAAvG,GAA2G,GAA3G,GAA+GR,OAAO,CAACS,YAA7H;AACD;AACF,GAND,MAMO;AACL,QAAMC,WAAS,GAAGV,OAAO,CAACE,SAA1B;;AACAD,iBAAa;AAAA;AAAA;AAAG,mCAYf;;AAXCU,sDAASC,KAAT,EAAqBC,mBAArB,EAA8D;AAC5D,eAAOH,WAAS,CAACI,QAAV,CAAmBF,KAAnB,EAA0BC,mBAA1B,CAAP;AACD,OAFD;;AAIAF,4DAAeE,mBAAf,EAAwD;AACtD,YAAIH,WAAS,CAACK,cAAd,EAA8B;AAC5B,iBAAOL,WAAS,CAACK,cAAV,CAAyBF,mBAAzB,CAAP;AACD;;AAED,eAAO,EAAP;AACD,OAND;;AAOF;AAZgB,KAAH,EAAb;;AAaAf,sBAAkB,GAAGkB,qBAArB,CAA2C,IAAIvB,kBAAJ,CAAuBQ,aAAvB,EAAsCD,OAAO,CAACQ,IAA9C,EAAoDR,OAAO,CAACiB,KAA5D,CAA3C;AACD;;AAED,MAAMC,sBAAsB,GAA2B;AACrDC,QAAI,EAAEnB,OAAO,CAACQ,IAAR,IAAgBb,eAAe,CAACyB,OAAhB,CAAwBpB,OAAO,CAACQ,IAAhC,CAAhB,GAAwDR,OAAO,CAACQ,IAAhE,GAAuEb,eAAe,CAAC0B,iBADxC;AAErDd,UAAM,EAAEP,OAAO,CAACO,MAFqC;AAGrDE,gBAAY,EAAET,OAAO,CAACS,YAH+B;AAIrDa,qBAAiB,EAAEtB,OAAO,CAACA,OAJ0B;AAKrDC,iBAAa,EAAEA,aALsC;AAMrDsB,eAAW,EAAEvB,OAAO,CAACuB;AANgC,GAAvD;AAQAzB,oBAAkB,GAAG0B,qBAArB,CAA2C,IAAI9B,kBAAJ,CAAuBwB,sBAAvB,CAA3C;AACD","names":["ConstraintMetadata","ValidationMetadata","ValidationTypes","getFromContainer","MetadataStorage","getMetadataStorage","registerDecorator","options","constraintCls","validator","Function","constraintClasses","getTargetValidatorConstraints","length","target","name","propertyName","validator_1","CustomConstraint","value","validationArguments","validate","defaultMessage","addConstraintMetadata","async","validationMetadataArgs","type","isValid","CUSTOM_VALIDATION","validationOptions","constraints","addValidationMetadata"],"sourceRoot":"","sources":["../../src/register-decorator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}