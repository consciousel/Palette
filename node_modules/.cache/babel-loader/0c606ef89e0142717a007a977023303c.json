{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isPartialPayment = exports.adjustQualityForXRP = exports.parseTimestamp = exports.hexToString = exports.parseMemos = exports.parseOutcome = exports.parseQuality = void 0;\n\nconst ripple_lib_transactionparser_1 = __importDefault(require(\"ripple-lib-transactionparser\"));\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst common = __importStar(require(\"../../common\"));\n\nconst amount_1 = __importDefault(require(\"./amount\"));\n\nfunction adjustQualityForXRP(quality, takerGetsCurrency, takerPaysCurrency) {\n  const numeratorShift = takerPaysCurrency === 'XRP' ? -6 : 0;\n  const denominatorShift = takerGetsCurrency === 'XRP' ? -6 : 0;\n  const shift = numeratorShift - denominatorShift;\n  return shift === 0 ? quality : new bignumber_js_1.default(quality).shiftedBy(shift).toString();\n}\n\nexports.adjustQualityForXRP = adjustQualityForXRP;\n\nfunction parseQuality(quality) {\n  if (typeof quality !== 'number') {\n    return undefined;\n  }\n\n  return new bignumber_js_1.default(quality).shiftedBy(-9).toNumber();\n}\n\nexports.parseQuality = parseQuality;\n\nfunction parseTimestamp(rippleTime) {\n  if (typeof rippleTime !== 'number') {\n    return undefined;\n  }\n\n  return common.rippleTimeToISO8601(rippleTime);\n}\n\nexports.parseTimestamp = parseTimestamp;\n\nfunction removeEmptyCounterparty(amount) {\n  if (amount.counterparty === '') {\n    delete amount.counterparty;\n  }\n}\n\nfunction removeEmptyCounterpartyInBalanceChanges(balanceChanges) {\n  Object.entries(balanceChanges).forEach(_ref => {\n    let [_, changes] = _ref;\n    changes.forEach(removeEmptyCounterparty);\n  });\n}\n\nfunction removeEmptyCounterpartyInOrderbookChanges(orderbookChanges) {\n  Object.entries(orderbookChanges).forEach(_ref2 => {\n    let [_, changes] = _ref2;\n    changes.forEach(change => {\n      Object.entries(change).forEach(removeEmptyCounterparty);\n    });\n  });\n}\n\nfunction isPartialPayment(tx) {\n  return (tx.Flags & common.txFlags.Payment.PartialPayment) !== 0;\n}\n\nexports.isPartialPayment = isPartialPayment;\n\nfunction parseDeliveredAmount(tx) {\n  if (tx.TransactionType !== 'Payment' || tx.meta.TransactionResult !== 'tesSUCCESS') {\n    return undefined;\n  }\n\n  if (tx.meta.delivered_amount && tx.meta.delivered_amount === 'unavailable') {\n    return undefined;\n  }\n\n  if (tx.meta.delivered_amount) {\n    return amount_1.default(tx.meta.delivered_amount);\n  }\n\n  if (tx.meta.DeliveredAmount) {\n    return amount_1.default(tx.meta.DeliveredAmount);\n  }\n\n  if (tx.Amount && !isPartialPayment(tx)) {\n    return amount_1.default(tx.Amount);\n  }\n\n  if (tx.Amount && tx.ledger_index > 4594094) {\n    return amount_1.default(tx.Amount);\n  }\n\n  return undefined;\n}\n\nfunction parseOutcome(tx) {\n  const metadata = tx.meta || tx.metaData;\n\n  if (!metadata) {\n    return undefined;\n  }\n\n  const balanceChanges = ripple_lib_transactionparser_1.default.parseBalanceChanges(metadata);\n  const orderbookChanges = ripple_lib_transactionparser_1.default.parseOrderbookChanges(metadata);\n  const channelChanges = ripple_lib_transactionparser_1.default.parseChannelChanges(metadata);\n  removeEmptyCounterpartyInBalanceChanges(balanceChanges);\n  removeEmptyCounterpartyInOrderbookChanges(orderbookChanges);\n  return common.removeUndefined({\n    result: tx.meta.TransactionResult,\n    timestamp: parseTimestamp(tx.date),\n    fee: common.dropsToXrp(tx.Fee),\n    balanceChanges: balanceChanges,\n    orderbookChanges: orderbookChanges,\n    channelChanges: channelChanges,\n    ledgerVersion: tx.ledger_index,\n    indexInLedger: tx.meta.TransactionIndex,\n    deliveredAmount: parseDeliveredAmount(tx)\n  });\n}\n\nexports.parseOutcome = parseOutcome;\n\nfunction hexToString(hex) {\n  return hex ? Buffer.from(hex, 'hex').toString('utf-8') : undefined;\n}\n\nexports.hexToString = hexToString;\n\nfunction parseMemos(tx) {\n  if (!Array.isArray(tx.Memos) || tx.Memos.length === 0) {\n    return undefined;\n  }\n\n  return tx.Memos.map(m => {\n    return common.removeUndefined({\n      type: m.Memo.parsed_memo_type || hexToString(m.Memo.MemoType),\n      format: m.Memo.parsed_memo_format || hexToString(m.Memo.MemoFormat),\n      data: m.Memo.parsed_memo_data || hexToString(m.Memo.MemoData)\n    });\n  });\n}\n\nexports.parseMemos = parseMemos;","map":{"version":3,"mappings":"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","names":["adjustQualityForXRP","quality","takerGetsCurrency","takerPaysCurrency","numeratorShift","denominatorShift","shift","bignumber_js_1","shiftedBy","toString","exports","parseQuality","undefined","toNumber","parseTimestamp","rippleTime","common","rippleTimeToISO8601","removeEmptyCounterparty","amount","counterparty","removeEmptyCounterpartyInBalanceChanges","balanceChanges","Object","entries","forEach","_","changes","removeEmptyCounterpartyInOrderbookChanges","orderbookChanges","change","isPartialPayment","tx","Flags","txFlags","Payment","PartialPayment","parseDeliveredAmount","TransactionType","meta","TransactionResult","delivered_amount","amount_1","DeliveredAmount","Amount","ledger_index","parseOutcome","metadata","metaData","ripple_lib_transactionparser_1","parseBalanceChanges","parseOrderbookChanges","channelChanges","parseChannelChanges","removeUndefined","result","timestamp","date","fee","dropsToXrp","Fee","ledgerVersion","indexInLedger","TransactionIndex","deliveredAmount","hexToString","hex","Buffer","from","parseMemos","Array","isArray","Memos","length","map","m","type","Memo","parsed_memo_type","MemoType","format","parsed_memo_format","MemoFormat","data","parsed_memo_data","MemoData"],"sourceRoot":"","sources":["../../../../src/ledger/parse/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}