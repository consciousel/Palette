{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-crypto\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.randomBytes = void 0;\n/**\n * Uses JS-native CSPRNG to generate a specified number of bytes.\n * @NOTE\n * this method throws if no PRNG is available.\n * @param {Number} bytes bytes number to generate\n * @return {String} ramdom hex string\n */\n\nexports.randomBytes = function (bytes) {\n  var randBz;\n\n  if (typeof window !== 'undefined' && window.crypto && window.crypto.getRandomValues) {\n    randBz = window.crypto.getRandomValues(new Uint8Array(bytes));\n  } else if (typeof require !== 'undefined') {\n    randBz = require('crypto').randomBytes(bytes);\n  } else {\n    throw new Error('Unable to generate safe random numbers.');\n  }\n\n  var randStr = '';\n\n  for (var i = 0; i < bytes; i += 1) {\n    randStr += (\"00\" + randBz[i].toString(16)).slice(-2);\n  }\n\n  return randStr;\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;AAKA;;;;;;;;AAOaA,sBAAc,UAACC,KAAD,EAAc;AACvC,MAAIC,MAAJ;;AAEA,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,MAAxC,IAAkDD,MAAM,CAACC,MAAP,CAAcC,eAApE,EAAqF;AACnFH,UAAM,GAAGC,MAAM,CAACC,MAAP,CAAcC,eAAd,CAA8B,IAAIC,UAAJ,CAAeL,KAAf,CAA9B,CAAT;AACD,GAFD,MAEO,IAAI,OAAOM,OAAP,KAAmB,WAAvB,EAAoC;AACzCL,UAAM,GAAGK,OAAO,CAAC,QAAD,CAAP,CAAkBC,WAAlB,CAA8BP,KAA9B,CAAT;AACD,GAFM,MAEA;AACL,UAAM,IAAIQ,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,MAAIC,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAApB,EAA2BU,CAAC,IAAI,CAAhC,EAAmC;AACjCD,WAAO,IAAI,QAAKR,MAAM,CAACS,CAAD,CAAN,CAAUC,QAAV,CAAmB,EAAnB,CAAL,EAA8BC,KAA9B,CAAoC,CAAC,CAArC,CAAX;AACD;;AAED,SAAOH,OAAP;AACD,CAjBY","names":["exports","bytes","randBz","window","crypto","getRandomValues","Uint8Array","require","randomBytes","Error","randStr","i","toString","slice"],"sourceRoot":"","sources":["../src/random.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}