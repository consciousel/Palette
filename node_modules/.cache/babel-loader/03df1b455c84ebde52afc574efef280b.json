{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Asset = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _clone = require('lodash/clone');\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nvar _padEnd = require('lodash/padEnd');\n\nvar _padEnd2 = _interopRequireDefault(_padEnd);\n\nvar _trimEnd = require('lodash/trimEnd');\n\nvar _trimEnd2 = _interopRequireDefault(_trimEnd);\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _keypair = require('./keypair');\n\nvar _strkey = require('./strkey');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Asset class represents an asset, either the native asset (`XLM`)\n * or an asset code / issuer account ID pair.\n *\n * An asset code describes an asset code and issuer pair. In the case of the native\n * asset XLM, the issuer will be null.\n *\n * @constructor\n * @param {string} code - The asset code.\n * @param {string} issuer - The account ID of the issuer.\n */\n\n\nvar Asset = exports.Asset = function () {\n  function Asset(code, issuer) {\n    _classCallCheck(this, Asset);\n\n    if (!/^[a-zA-Z0-9]{1,12}$/.test(code)) {\n      throw new Error('Asset code is invalid (maximum alphanumeric, 12 characters at max)');\n    }\n\n    if (String(code).toLowerCase() !== 'xlm' && !issuer) {\n      throw new Error('Issuer cannot be null');\n    }\n\n    if (issuer && !_strkey.StrKey.isValidEd25519PublicKey(issuer)) {\n      throw new Error('Issuer is invalid');\n    }\n\n    this.code = code;\n    this.issuer = issuer;\n  }\n  /**\n   * Returns an asset object for the native asset.\n   * @Return {Asset}\n   */\n\n\n  _createClass(Asset, [{\n    key: 'toXDRObject',\n\n    /**\n     * Returns the xdr.Asset object for this asset.\n     * @returns {xdr.Asset} XDR asset object\n     */\n    value: function toXDRObject() {\n      return this._toXDRObject(_stellarXdr_generated2.default.Asset);\n    }\n    /**\n     * Returns the xdr.ChangeTrustAsset object for this asset.\n     * @returns {xdr.ChangeTrustAsset} XDR asset object\n     */\n\n  }, {\n    key: 'toChangeTrustXDRObject',\n    value: function toChangeTrustXDRObject() {\n      return this._toXDRObject(_stellarXdr_generated2.default.ChangeTrustAsset);\n    }\n    /**\n     * Returns the xdr.TrustLineAsset object for this asset.\n     * @returns {xdr.TrustLineAsset} XDR asset object\n     */\n\n  }, {\n    key: 'toTrustLineXDRObject',\n    value: function toTrustLineXDRObject() {\n      return this._toXDRObject(_stellarXdr_generated2.default.TrustLineAsset);\n    }\n    /**\n     * Returns the xdr object for this asset.\n     * @param {xdr.Asset | xdr.ChangeTrustAsset} xdrAsset - The asset xdr object.\n     * @returns {xdr.Asset | xdr.ChangeTrustAsset | xdr.TrustLineAsset} XDR Asset object\n     */\n\n  }, {\n    key: '_toXDRObject',\n    value: function _toXDRObject() {\n      var xdrAsset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _stellarXdr_generated2.default.Asset;\n\n      if (this.isNative()) {\n        return xdrAsset.assetTypeNative();\n      }\n\n      var xdrType = void 0;\n      var xdrTypeString = void 0;\n\n      if (this.code.length <= 4) {\n        xdrType = _stellarXdr_generated2.default.AlphaNum4;\n        xdrTypeString = 'assetTypeCreditAlphanum4';\n      } else {\n        xdrType = _stellarXdr_generated2.default.AlphaNum12;\n        xdrTypeString = 'assetTypeCreditAlphanum12';\n      } // pad code with null bytes if necessary\n\n\n      var padLength = this.code.length <= 4 ? 4 : 12;\n      var paddedCode = (0, _padEnd2.default)(this.code, padLength, '\\0'); // eslint-disable-next-line new-cap\n\n      var assetType = new xdrType({\n        assetCode: paddedCode,\n        issuer: _keypair.Keypair.fromPublicKey(this.issuer).xdrAccountId()\n      });\n      return new xdrAsset(xdrTypeString, assetType);\n    }\n    /**\n     * @returns {string} Asset code\n     */\n\n  }, {\n    key: 'getCode',\n    value: function getCode() {\n      return (0, _clone2.default)(this.code);\n    }\n    /**\n     * @returns {string} Asset issuer\n     */\n\n  }, {\n    key: 'getIssuer',\n    value: function getIssuer() {\n      return (0, _clone2.default)(this.issuer);\n    }\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {string} Asset type. Can be one of following types:\n     *\n     * * `native`\n     * * `credit_alphanum4`\n     * * `credit_alphanum12`\n     */\n\n  }, {\n    key: 'getAssetType',\n    value: function getAssetType() {\n      if (this.isNative()) {\n        return 'native';\n      }\n\n      if (this.code.length >= 1 && this.code.length <= 4) {\n        return 'credit_alphanum4';\n      }\n\n      if (this.code.length >= 5 && this.code.length <= 12) {\n        return 'credit_alphanum12';\n      }\n\n      return null;\n    }\n    /**\n     * @returns {boolean}  true if this asset object is the native asset.\n     */\n\n  }, {\n    key: 'isNative',\n    value: function isNative() {\n      return !this.issuer;\n    }\n    /**\n     * @param {Asset} asset Asset to compare\n     * @returns {boolean} true if this asset equals the given asset.\n     */\n\n  }, {\n    key: 'equals',\n    value: function equals(asset) {\n      return this.code === asset.getCode() && this.issuer === asset.getIssuer();\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      if (this.isNative()) {\n        return 'native';\n      }\n\n      return this.getCode() + ':' + this.getIssuer();\n    }\n    /**\n     * Compares if assetA < assetB according with the criteria:\n     * 1. First compare the type (eg. native before alphanum4 before alphanum12).\n     * 2. If the types are equal, compare the assets codes.\n     * 3. If the asset codes are equal, compare the issuers.\n     *\n     * @static\n     * @param {Asset} assetA - The first asset in the lexicographic order.\n     * @param {Asset} assetB - The second asset in the lexicographic order.\n     * @return {number} `-1` if assetA < assetB, `0` if assetA == assetB, `1` if assetA > assetB.\n     * @memberof Asset\n     */\n\n  }], [{\n    key: 'native',\n    value: function native() {\n      return new Asset('XLM');\n    }\n    /**\n     * Returns an asset object from its XDR object representation.\n     * @param {xdr.Asset} assetXdr - The asset xdr object.\n     * @returns {Asset}\n     */\n\n  }, {\n    key: 'fromOperation',\n    value: function fromOperation(assetXdr) {\n      var anum = void 0;\n      var code = void 0;\n      var issuer = void 0;\n\n      switch (assetXdr.switch()) {\n        case _stellarXdr_generated2.default.AssetType.assetTypeNative():\n          return this.native();\n\n        case _stellarXdr_generated2.default.AssetType.assetTypeCreditAlphanum4():\n          anum = assetXdr.alphaNum4();\n\n        /* falls through */\n\n        case _stellarXdr_generated2.default.AssetType.assetTypeCreditAlphanum12():\n          anum = anum || assetXdr.alphaNum12();\n          issuer = _strkey.StrKey.encodeEd25519PublicKey(anum.issuer().ed25519());\n          code = (0, _trimEnd2.default)(anum.assetCode(), '\\0');\n          return new this(code, issuer);\n\n        default:\n          throw new Error('Invalid asset type: ' + assetXdr.switch().name);\n      }\n    }\n  }, {\n    key: 'compare',\n    value: function compare(assetA, assetB) {\n      if (!assetA || !(assetA instanceof Asset)) {\n        throw new Error('assetA is invalid');\n      }\n\n      if (!assetB || !(assetB instanceof Asset)) {\n        throw new Error('assetB is invalid');\n      }\n\n      if (assetA.equals(assetB)) {\n        return 0;\n      } // Compare asset types.\n\n\n      switch (assetA.getAssetType()) {\n        case 'native':\n          return -1;\n\n        case 'credit_alphanum4':\n          if (assetB.getAssetType() === 'native') {\n            return 1;\n          }\n\n          if (assetB.getAssetType() === 'credit_alphanum12') {\n            return -1;\n          }\n\n          break;\n\n        case 'credit_alphanum12':\n          if (assetB.getAssetType() !== 'credit_alphanum12') {\n            return 1;\n          }\n\n          break;\n\n        default:\n          throw new Error('Unexpected asset type');\n      } // Compare asset codes.\n\n\n      var result = assetA.getCode().localeCompare(assetB.getCode());\n\n      if (result !== 0) {\n        return result;\n      } // Compare asset issuers.\n\n\n      return assetA.getIssuer().localeCompare(assetB.getIssuer());\n    }\n  }]);\n\n  return Asset;\n}();","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/NFT_minter/node_modules/stellar-base/lib/asset.js"],"names":["Object","defineProperty","exports","value","Asset","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_clone","require","_clone2","_interopRequireDefault","_padEnd","_padEnd2","_trimEnd","_trimEnd2","_stellarXdr_generated","_stellarXdr_generated2","_keypair","_strkey","obj","__esModule","default","_classCallCheck","instance","TypeError","code","issuer","test","Error","String","toLowerCase","StrKey","isValidEd25519PublicKey","toXDRObject","_toXDRObject","toChangeTrustXDRObject","ChangeTrustAsset","toTrustLineXDRObject","TrustLineAsset","xdrAsset","arguments","isNative","assetTypeNative","xdrType","xdrTypeString","AlphaNum4","AlphaNum12","padLength","paddedCode","assetType","assetCode","Keypair","fromPublicKey","xdrAccountId","getCode","getIssuer","getAssetType","equals","asset","toString","native","fromOperation","assetXdr","anum","switch","AssetType","assetTypeCreditAlphanum4","alphaNum4","assetTypeCreditAlphanum12","alphaNum12","encodeEd25519PublicKey","ed25519","name","compare","assetA","assetB","result","localeCompare"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Asset = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _clone = require('lodash/clone');\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nvar _padEnd = require('lodash/padEnd');\n\nvar _padEnd2 = _interopRequireDefault(_padEnd);\n\nvar _trimEnd = require('lodash/trimEnd');\n\nvar _trimEnd2 = _interopRequireDefault(_trimEnd);\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _keypair = require('./keypair');\n\nvar _strkey = require('./strkey');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Asset class represents an asset, either the native asset (`XLM`)\n * or an asset code / issuer account ID pair.\n *\n * An asset code describes an asset code and issuer pair. In the case of the native\n * asset XLM, the issuer will be null.\n *\n * @constructor\n * @param {string} code - The asset code.\n * @param {string} issuer - The account ID of the issuer.\n */\nvar Asset = exports.Asset = function () {\n  function Asset(code, issuer) {\n    _classCallCheck(this, Asset);\n\n    if (!/^[a-zA-Z0-9]{1,12}$/.test(code)) {\n      throw new Error('Asset code is invalid (maximum alphanumeric, 12 characters at max)');\n    }\n    if (String(code).toLowerCase() !== 'xlm' && !issuer) {\n      throw new Error('Issuer cannot be null');\n    }\n    if (issuer && !_strkey.StrKey.isValidEd25519PublicKey(issuer)) {\n      throw new Error('Issuer is invalid');\n    }\n\n    this.code = code;\n    this.issuer = issuer;\n  }\n\n  /**\n   * Returns an asset object for the native asset.\n   * @Return {Asset}\n   */\n\n\n  _createClass(Asset, [{\n    key: 'toXDRObject',\n\n\n    /**\n     * Returns the xdr.Asset object for this asset.\n     * @returns {xdr.Asset} XDR asset object\n     */\n    value: function toXDRObject() {\n      return this._toXDRObject(_stellarXdr_generated2.default.Asset);\n    }\n\n    /**\n     * Returns the xdr.ChangeTrustAsset object for this asset.\n     * @returns {xdr.ChangeTrustAsset} XDR asset object\n     */\n\n  }, {\n    key: 'toChangeTrustXDRObject',\n    value: function toChangeTrustXDRObject() {\n      return this._toXDRObject(_stellarXdr_generated2.default.ChangeTrustAsset);\n    }\n\n    /**\n     * Returns the xdr.TrustLineAsset object for this asset.\n     * @returns {xdr.TrustLineAsset} XDR asset object\n     */\n\n  }, {\n    key: 'toTrustLineXDRObject',\n    value: function toTrustLineXDRObject() {\n      return this._toXDRObject(_stellarXdr_generated2.default.TrustLineAsset);\n    }\n\n    /**\n     * Returns the xdr object for this asset.\n     * @param {xdr.Asset | xdr.ChangeTrustAsset} xdrAsset - The asset xdr object.\n     * @returns {xdr.Asset | xdr.ChangeTrustAsset | xdr.TrustLineAsset} XDR Asset object\n     */\n\n  }, {\n    key: '_toXDRObject',\n    value: function _toXDRObject() {\n      var xdrAsset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _stellarXdr_generated2.default.Asset;\n\n      if (this.isNative()) {\n        return xdrAsset.assetTypeNative();\n      }\n\n      var xdrType = void 0;\n      var xdrTypeString = void 0;\n      if (this.code.length <= 4) {\n        xdrType = _stellarXdr_generated2.default.AlphaNum4;\n        xdrTypeString = 'assetTypeCreditAlphanum4';\n      } else {\n        xdrType = _stellarXdr_generated2.default.AlphaNum12;\n        xdrTypeString = 'assetTypeCreditAlphanum12';\n      }\n\n      // pad code with null bytes if necessary\n      var padLength = this.code.length <= 4 ? 4 : 12;\n      var paddedCode = (0, _padEnd2.default)(this.code, padLength, '\\0');\n\n      // eslint-disable-next-line new-cap\n      var assetType = new xdrType({\n        assetCode: paddedCode,\n        issuer: _keypair.Keypair.fromPublicKey(this.issuer).xdrAccountId()\n      });\n\n      return new xdrAsset(xdrTypeString, assetType);\n    }\n\n    /**\n     * @returns {string} Asset code\n     */\n\n  }, {\n    key: 'getCode',\n    value: function getCode() {\n      return (0, _clone2.default)(this.code);\n    }\n\n    /**\n     * @returns {string} Asset issuer\n     */\n\n  }, {\n    key: 'getIssuer',\n    value: function getIssuer() {\n      return (0, _clone2.default)(this.issuer);\n    }\n\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {string} Asset type. Can be one of following types:\n     *\n     * * `native`\n     * * `credit_alphanum4`\n     * * `credit_alphanum12`\n     */\n\n  }, {\n    key: 'getAssetType',\n    value: function getAssetType() {\n      if (this.isNative()) {\n        return 'native';\n      }\n      if (this.code.length >= 1 && this.code.length <= 4) {\n        return 'credit_alphanum4';\n      }\n      if (this.code.length >= 5 && this.code.length <= 12) {\n        return 'credit_alphanum12';\n      }\n\n      return null;\n    }\n\n    /**\n     * @returns {boolean}  true if this asset object is the native asset.\n     */\n\n  }, {\n    key: 'isNative',\n    value: function isNative() {\n      return !this.issuer;\n    }\n\n    /**\n     * @param {Asset} asset Asset to compare\n     * @returns {boolean} true if this asset equals the given asset.\n     */\n\n  }, {\n    key: 'equals',\n    value: function equals(asset) {\n      return this.code === asset.getCode() && this.issuer === asset.getIssuer();\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      if (this.isNative()) {\n        return 'native';\n      }\n\n      return this.getCode() + ':' + this.getIssuer();\n    }\n\n    /**\n     * Compares if assetA < assetB according with the criteria:\n     * 1. First compare the type (eg. native before alphanum4 before alphanum12).\n     * 2. If the types are equal, compare the assets codes.\n     * 3. If the asset codes are equal, compare the issuers.\n     *\n     * @static\n     * @param {Asset} assetA - The first asset in the lexicographic order.\n     * @param {Asset} assetB - The second asset in the lexicographic order.\n     * @return {number} `-1` if assetA < assetB, `0` if assetA == assetB, `1` if assetA > assetB.\n     * @memberof Asset\n     */\n\n  }], [{\n    key: 'native',\n    value: function native() {\n      return new Asset('XLM');\n    }\n\n    /**\n     * Returns an asset object from its XDR object representation.\n     * @param {xdr.Asset} assetXdr - The asset xdr object.\n     * @returns {Asset}\n     */\n\n  }, {\n    key: 'fromOperation',\n    value: function fromOperation(assetXdr) {\n      var anum = void 0;\n      var code = void 0;\n      var issuer = void 0;\n      switch (assetXdr.switch()) {\n        case _stellarXdr_generated2.default.AssetType.assetTypeNative():\n          return this.native();\n        case _stellarXdr_generated2.default.AssetType.assetTypeCreditAlphanum4():\n          anum = assetXdr.alphaNum4();\n        /* falls through */\n        case _stellarXdr_generated2.default.AssetType.assetTypeCreditAlphanum12():\n          anum = anum || assetXdr.alphaNum12();\n          issuer = _strkey.StrKey.encodeEd25519PublicKey(anum.issuer().ed25519());\n          code = (0, _trimEnd2.default)(anum.assetCode(), '\\0');\n          return new this(code, issuer);\n        default:\n          throw new Error('Invalid asset type: ' + assetXdr.switch().name);\n      }\n    }\n  }, {\n    key: 'compare',\n    value: function compare(assetA, assetB) {\n      if (!assetA || !(assetA instanceof Asset)) {\n        throw new Error('assetA is invalid');\n      }\n      if (!assetB || !(assetB instanceof Asset)) {\n        throw new Error('assetB is invalid');\n      }\n\n      if (assetA.equals(assetB)) {\n        return 0;\n      }\n\n      // Compare asset types.\n      switch (assetA.getAssetType()) {\n        case 'native':\n          return -1;\n        case 'credit_alphanum4':\n          if (assetB.getAssetType() === 'native') {\n            return 1;\n          }\n          if (assetB.getAssetType() === 'credit_alphanum12') {\n            return -1;\n          }\n          break;\n        case 'credit_alphanum12':\n          if (assetB.getAssetType() !== 'credit_alphanum12') {\n            return 1;\n          }\n          break;\n        default:\n          throw new Error('Unexpected asset type');\n      }\n\n      // Compare asset codes.\n      var result = assetA.getCode().localeCompare(assetB.getCode());\n      if (result !== 0) {\n        return result;\n      }\n\n      // Compare asset issuers.\n      return assetA.getIssuer().localeCompare(assetB.getIssuer());\n    }\n  }]);\n\n  return Asset;\n}();"]},"metadata":{},"sourceType":"script"}