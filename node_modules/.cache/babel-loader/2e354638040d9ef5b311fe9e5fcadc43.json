{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\masho\\\\OneDrive\\\\Desktop\\\\Blockchain\\\\Biconomy\\\\Projects\\\\NFT_minter\\\\src\\\\utils\\\\interact.js\";\nimport { pinJSONToIPFS } from './pinata.js';\nimport { NFTPortPinJSONToIPFS } from './nftport.js';\nimport { createReadStream } from 'fs';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\n\nconst web3 = createAlchemyWeb3(\"https://polygon-mumbai.g.alchemy.com/v2/pTB9jj_kefkrh3BSy6T-lOxFpLVS0mye\");\n\nconst ipfsClient = require(\"ipfs-http-client\");\n\nconst contractABI = require('../contract-abi.json');\n\nconst contractAddress = \"0x5Fa62F03AF9cE30B684BAa9c9D7713CD64639dA8\";\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"üëÜüèΩ Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"üò• \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              href: `https://metamask.io/download.html`,\n              children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }, this)\n      }, void 0, false)\n    };\n  }\n};\nexport const mintNFT = async (name, description, artist, urlOfLastUpload, imageCID) => {\n  //error handling\n  if (urlOfLastUpload === \"\" || name.trim() === \"\" || description.trim() === \"\") {\n    return {\n      success: false,\n      status: \"‚ùóPlease make sure all fields are completed before minting.\"\n    };\n  } //make metadata\n\n\n  const metadata = {\n    \"name\": name,\n    \"description\": description,\n    \"image\": urlOfLastUpload,\n    \"attributes\": [{\n      \"artist\": artist\n    }]\n  }; // metadata.name = name;\n  // metadata.image = urlOfLastUpload;\n  // metadata.description = description;\n  // metadata.artist = artist;\n\n  console.log(metadata); // make pinata call\n  // const pinataResponse = await pinJSONToIPFS(metadata);\n\n  const nftPortResponse = await NFTPortPinJSONToIPFS(name, description, urlOfLastUpload);\n\n  if (!nftPortResponse.success) {\n    return {\n      success: false,\n      status: \"üò¢ Something went wrong while retrieving your tokenURI.\"\n    };\n  } else {\n    status: \"Minting NFT on Polygon test network Mumbai.\";\n  } // pin data and get asset url\n\n\n  const tokenURI = nftPortResponse.url;\n  console.log(tokenURI); //load the smart contract\n\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress); //set up your Ethereum transaction\n\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: window.ethereum.selectedAddress,\n    // must match user's active address.\n    'data': window.contract.methods.mint(tokenURI).encodeABI() //make call to NFT smart contract \n\n  }; //sign the transaction via Metamask\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters]\n    });\n    return {\n      success: true,\n      status: \"‚úÖ Check out your transaction on Polygonscan: https://mumbai.polygonscan.com//tx/\" + txHash\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"üò• Something went wrong: \" + error.message\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"üëÜüèΩ Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"ü¶ä Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"üò• \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/NFT_minter/src/utils/interact.js"],"names":["pinJSONToIPFS","NFTPortPinJSONToIPFS","createReadStream","React","useState","require","config","createAlchemyWeb3","web3","ipfsClient","contractABI","contractAddress","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err","message","mintNFT","name","description","artist","urlOfLastUpload","imageCID","trim","success","metadata","console","log","nftPortResponse","tokenURI","url","contract","eth","Contract","transactionParameters","to","from","selectedAddress","methods","mint","encodeABI","txHash","params","error","getCurrentWalletConnected","length"],"mappings":"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","sourcesContent":["import {pinJSONToIPFS} from './pinata.js';\r\nimport { NFTPortPinJSONToIPFS } from './nftport.js'\r\nimport { createReadStream } from 'fs';\r\nimport React, { useState } from 'react';\r\n\r\nrequire('dotenv').config();\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(\"https://polygon-mumbai.g.alchemy.com/v2/pTB9jj_kefkrh3BSy6T-lOxFpLVS0mye\");\r\nconst ipfsClient = require(\"ipfs-http-client\");\r\n\r\nconst contractABI = require('../contract-abi.json');\r\nconst contractAddress = \"0x5Fa62F03AF9cE30B684BAa9c9D7713CD64639dA8\";\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"üëÜüèΩ Write a message in the text-field above.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"üò• \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <>\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            ü¶ä{\" \"}\r\n            <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n        </>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const mintNFT = async(name, description, artist, urlOfLastUpload, imageCID) => {\r\n  //error handling\r\n  if (urlOfLastUpload === \"\" || (name.trim() === \"\" || description.trim() === \"\")) { \r\n    return {\r\n      success: false,\r\n      status: \"‚ùóPlease make sure all fields are completed before minting.\",\r\n    }\r\n  }\r\n\r\n  //make metadata\r\n  const metadata = {\r\n    \"name\": name,\r\n    \"description\": description,\r\n    \"image\": urlOfLastUpload,\r\n    \"attributes\": [\r\n      {\r\n        \"artist\": artist\r\n      }\r\n    ]\r\n  };\r\n  // metadata.name = name;\r\n  // metadata.image = urlOfLastUpload;\r\n  // metadata.description = description;\r\n  // metadata.artist = artist;\r\n  \r\n  console.log(metadata)\r\n  \r\n  // make pinata call\r\n  // const pinataResponse = await pinJSONToIPFS(metadata);\r\n  const nftPortResponse = await NFTPortPinJSONToIPFS(name, description, urlOfLastUpload) \r\n  if (!nftPortResponse.success) {\r\n    return {\r\n      success: false,\r\n      status: \"üò¢ Something went wrong while retrieving your tokenURI.\",\r\n    }\r\n  } else {\r\n    status: \"Minting NFT on Polygon test network Mumbai.\"\r\n  }\r\n\r\n  // pin data and get asset url\r\n  const tokenURI = nftPortResponse.url;\r\n  console.log(tokenURI);\r\n\r\n  //load the smart contract\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);  \r\n\r\n  //set up your Ethereum transaction\r\n  const transactionParameters = {\r\n    to: contractAddress, // Required except during contract publications.\r\n    from: window.ethereum.selectedAddress, // must match user's active address.\r\n    'data': window.contract.methods.mint(tokenURI).encodeABI()//make call to NFT smart contract \r\n  };\r\n\r\n  //sign the transaction via Metamask\r\n  try {\r\n    const txHash = await window.ethereum\r\n      .request({\r\n        method: 'eth_sendTransaction',\r\n        params: [transactionParameters],\r\n      });\r\n    return {\r\n        success: true,\r\n        status: \"‚úÖ Check out your transaction on Polygonscan: https://mumbai.polygonscan.com//tx/\" + txHash\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      status: \"üò• Something went wrong: \" + error.message\r\n    }\r\n  }\r\n}\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \"üëÜüèΩ Write a message in the text-field above.\",\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"ü¶ä Connect to Metamask using the top right button.\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"üò• \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            ü¶ä{\" \"}\r\n            <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}