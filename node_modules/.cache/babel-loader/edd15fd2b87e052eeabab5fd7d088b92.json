{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar $ = require('../util/preconditions');\n\nvar compare = Buffer.compare || require('buffer-compare');\n\nvar errors = require('../errors');\n\nvar BufferUtil = require('../util/buffer');\n\nvar JSUtil = require('../util/js');\n\nvar BufferReader = require('../encoding/bufferreader');\n\nvar BufferWriter = require('../encoding/bufferwriter');\n\nvar Hash = require('../crypto/hash');\n\nvar Signature = require('../crypto/signature');\n\nvar Sighash = require('./sighash');\n\nvar SighashWitness = require('./sighashwitness');\n\nvar Address = require('../address');\n\nvar UnspentOutput = require('./unspentoutput');\n\nvar Input = require('./input');\n\nvar PublicKeyHashInput = Input.PublicKeyHash;\nvar PublicKeyInput = Input.PublicKey;\nvar MultiSigScriptHashInput = Input.MultiSigScriptHash;\nvar MultiSigInput = Input.MultiSig;\n\nvar Output = require('./output');\n\nvar Script = require('../script');\n\nvar PrivateKey = require('../privatekey');\n\nvar BN = require('../crypto/bn');\n\nconst Interpreter = require('../script/interpreter');\n/**\n * Represents a transaction, a set of inputs and outputs to change ownership of tokens\n *\n * @param {*} serialized\n * @constructor\n */\n\n\nfunction Transaction(serialized, opts) {\n  if (!(this instanceof Transaction)) {\n    return new Transaction(serialized);\n  }\n\n  this.inputs = [];\n  this.outputs = [];\n  this._inputAmount = undefined;\n  this._outputAmount = undefined;\n\n  if (serialized) {\n    if (serialized instanceof Transaction) {\n      return Transaction.shallowCopy(serialized);\n    } else if (JSUtil.isHexa(serialized)) {\n      this.fromString(serialized);\n    } else if (BufferUtil.isBuffer(serialized)) {\n      this.fromBuffer(serialized);\n    } else if (_.isObject(serialized)) {\n      this.fromObject(serialized, opts);\n    } else {\n      throw new errors.InvalidArgument('Must provide an object or string to deserialize a transaction');\n    }\n  } else {\n    this._newTransaction();\n  }\n}\n\nvar CURRENT_VERSION = 2;\nvar DEFAULT_NLOCKTIME = 0;\nvar MAX_BLOCK_SIZE = 1000000; // Minimum amount for an output for it not to be considered a dust output\n\nTransaction.DUST_AMOUNT = 546; // Margin of error to allow fees in the vecinity of the expected value but doesn't allow a big difference\n\nTransaction.FEE_SECURITY_MARGIN = 15; // max amount of satoshis in circulation\n\nTransaction.MAX_MONEY = 84000000 * 1e8; // Litecoin has 84M coins\n// nlocktime limit to be considered block height rather than a timestamp\n\nTransaction.NLOCKTIME_BLOCKHEIGHT_LIMIT = 5e8; // Max value for an unsigned 32 bit value\n\nTransaction.NLOCKTIME_MAX_VALUE = 4294967295; // Value used for fee estimation (satoshis per kilobyte)\n\nTransaction.FEE_PER_KB = 100000; // Litecoin default fees is 0.001 LTC\n// Safe upper bound for change address script size in bytes\n\nTransaction.CHANGE_OUTPUT_MAX_SIZE = 20 + 4 + 34 + 4;\nTransaction.MAXIMUM_EXTRA_SIZE = 4 + 9 + 9 + 4;\n/* Constructors and Serialization */\n\n/**\n * Create a 'shallow' copy of the transaction, by serializing and deserializing\n * it dropping any additional information that inputs and outputs may have hold\n *\n * @param {Transaction} transaction\n * @return {Transaction}\n */\n\nTransaction.shallowCopy = function (transaction) {\n  var copy = new Transaction(transaction.toBuffer());\n  return copy;\n};\n\nvar hashProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function () {\n    this._hash = new BufferReader(this._getHash()).readReverse().toString('hex');\n    return this._hash;\n  }\n};\nvar witnessHashProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function () {\n    return new BufferReader(this._getWitnessHash()).readReverse().toString('hex');\n  }\n};\nObject.defineProperty(Transaction.prototype, 'witnessHash', witnessHashProperty);\nObject.defineProperty(Transaction.prototype, 'hash', hashProperty);\nObject.defineProperty(Transaction.prototype, 'id', hashProperty);\nvar ioProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function () {\n    return this._getInputAmount();\n  }\n};\nObject.defineProperty(Transaction.prototype, 'inputAmount', ioProperty);\n\nioProperty.get = function () {\n  return this._getOutputAmount();\n};\n\nObject.defineProperty(Transaction.prototype, 'outputAmount', ioProperty);\n/**\n * Retrieve the little endian hash of the transaction (used for serialization)\n * @return {Buffer}\n */\n\nTransaction.prototype._getHash = function () {\n  return Hash.sha256sha256(this.toBuffer(true));\n};\n/**\n * Retrieve the little endian hash of the transaction including witness data\n * @return {Buffer}\n */\n\n\nTransaction.prototype._getWitnessHash = function () {\n  return Hash.sha256sha256(this.toBuffer(false));\n};\n/**\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\n * (decoderawtransaction, sendrawtransaction)\n *\n * @param {Object|boolean=} unsafe if true, skip all tests. if it's an object,\n *   it's expected to contain a set of flags to skip certain tests:\n * * `disableAll`: disable all checks\n * * `disableSmallFees`: disable checking for fees that are too small\n * * `disableLargeFees`: disable checking for fees that are too large\n * * `disableIsFullySigned`: disable checking if all inputs are fully signed\n * * `disableDustOutputs`: disable checking if there are no outputs that are dust amounts\n * * `disableMoreOutputThanInput`: disable checking if the transaction spends more bitcoins than the sum of the input amounts\n * @return {string}\n */\n\n\nTransaction.prototype.serialize = function (unsafe) {\n  if (true === unsafe || unsafe && unsafe.disableAll) {\n    return this.uncheckedSerialize();\n  } else {\n    return this.checkedSerialize(unsafe);\n  }\n};\n\nTransaction.prototype.uncheckedSerialize = Transaction.prototype.toString = function () {\n  return this.toBuffer().toString('hex');\n};\n/**\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\n * (decoderawtransaction, sendrawtransaction)\n *\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\n * @return {string}\n */\n\n\nTransaction.prototype.checkedSerialize = function (opts) {\n  var serializationError = this.getSerializationError(opts);\n\n  if (serializationError) {\n    serializationError.message += ' Use Transaction#uncheckedSerialize if you want to skip security checks. ' + 'See http://litecore.io/guide/transaction.html#Serialization for more info.';\n    throw serializationError;\n  }\n\n  return this.uncheckedSerialize();\n};\n\nTransaction.prototype.invalidSatoshis = function () {\n  var invalid = false;\n\n  for (var i = 0; i < this.outputs.length; i++) {\n    if (this.outputs[i].invalidSatoshis()) {\n      invalid = true;\n    }\n  }\n\n  return invalid;\n};\n/**\n * Retrieve a possible error that could appear when trying to serialize and\n * broadcast this transaction.\n *\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\n * @return {bitcore.Error}\n */\n\n\nTransaction.prototype.getSerializationError = function (opts) {\n  opts = opts || {};\n\n  if (this.invalidSatoshis()) {\n    return new errors.Transaction.InvalidSatoshis();\n  }\n\n  var unspent = this._getUnspentValue();\n\n  var unspentError;\n\n  if (unspent < 0) {\n    if (!opts.disableMoreOutputThanInput) {\n      unspentError = new errors.Transaction.InvalidOutputAmountSum();\n    }\n  } else {\n    unspentError = this._hasFeeError(opts, unspent);\n  }\n\n  return unspentError || this._hasDustOutputs(opts) || this._isMissingSignatures(opts);\n};\n\nTransaction.prototype._hasFeeError = function (opts, unspent) {\n  if (!_.isUndefined(this._fee) && this._fee !== unspent) {\n    return new errors.Transaction.FeeError.Different('Unspent value is ' + unspent + ' but specified fee is ' + this._fee);\n  }\n\n  if (!opts.disableLargeFees) {\n    var maximumFee = Math.floor(Transaction.FEE_SECURITY_MARGIN * this._estimateFee());\n\n    if (unspent > maximumFee) {\n      if (this._missingChange()) {\n        return new errors.Transaction.ChangeAddressMissing('Fee is too large and no change address was provided');\n      }\n\n      return new errors.Transaction.FeeError.TooLarge('expected less than ' + maximumFee + ' but got ' + unspent);\n    }\n  }\n\n  if (!opts.disableSmallFees) {\n    var minimumFee = Math.ceil(this._estimateFee() / Transaction.FEE_SECURITY_MARGIN);\n\n    if (unspent < minimumFee) {\n      return new errors.Transaction.FeeError.TooSmall('expected more than ' + minimumFee + ' but got ' + unspent);\n    }\n  }\n};\n\nTransaction.prototype._missingChange = function () {\n  return !this._changeScript;\n};\n\nTransaction.prototype._hasDustOutputs = function (opts) {\n  if (opts.disableDustOutputs) {\n    return;\n  }\n\n  var index, output;\n\n  for (index in this.outputs) {\n    output = this.outputs[index];\n\n    if (output.satoshis < Transaction.DUST_AMOUNT && !output.script.isDataOut()) {\n      return new errors.Transaction.DustOutputs();\n    }\n  }\n};\n\nTransaction.prototype._isMissingSignatures = function (opts) {\n  if (opts.disableIsFullySigned) {\n    return;\n  }\n\n  if (!this.isFullySigned()) {\n    return new errors.Transaction.MissingSignatures();\n  }\n};\n\nTransaction.prototype.inspect = function () {\n  return '<Transaction: ' + this.uncheckedSerialize() + '>';\n};\n\nTransaction.prototype.toBuffer = function (noWitness) {\n  var writer = new BufferWriter();\n  return this.toBufferWriter(writer, noWitness).toBuffer();\n};\n\nTransaction.prototype.hasWitnesses = function () {\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].hasWitnesses()) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nTransaction.prototype.toBufferWriter = function (writer, noWitness) {\n  writer.writeInt32LE(this.version);\n  var hasWitnesses = this.hasWitnesses();\n\n  if (hasWitnesses && !noWitness) {\n    writer.write(Buffer.from('0001', 'hex'));\n  }\n\n  writer.writeVarintNum(this.inputs.length);\n\n  _.each(this.inputs, function (input) {\n    input.toBufferWriter(writer);\n  });\n\n  writer.writeVarintNum(this.outputs.length);\n\n  _.each(this.outputs, function (output) {\n    output.toBufferWriter(writer);\n  });\n\n  if (hasWitnesses && !noWitness) {\n    _.each(this.inputs, function (input) {\n      var witnesses = input.getWitnesses();\n      writer.writeVarintNum(witnesses.length);\n\n      for (var j = 0; j < witnesses.length; j++) {\n        writer.writeVarintNum(witnesses[j].length);\n        writer.write(witnesses[j]);\n      }\n    });\n  }\n\n  writer.writeUInt32LE(this.nLockTime);\n  return writer;\n};\n\nTransaction.prototype.fromBuffer = function (buffer) {\n  var reader = new BufferReader(buffer);\n  return this.fromBufferReader(reader);\n};\n\nTransaction.prototype.fromBufferReader = function (reader) {\n  $.checkArgument(!reader.finished(), 'No transaction data received');\n  this.version = reader.readInt32LE();\n  var sizeTxIns = reader.readVarintNum(); // check for segwit\n\n  var hasWitnesses = false;\n\n  if (sizeTxIns === 0 && reader.buf[reader.pos] !== 0) {\n    reader.pos += 1;\n    hasWitnesses = true;\n    sizeTxIns = reader.readVarintNum();\n  }\n\n  for (var i = 0; i < sizeTxIns; i++) {\n    var input = Input.fromBufferReader(reader);\n    this.inputs.push(input);\n  }\n\n  var sizeTxOuts = reader.readVarintNum();\n\n  for (var j = 0; j < sizeTxOuts; j++) {\n    this.outputs.push(Output.fromBufferReader(reader));\n  }\n\n  if (hasWitnesses) {\n    for (var k = 0; k < sizeTxIns; k++) {\n      var itemCount = reader.readVarintNum();\n      var witnesses = [];\n\n      for (var l = 0; l < itemCount; l++) {\n        var size = reader.readVarintNum();\n        var item = reader.read(size);\n        witnesses.push(item);\n      }\n\n      this.inputs[k].setWitnesses(witnesses);\n    }\n  }\n\n  this.nLockTime = reader.readUInt32LE();\n  return this;\n};\n\nTransaction.prototype.toObject = Transaction.prototype.toJSON = function toObject() {\n  var inputs = [];\n  this.inputs.forEach(function (input) {\n    inputs.push(input.toObject());\n  });\n  var outputs = [];\n  this.outputs.forEach(function (output) {\n    outputs.push(output.toObject());\n  });\n  var obj = {\n    hash: this.hash,\n    version: this.version,\n    inputs: inputs,\n    outputs: outputs,\n    nLockTime: this.nLockTime\n  };\n\n  if (this._changeScript) {\n    obj.changeScript = this._changeScript.toString();\n  }\n\n  if (!_.isUndefined(this._changeIndex)) {\n    obj.changeIndex = this._changeIndex;\n  }\n\n  if (!_.isUndefined(this._fee)) {\n    obj.fee = this._fee;\n  }\n\n  return obj;\n};\n\nTransaction.prototype.fromObject = function fromObject(arg, opts) {\n  /* jshint maxstatements: 20 */\n  $.checkArgument(_.isObject(arg) || arg instanceof Transaction);\n  var self = this;\n  var transaction;\n\n  if (arg instanceof Transaction) {\n    transaction = transaction.toObject();\n  } else {\n    transaction = arg;\n  }\n\n  _.each(transaction.inputs, function (input) {\n    if (!input.output || !input.output.script) {\n      self.uncheckedAddInput(new Input(input));\n      return;\n    }\n\n    var script = new Script(input.output.script);\n    var txin;\n\n    if ((script.isScriptHashOut() || script.isWitnessScriptHashOut()) && input.publicKeys && input.threshold) {\n      txin = new Input.MultiSigScriptHash(input, input.publicKeys, input.threshold, input.signatures, opts);\n    } else if (script.isPublicKeyHashOut() || script.isWitnessPublicKeyHashOut() || script.isScriptHashOut()) {\n      txin = new Input.PublicKeyHash(input);\n    } else if (script.isPublicKeyOut()) {\n      txin = new Input.PublicKey(input);\n    } else {\n      throw new errors.Transaction.Input.UnsupportedScript(input.output.script);\n    }\n\n    self.addInput(txin);\n  });\n\n  _.each(transaction.outputs, function (output) {\n    self.addOutput(new Output(output));\n  });\n\n  if (transaction.changeIndex) {\n    this._changeIndex = transaction.changeIndex;\n  }\n\n  if (transaction.changeScript) {\n    this._changeScript = new Script(transaction.changeScript);\n  }\n\n  if (transaction.fee) {\n    this._fee = transaction.fee;\n  }\n\n  this.nLockTime = transaction.nLockTime;\n  this.version = transaction.version;\n\n  this._checkConsistency(arg);\n\n  return this;\n};\n\nTransaction.prototype._checkConsistency = function (arg) {\n  if (!_.isUndefined(this._changeIndex)) {\n    $.checkState(this._changeScript, 'Change script is expected.');\n    $.checkState(this.outputs[this._changeIndex], 'Change index points to undefined output.');\n    $.checkState(this.outputs[this._changeIndex].script.toString() === this._changeScript.toString(), 'Change output has an unexpected script.');\n  }\n\n  if (arg && arg.hash) {\n    $.checkState(arg.hash === this.hash, 'Hash in object does not match transaction hash.');\n  }\n};\n/**\n * Sets nLockTime so that transaction is not valid until the desired date(a\n * timestamp in seconds since UNIX epoch is also accepted)\n *\n * @param {Date | Number} time\n * @return {Transaction} this\n */\n\n\nTransaction.prototype.lockUntilDate = function (time) {\n  $.checkArgument(time);\n\n  if (_.isNumber(time) && time < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.LockTimeTooEarly();\n  }\n\n  if (_.isDate(time)) {\n    time = time.getTime() / 1000;\n  }\n\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER) {\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n\n  this.nLockTime = time;\n  return this;\n};\n/**\n * Sets nLockTime so that transaction is not valid until the desired block\n * height.\n *\n * @param {Number} height\n * @return {Transaction} this\n */\n\n\nTransaction.prototype.lockUntilBlockHeight = function (height) {\n  $.checkArgument(_.isNumber(height));\n\n  if (height >= Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.BlockHeightTooHigh();\n  }\n\n  if (height < 0) {\n    throw new errors.Transaction.NLockTimeOutOfRange();\n  }\n\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER) {\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n\n  this.nLockTime = height;\n  return this;\n};\n/**\n *  Returns a semantic version of the transaction's nLockTime.\n *  @return {Number|Date}\n *  If nLockTime is 0, it returns null,\n *  if it is < 500000000, it returns a block height (number)\n *  else it returns a Date object.\n */\n\n\nTransaction.prototype.getLockTime = function () {\n  if (!this.nLockTime) {\n    return null;\n  }\n\n  if (this.nLockTime < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    return this.nLockTime;\n  }\n\n  return new Date(1000 * this.nLockTime);\n};\n\nTransaction.prototype.fromString = function (string) {\n  return this.fromBuffer(Buffer.from(string, 'hex'));\n};\n\nTransaction.prototype._newTransaction = function () {\n  this.version = CURRENT_VERSION;\n  this.nLockTime = DEFAULT_NLOCKTIME;\n};\n/* Transaction creation interface */\n\n/**\n * @typedef {Object} Transaction~fromObject\n * @property {string} prevTxId\n * @property {number} outputIndex\n * @property {(Buffer|string|Script)} script\n * @property {number} satoshis\n */\n\n/**\n * Add an input to this transaction. This is a high level interface\n * to add an input, for more control, use @{link Transaction#addInput}.\n *\n * Can receive, as output information, the output of bitcoind's `listunspent` command,\n * and a slightly fancier format recognized by bitcore:\n *\n * ```\n * {\n *  address: 'mszYqVnqKoQx4jcTdJXxwKAissE3Jbrrc1',\n *  txId: 'a477af6b2667c29670467e4e0728b685ee07b240235771862318e29ddbe58458',\n *  outputIndex: 0,\n *  script: Script.empty(),\n *  satoshis: 1020000\n * }\n * ```\n * Where `address` can be either a string or a bitcore Address object. The\n * same is true for `script`, which can be a string or a bitcore Script.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @example\n * ```javascript\n * var transaction = new Transaction();\n *\n * // From a pay to public key hash output from bitcoind's listunspent\n * transaction.from({'txid': '0000...', vout: 0, amount: 0.1, scriptPubKey: 'OP_DUP ...'});\n *\n * // From a pay to public key hash output\n * transaction.from({'txId': '0000...', outputIndex: 0, satoshis: 1000, script: 'OP_DUP ...'});\n *\n * // From a multisig P2SH output\n * transaction.from({'txId': '0000...', inputIndex: 0, satoshis: 1000, script: '... OP_HASH'},\n *                  ['03000...', '02000...'], 2);\n * ```\n *\n * @param {(Array.<Transaction~fromObject>|Transaction~fromObject)} utxo\n * @param {Array=} pubkeys\n * @param {number=} threshold\n * @param {Object=} opts - Several options:\n *        - noSorting: defaults to false, if true and is multisig, don't\n *                      sort the given public keys before creating the script\n */\n\n\nTransaction.prototype.from = function (utxo, pubkeys, threshold, opts) {\n  if (_.isArray(utxo)) {\n    var self = this;\n\n    _.each(utxo, function (utxo) {\n      self.from(utxo, pubkeys, threshold, opts);\n    });\n\n    return this;\n  }\n\n  var exists = _.some(this.inputs, function (input) {\n    // TODO: Maybe prevTxId should be a string? Or defined as read only property?\n    return input.prevTxId.toString('hex') === utxo.txId && input.outputIndex === utxo.outputIndex;\n  });\n\n  if (exists) {\n    return this;\n  }\n\n  if (pubkeys && threshold) {\n    this._fromMultisigUtxo(utxo, pubkeys, threshold, opts);\n  } else {\n    this._fromNonP2SH(utxo);\n  }\n\n  return this;\n};\n/**\n * associateInputs - Update inputs with utxos, allowing you to specify value, and pubkey.\n * Populating these inputs allows for them to be signed with .sign(privKeys)\n *\n * @param {Array<Object>} utxos\n * @param {Array<string | PublicKey>} pubkeys\n * @param {number} threshold\n * @param {Object} opts\n * @returns {Array<number>}\n */\n\n\nTransaction.prototype.associateInputs = function (utxos, pubkeys, threshold, opts) {\n  let indexes = [];\n\n  for (let utxo of utxos) {\n    const index = this.inputs.findIndex(i => i.prevTxId.toString('hex') === utxo.txId && i.outputIndex === utxo.outputIndex);\n    indexes.push(index);\n\n    if (index >= 0) {\n      this.inputs[index] = this._getInputFrom(utxo, pubkeys, threshold, opts);\n    }\n  }\n\n  return indexes;\n};\n\nTransaction.prototype._selectInputType = function (utxo, pubkeys, threshold) {\n  var clazz;\n  utxo = new UnspentOutput(utxo);\n\n  if (pubkeys && threshold) {\n    if (utxo.script.isMultisigOut()) {\n      clazz = MultiSigInput;\n    } else if (utxo.script.isScriptHashOut() || utxo.script.isWitnessScriptHashOut()) {\n      clazz = MultiSigScriptHashInput;\n    }\n  } else if (utxo.script.isPublicKeyHashOut() || utxo.script.isWitnessPublicKeyHashOut() || utxo.script.isScriptHashOut()) {\n    clazz = PublicKeyHashInput;\n  } else if (utxo.script.isPublicKeyOut()) {\n    clazz = PublicKeyInput;\n  } else {\n    clazz = Input;\n  }\n\n  return clazz;\n};\n\nTransaction.prototype._getInputFrom = function (utxo, pubkeys, threshold, opts) {\n  utxo = new UnspentOutput(utxo);\n\n  const InputClass = this._selectInputType(utxo, pubkeys, threshold);\n\n  const input = {\n    output: new Output({\n      script: utxo.script,\n      satoshis: utxo.satoshis\n    }),\n    prevTxId: utxo.txId,\n    outputIndex: utxo.outputIndex,\n    sequenceNumber: utxo.sequenceNumber,\n    script: Script.empty()\n  };\n  let args = pubkeys && threshold ? [pubkeys, threshold, false, opts] : [];\n  return new InputClass(input, ...args);\n};\n\nTransaction.prototype._fromNonP2SH = function (utxo) {\n  const input = this._getInputFrom(utxo);\n\n  this.addInput(input);\n};\n\nTransaction.prototype._fromMultisigUtxo = function (utxo, pubkeys, threshold, opts) {\n  $.checkArgument(threshold <= pubkeys.length, 'Number of required signatures must be greater than the number of public keys');\n\n  const input = this._getInputFrom(utxo, pubkeys, threshold, opts);\n\n  this.addInput(input);\n};\n/**\n * Add an input to this transaction. The input must be an instance of the `Input` class.\n * It should have information about the Output that it's spending, but if it's not already\n * set, two additional parameters, `outputScript` and `satoshis` can be provided.\n *\n * @param {Input} input\n * @param {String|Script} outputScript\n * @param {number} satoshis\n * @return Transaction this, for chaining\n */\n\n\nTransaction.prototype.addInput = function (input, outputScript, satoshis) {\n  $.checkArgumentType(input, Input, 'input');\n\n  if (!input.output && (_.isUndefined(outputScript) || _.isUndefined(satoshis))) {\n    throw new errors.Transaction.NeedMoreInfo('Need information about the UTXO script and satoshis');\n  }\n\n  if (!input.output && outputScript && !_.isUndefined(satoshis)) {\n    outputScript = outputScript instanceof Script ? outputScript : new Script(outputScript);\n    $.checkArgumentType(satoshis, 'number', 'satoshis');\n    input.output = new Output({\n      script: outputScript,\n      satoshis: satoshis\n    });\n  }\n\n  return this.uncheckedAddInput(input);\n};\n/**\n * Add an input to this transaction, without checking that the input has information about\n * the output that it's spending.\n *\n * @param {Input} input\n * @return Transaction this, for chaining\n */\n\n\nTransaction.prototype.uncheckedAddInput = function (input) {\n  $.checkArgumentType(input, Input, 'input');\n  this.inputs.push(input);\n  this._inputAmount = undefined;\n\n  this._updateChangeOutput();\n\n  return this;\n};\n/**\n * Returns true if the transaction has enough info on all inputs to be correctly validated\n *\n * @return {boolean}\n */\n\n\nTransaction.prototype.hasAllUtxoInfo = function () {\n  return _.every(this.inputs.map(function (input) {\n    return !!input.output;\n  }));\n};\n/**\n * Manually set the fee for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n *\n * @param {number} amount satoshis to be sent\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.fee = function (amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._fee = amount;\n\n  this._updateChangeOutput();\n\n  return this;\n};\n/**\n * Manually set the fee per KB for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n *\n * @param {number} amount satoshis per KB to be sent\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.feePerKb = function (amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._feePerKb = amount;\n\n  this._updateChangeOutput();\n\n  return this;\n};\n/**\n * Manually set the fee per Byte for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n * fee per Byte will be ignored if fee per KB is set\n *\n * @param {number} amount satoshis per Byte to be sent\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.feePerByte = function (amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._feePerByte = amount;\n\n  this._updateChangeOutput();\n\n  return this;\n};\n/* Output management */\n\n/**\n * Set the change address for this transaction\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {Address} address An address for change to be sent to.\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.change = function (address) {\n  $.checkArgument(address, 'address is required');\n  this._changeScript = Script.fromAddress(address);\n\n  this._updateChangeOutput();\n\n  return this;\n};\n/**\n * @return {Output} change output, if it exists\n */\n\n\nTransaction.prototype.getChangeOutput = function () {\n  if (!_.isUndefined(this._changeIndex)) {\n    return this.outputs[this._changeIndex];\n  }\n\n  return null;\n};\n/**\n * @typedef {Object} Transaction~toObject\n * @property {(string|Address)} address\n * @property {number} satoshis\n */\n\n/**\n * Add an output to the transaction.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {(string|Address|Array.<Transaction~toObject>)} address\n * @param {number} amount in satoshis\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.to = function (address, amount) {\n  if (_.isArray(address)) {\n    var self = this;\n\n    _.each(address, function (to) {\n      self.to(to.address, to.satoshis);\n    });\n\n    return this;\n  }\n\n  $.checkArgument(JSUtil.isNaturalNumber(amount), 'Amount is expected to be a positive integer');\n  this.addOutput(new Output({\n    script: Script(new Address(address)),\n    satoshis: amount\n  }));\n  return this;\n};\n/**\n * Add an OP_RETURN output to the transaction.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {Buffer|string} value the data to be stored in the OP_RETURN output.\n *    In case of a string, the UTF-8 representation will be stored\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.addData = function (value) {\n  this.addOutput(new Output({\n    script: Script.buildDataOut(value),\n    satoshis: 0\n  }));\n  return this;\n};\n/**\n * Add an output to the transaction.\n *\n * @param {Output} output the output to add.\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.addOutput = function (output) {\n  $.checkArgumentType(output, Output, 'output');\n\n  this._addOutput(output);\n\n  this._updateChangeOutput();\n\n  return this;\n};\n/**\n * Remove all outputs from the transaction.\n *\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.clearOutputs = function () {\n  this.outputs = [];\n\n  this._clearSignatures();\n\n  this._outputAmount = undefined;\n  this._changeIndex = undefined;\n\n  this._updateChangeOutput();\n\n  return this;\n};\n\nTransaction.prototype._addOutput = function (output) {\n  this.outputs.push(output);\n  this._outputAmount = undefined;\n};\n/**\n * Calculates or gets the total output amount in satoshis\n *\n * @return {Number} the transaction total output amount\n */\n\n\nTransaction.prototype._getOutputAmount = function () {\n  if (_.isUndefined(this._outputAmount)) {\n    var self = this;\n    this._outputAmount = 0;\n\n    _.each(this.outputs, function (output) {\n      self._outputAmount += output.satoshis;\n    });\n  }\n\n  return this._outputAmount;\n};\n/**\n * Calculates or gets the total input amount in satoshis\n *\n * @return {Number} the transaction total input amount\n */\n\n\nTransaction.prototype._getInputAmount = function () {\n  if (_.isUndefined(this._inputAmount)) {\n    this._inputAmount = _.sumBy(this.inputs, function (input) {\n      if (_.isUndefined(input.output)) {\n        throw new errors.Transaction.Input.MissingPreviousOutput();\n      }\n\n      return input.output.satoshis;\n    });\n  }\n\n  return this._inputAmount;\n};\n\nTransaction.prototype._updateChangeOutput = function () {\n  if (!this._changeScript) {\n    return;\n  }\n\n  this._clearSignatures();\n\n  if (!_.isUndefined(this._changeIndex)) {\n    this._removeOutput(this._changeIndex);\n  }\n\n  var available = this._getUnspentValue();\n\n  var fee = this.getFee();\n  var changeAmount = available - fee;\n\n  if (changeAmount > Transaction.DUST_AMOUNT) {\n    this._changeIndex = this.outputs.length;\n\n    this._addOutput(new Output({\n      script: this._changeScript,\n      satoshis: changeAmount\n    }));\n  } else {\n    this._changeIndex = undefined;\n  }\n};\n/**\n * Calculates the fee of the transaction.\n *\n * If there's a fixed fee set, return that.\n *\n * If there is no change output set, the fee is the\n * total value of the outputs minus inputs. Note that\n * a serialized transaction only specifies the value\n * of its outputs. (The value of inputs are recorded\n * in the previous transaction outputs being spent.)\n * This method therefore raises a \"MissingPreviousOutput\"\n * error when called on a serialized transaction.\n *\n * If there's no fee set and no change address,\n * estimate the fee based on size.\n *\n * @return {Number} fee of this transaction in satoshis\n */\n\n\nTransaction.prototype.getFee = function () {\n  if (this.isCoinbase()) {\n    return 0;\n  }\n\n  if (!_.isUndefined(this._fee)) {\n    return this._fee;\n  } // if no change output is set, fees should equal all the unspent amount\n\n\n  if (!this._changeScript) {\n    return this._getUnspentValue();\n  }\n\n  return this._estimateFee();\n};\n/**\n * Estimates fee from serialized transaction size in bytes.\n */\n\n\nTransaction.prototype._estimateFee = function () {\n  var estimatedSize = this._estimateSize();\n\n  var available = this._getUnspentValue();\n\n  var feeRate = this._feePerByte || (this._feePerKb || Transaction.FEE_PER_KB) / 1000;\n\n  function getFee(size) {\n    return size * feeRate;\n  }\n\n  var fee = Math.ceil(getFee(estimatedSize));\n  var feeWithChange = Math.ceil(getFee(estimatedSize) + getFee(Transaction.CHANGE_OUTPUT_MAX_SIZE));\n\n  if (!this._changeScript || available <= feeWithChange) {\n    return fee;\n  }\n\n  return feeWithChange;\n};\n\nTransaction.prototype._getUnspentValue = function () {\n  return this._getInputAmount() - this._getOutputAmount();\n};\n\nTransaction.prototype._clearSignatures = function () {\n  _.each(this.inputs, function (input) {\n    input.clearSignatures();\n  });\n};\n\nTransaction.prototype._estimateSize = function () {\n  var result = Transaction.MAXIMUM_EXTRA_SIZE;\n\n  _.each(this.inputs, function (input) {\n    result += 32 + 4; // prevout size:w\n\n    result += input._estimateSize();\n  });\n\n  _.each(this.outputs, function (output) {\n    result += output.script.toBuffer().length + 9;\n  });\n\n  return Math.ceil(result);\n};\n\nTransaction.prototype._removeOutput = function (index) {\n  var output = this.outputs[index];\n  this.outputs = _.without(this.outputs, output);\n  this._outputAmount = undefined;\n};\n\nTransaction.prototype.removeOutput = function (index) {\n  this._removeOutput(index);\n\n  this._updateChangeOutput();\n};\n/**\n * Sort a transaction's inputs and outputs according to BIP69\n *\n * @see {https://github.com/bitcoin/bips/blob/master/bip-0069.mediawiki}\n * @return {Transaction} this\n */\n\n\nTransaction.prototype.sort = function () {\n  this.sortInputs(function (inputs) {\n    var copy = Array.prototype.concat.apply([], inputs);\n    let i = 0;\n    copy.forEach(x => {\n      x.i = i++;\n    });\n    copy.sort(function (first, second) {\n      return compare(first.prevTxId, second.prevTxId) || first.outputIndex - second.outputIndex || first.i - second.i; // to ensure stable sort\n    });\n    return copy;\n  });\n  this.sortOutputs(function (outputs) {\n    var copy = Array.prototype.concat.apply([], outputs);\n    let i = 0;\n    copy.forEach(x => {\n      x.i = i++;\n    });\n    copy.sort(function (first, second) {\n      return first.satoshis - second.satoshis || compare(first.script.toBuffer(), second.script.toBuffer()) || first.i - second.i; // to ensure stable sort\n    });\n    return copy;\n  });\n  return this;\n};\n/**\n * Randomize this transaction's outputs ordering. The shuffling algorithm is a\n * version of the Fisher-Yates shuffle, provided by lodash's _.shuffle().\n *\n * @return {Transaction} this\n */\n\n\nTransaction.prototype.shuffleOutputs = function () {\n  return this.sortOutputs(_.shuffle);\n};\n/**\n * Sort this transaction's outputs, according to a given sorting function that\n * takes an array as argument and returns a new array, with the same elements\n * but with a different order. The argument function MUST NOT modify the order\n * of the original array\n *\n * @param {Function} sortingFunction\n * @return {Transaction} this\n */\n\n\nTransaction.prototype.sortOutputs = function (sortingFunction) {\n  var outs = sortingFunction(this.outputs);\n  return this._newOutputOrder(outs);\n};\n/**\n * Sort this transaction's inputs, according to a given sorting function that\n * takes an array as argument and returns a new array, with the same elements\n * but with a different order.\n *\n * @param {Function} sortingFunction\n * @return {Transaction} this\n */\n\n\nTransaction.prototype.sortInputs = function (sortingFunction) {\n  this.inputs = sortingFunction(this.inputs);\n\n  this._clearSignatures();\n\n  return this;\n};\n\nTransaction.prototype._newOutputOrder = function (newOutputs) {\n  var isInvalidSorting = this.outputs.length !== newOutputs.length || _.difference(this.outputs, newOutputs).length !== 0;\n\n  if (isInvalidSorting) {\n    throw new errors.Transaction.InvalidSorting();\n  }\n\n  if (!_.isUndefined(this._changeIndex)) {\n    var changeOutput = this.outputs[this._changeIndex];\n    this._changeIndex = _.findIndex(newOutputs, changeOutput);\n  }\n\n  this.outputs = newOutputs;\n  return this;\n};\n\nTransaction.prototype.removeInput = function (txId, outputIndex) {\n  var index;\n\n  if (!outputIndex && _.isNumber(txId)) {\n    index = txId;\n  } else {\n    index = _.findIndex(this.inputs, function (input) {\n      return input.prevTxId.toString('hex') === txId && input.outputIndex === outputIndex;\n    });\n  }\n\n  if (index < 0 || index >= this.inputs.length) {\n    throw new errors.Transaction.InvalidIndex(index, this.inputs.length);\n  }\n\n  var input = this.inputs[index];\n  this.inputs = _.without(this.inputs, input);\n  this._inputAmount = undefined;\n\n  this._updateChangeOutput();\n};\n/* Signature handling */\n\n/**\n * Sign the transaction using one or more private keys.\n *\n * It tries to sign each input, verifying that the signature will be valid\n * (matches a public key).\n *\n * @param {Array|String|PrivateKey} privateKey\n * @param {number} sigtype\n * @param {String} signingMethod - method used to sign - 'ecdsa' or 'schnorr'\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.sign = function (privateKey, sigtype, signingMethod) {\n  $.checkState(this.hasAllUtxoInfo(), 'Not all utxo information is available to sign the transaction.');\n  var self = this;\n\n  if (_.isArray(privateKey)) {\n    _.each(privateKey, function (privateKey) {\n      self.sign(privateKey, sigtype, signingMethod);\n    });\n\n    return this;\n  }\n\n  _.each(this.getSignatures(privateKey, sigtype, signingMethod), function (signature) {\n    self.applySignature(signature, signingMethod);\n  });\n\n  return this;\n};\n\nTransaction.prototype.getSignatures = function (privKey, sigtype, signingMethod) {\n  privKey = new PrivateKey(privKey);\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n  var transaction = this;\n  var results = [];\n  var hashData = Hash.sha256ripemd160(privKey.publicKey.toBuffer());\n\n  _.each(this.inputs, function forEachInput(input, index) {\n    _.each(input.getSignatures(transaction, privKey, index, sigtype, hashData, signingMethod), function (signature) {\n      results.push(signature);\n    });\n  });\n\n  return results;\n};\n/**\n * Add a signature to the transaction\n *\n * @param {Object} signature\n * @param {number} signature.inputIndex\n * @param {number} signature.sigtype\n * @param {PublicKey} signature.publicKey\n * @param {Signature} signature.signature\n * @param {String} signingMethod - 'ecdsa' to sign transaction\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.applySignature = function (signature, signingMethod) {\n  this.inputs[signature.inputIndex].addSignature(this, signature, signingMethod);\n  return this;\n};\n\nTransaction.prototype.isFullySigned = function () {\n  _.each(this.inputs, function (input) {\n    if (input.isFullySigned === Input.prototype.isFullySigned) {\n      throw new errors.Transaction.UnableToVerifySignature('Unrecognized script kind, or not enough information to execute script.' + 'This usually happens when creating a transaction from a serialized transaction');\n    }\n  });\n\n  return _.every(_.map(this.inputs, function (input) {\n    return input.isFullySigned();\n  }));\n};\n\nTransaction.prototype.isValidSignature = function (signature, signingMethod) {\n  var self = this;\n\n  if (this.inputs[signature.inputIndex].isValidSignature === Input.prototype.isValidSignature) {\n    throw new errors.Transaction.UnableToVerifySignature('Unrecognized script kind, or not enough information to execute script.' + 'This usually happens when creating a transaction from a serialized transaction');\n  }\n\n  return this.inputs[signature.inputIndex].isValidSignature(self, signature, signingMethod);\n};\n/**\n * @param {String} signingMethod method used to sign - 'ecdsa' or 'schnorr' (future signing method)\n * @returns {bool} whether the signature is valid for this transaction input\n */\n\n\nTransaction.prototype.verifySignature = function (sig, pubkey, nin, subscript, sigversion, satoshis, signingMethod) {\n  if (_.isUndefined(sigversion)) {\n    sigversion = 0;\n  }\n\n  if (sigversion === Interpreter.SIGVERSION_WITNESS_V0) {\n    var subscriptBuffer = subscript.toBuffer();\n    var scriptCodeWriter = new BufferWriter();\n    scriptCodeWriter.writeVarintNum(subscriptBuffer.length);\n    scriptCodeWriter.write(subscriptBuffer);\n    var satoshisBuffer;\n\n    if (satoshis) {\n      $.checkState(JSUtil.isNaturalNumber(satoshis));\n      satoshisBuffer = new BufferWriter().writeUInt64LEBN(new BN(satoshis)).toBuffer();\n    } else {\n      satoshisBuffer = this.inputs[nin].getSatoshisBuffer();\n    }\n\n    var verified = SighashWitness.verify(this, sig, pubkey, nin, scriptCodeWriter.toBuffer(), satoshisBuffer, signingMethod);\n    return verified;\n  }\n\n  return Sighash.verify(this, sig, pubkey, nin, subscript, signingMethod);\n};\n/**\n * Check that a transaction passes basic sanity tests. If not, return a string\n * describing the error. This function contains the same logic as\n * CheckTransaction in bitcoin core.\n */\n\n\nTransaction.prototype.verify = function () {\n  // Basic checks that don't depend on any context\n  if (this.inputs.length === 0) {\n    return 'transaction txins empty';\n  }\n\n  if (this.outputs.length === 0) {\n    return 'transaction txouts empty';\n  } // Check for negative or overflow output values\n\n\n  var valueoutbn = new BN(0);\n\n  for (var i = 0; i < this.outputs.length; i++) {\n    var txout = this.outputs[i];\n\n    if (txout.invalidSatoshis()) {\n      return 'transaction txout ' + i + ' satoshis is invalid';\n    }\n\n    if (txout._satoshisBN.gt(new BN(Transaction.MAX_MONEY, 10))) {\n      return 'transaction txout ' + i + ' greater than MAX_MONEY';\n    }\n\n    valueoutbn = valueoutbn.add(txout._satoshisBN);\n\n    if (valueoutbn.gt(new BN(Transaction.MAX_MONEY))) {\n      return 'transaction txout ' + i + ' total output greater than MAX_MONEY';\n    }\n  } // Size limits\n\n\n  if (this.toBuffer().length > MAX_BLOCK_SIZE) {\n    return 'transaction over the maximum block size';\n  } // Check for duplicate inputs\n\n\n  var txinmap = {};\n\n  for (i = 0; i < this.inputs.length; i++) {\n    var txin = this.inputs[i];\n    var inputid = txin.prevTxId + ':' + txin.outputIndex;\n\n    if (!_.isUndefined(txinmap[inputid])) {\n      return 'transaction input ' + i + ' duplicate input';\n    }\n\n    txinmap[inputid] = true;\n  }\n\n  var isCoinbase = this.isCoinbase();\n\n  if (isCoinbase) {\n    var buf = this.inputs[0]._scriptBuffer;\n\n    if (buf.length < 2 || buf.length > 100) {\n      return 'coinbase transaction script size invalid';\n    }\n  } else {\n    for (i = 0; i < this.inputs.length; i++) {\n      if (this.inputs[i].isNull()) {\n        return 'transaction input ' + i + ' has null input';\n      }\n    }\n  }\n\n  return true;\n};\n/**\n * Analogous to bitcoind's IsCoinBase function in transaction.h\n */\n\n\nTransaction.prototype.isCoinbase = function () {\n  return this.inputs.length === 1 && this.inputs[0].isNull();\n};\n/**\n * Determines if this transaction can be replaced in the mempool with another\n * transaction that provides a sufficiently higher fee (RBF).\n */\n\n\nTransaction.prototype.isRBF = function () {\n  for (var i = 0; i < this.inputs.length; i++) {\n    var input = this.inputs[i];\n\n    if (input.sequenceNumber < Input.MAXINT - 1) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Enable this transaction to be replaced in the mempool (RBF) if a transaction\n * includes a sufficiently higher fee. It will set the sequenceNumber to\n * DEFAULT_RBF_SEQNUMBER for all inputs if the sequence number does not\n * already enable RBF.\n */\n\n\nTransaction.prototype.enableRBF = function () {\n  for (var i = 0; i < this.inputs.length; i++) {\n    var input = this.inputs[i];\n\n    if (input.sequenceNumber >= Input.MAXINT - 1) {\n      input.sequenceNumber = Input.DEFAULT_RBF_SEQNUMBER;\n    }\n  }\n\n  return this;\n};\n\nTransaction.prototype.setVersion = function (version) {\n  $.checkArgument(JSUtil.isNaturalNumber(version) && version <= CURRENT_VERSION, 'Wrong version number');\n  this.version = version;\n  return this;\n};\n\nmodule.exports = Transaction;","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/NFT_minter/node_modules/bitcore-lib-ltc/lib/transaction/transaction.js"],"names":["_","require","$","compare","Buffer","errors","BufferUtil","JSUtil","BufferReader","BufferWriter","Hash","Signature","Sighash","SighashWitness","Address","UnspentOutput","Input","PublicKeyHashInput","PublicKeyHash","PublicKeyInput","PublicKey","MultiSigScriptHashInput","MultiSigScriptHash","MultiSigInput","MultiSig","Output","Script","PrivateKey","BN","Interpreter","Transaction","serialized","opts","inputs","outputs","_inputAmount","undefined","_outputAmount","shallowCopy","isHexa","fromString","isBuffer","fromBuffer","isObject","fromObject","InvalidArgument","_newTransaction","CURRENT_VERSION","DEFAULT_NLOCKTIME","MAX_BLOCK_SIZE","DUST_AMOUNT","FEE_SECURITY_MARGIN","MAX_MONEY","NLOCKTIME_BLOCKHEIGHT_LIMIT","NLOCKTIME_MAX_VALUE","FEE_PER_KB","CHANGE_OUTPUT_MAX_SIZE","MAXIMUM_EXTRA_SIZE","transaction","copy","toBuffer","hashProperty","configurable","enumerable","get","_hash","_getHash","readReverse","toString","witnessHashProperty","_getWitnessHash","Object","defineProperty","prototype","ioProperty","_getInputAmount","_getOutputAmount","sha256sha256","serialize","unsafe","disableAll","uncheckedSerialize","checkedSerialize","serializationError","getSerializationError","message","invalidSatoshis","invalid","i","length","InvalidSatoshis","unspent","_getUnspentValue","unspentError","disableMoreOutputThanInput","InvalidOutputAmountSum","_hasFeeError","_hasDustOutputs","_isMissingSignatures","isUndefined","_fee","FeeError","Different","disableLargeFees","maximumFee","Math","floor","_estimateFee","_missingChange","ChangeAddressMissing","TooLarge","disableSmallFees","minimumFee","ceil","TooSmall","_changeScript","disableDustOutputs","index","output","satoshis","script","isDataOut","DustOutputs","disableIsFullySigned","isFullySigned","MissingSignatures","inspect","noWitness","writer","toBufferWriter","hasWitnesses","writeInt32LE","version","write","from","writeVarintNum","each","input","witnesses","getWitnesses","j","writeUInt32LE","nLockTime","buffer","reader","fromBufferReader","checkArgument","finished","readInt32LE","sizeTxIns","readVarintNum","buf","pos","push","sizeTxOuts","k","itemCount","l","size","item","read","setWitnesses","readUInt32LE","toObject","toJSON","forEach","obj","hash","changeScript","_changeIndex","changeIndex","fee","arg","self","uncheckedAddInput","txin","isScriptHashOut","isWitnessScriptHashOut","publicKeys","threshold","signatures","isPublicKeyHashOut","isWitnessPublicKeyHashOut","isPublicKeyOut","UnsupportedScript","addInput","addOutput","_checkConsistency","checkState","lockUntilDate","time","isNumber","LockTimeTooEarly","isDate","getTime","sequenceNumber","DEFAULT_SEQNUMBER","DEFAULT_LOCKTIME_SEQNUMBER","lockUntilBlockHeight","height","BlockHeightTooHigh","NLockTimeOutOfRange","getLockTime","Date","string","utxo","pubkeys","isArray","exists","some","prevTxId","txId","outputIndex","_fromMultisigUtxo","_fromNonP2SH","associateInputs","utxos","indexes","findIndex","_getInputFrom","_selectInputType","clazz","isMultisigOut","InputClass","empty","args","outputScript","checkArgumentType","NeedMoreInfo","_updateChangeOutput","hasAllUtxoInfo","every","map","amount","feePerKb","_feePerKb","feePerByte","_feePerByte","change","address","fromAddress","getChangeOutput","to","isNaturalNumber","addData","value","buildDataOut","_addOutput","clearOutputs","_clearSignatures","sumBy","MissingPreviousOutput","_removeOutput","available","getFee","changeAmount","isCoinbase","estimatedSize","_estimateSize","feeRate","feeWithChange","clearSignatures","result","without","removeOutput","sort","sortInputs","Array","concat","apply","x","first","second","sortOutputs","shuffleOutputs","shuffle","sortingFunction","outs","_newOutputOrder","newOutputs","isInvalidSorting","difference","InvalidSorting","changeOutput","removeInput","InvalidIndex","sign","privateKey","sigtype","signingMethod","getSignatures","signature","applySignature","privKey","SIGHASH_ALL","results","hashData","sha256ripemd160","publicKey","forEachInput","inputIndex","addSignature","UnableToVerifySignature","isValidSignature","verifySignature","sig","pubkey","nin","subscript","sigversion","SIGVERSION_WITNESS_V0","subscriptBuffer","scriptCodeWriter","satoshisBuffer","writeUInt64LEBN","getSatoshisBuffer","verified","verify","valueoutbn","txout","_satoshisBN","gt","add","txinmap","inputid","_scriptBuffer","isNull","isRBF","MAXINT","enableRBF","DEFAULT_RBF_SEQNUMBER","setVersion","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar $ = require('../util/preconditions');\nvar compare = Buffer.compare || require('buffer-compare');\n\nvar errors = require('../errors');\nvar BufferUtil = require('../util/buffer');\nvar JSUtil = require('../util/js');\nvar BufferReader = require('../encoding/bufferreader');\nvar BufferWriter = require('../encoding/bufferwriter');\nvar Hash = require('../crypto/hash');\nvar Signature = require('../crypto/signature');\nvar Sighash = require('./sighash');\nvar SighashWitness = require('./sighashwitness');\n\nvar Address = require('../address');\nvar UnspentOutput = require('./unspentoutput');\nvar Input = require('./input');\nvar PublicKeyHashInput = Input.PublicKeyHash;\nvar PublicKeyInput = Input.PublicKey;\nvar MultiSigScriptHashInput = Input.MultiSigScriptHash;\nvar MultiSigInput = Input.MultiSig;\nvar Output = require('./output');\nvar Script = require('../script');\nvar PrivateKey = require('../privatekey');\nvar BN = require('../crypto/bn');\nconst Interpreter = require('../script/interpreter');\n\n/**\n * Represents a transaction, a set of inputs and outputs to change ownership of tokens\n *\n * @param {*} serialized\n * @constructor\n */\nfunction Transaction(serialized, opts) {\n  if (!(this instanceof Transaction)) {\n    return new Transaction(serialized);\n  }\n  this.inputs = [];\n  this.outputs = [];\n  this._inputAmount = undefined;\n  this._outputAmount = undefined;\n\n  if (serialized) {\n    if (serialized instanceof Transaction) {\n      return Transaction.shallowCopy(serialized);\n    } else if (JSUtil.isHexa(serialized)) {\n      this.fromString(serialized);\n    } else if (BufferUtil.isBuffer(serialized)) {\n      this.fromBuffer(serialized);\n    } else if (_.isObject(serialized)) {\n      this.fromObject(serialized, opts);\n    } else {\n      throw new errors.InvalidArgument('Must provide an object or string to deserialize a transaction');\n    }\n  } else {\n    this._newTransaction();\n  }\n}\n\nvar CURRENT_VERSION = 2;\nvar DEFAULT_NLOCKTIME = 0;\nvar MAX_BLOCK_SIZE = 1000000;\n\n// Minimum amount for an output for it not to be considered a dust output\nTransaction.DUST_AMOUNT = 546;\n\n// Margin of error to allow fees in the vecinity of the expected value but doesn't allow a big difference\nTransaction.FEE_SECURITY_MARGIN = 15;\n\n// max amount of satoshis in circulation\nTransaction.MAX_MONEY = 84000000 * 1e8; // Litecoin has 84M coins\n\n// nlocktime limit to be considered block height rather than a timestamp\nTransaction.NLOCKTIME_BLOCKHEIGHT_LIMIT = 5e8;\n\n// Max value for an unsigned 32 bit value\nTransaction.NLOCKTIME_MAX_VALUE = 4294967295;\n\n// Value used for fee estimation (satoshis per kilobyte)\nTransaction.FEE_PER_KB = 100000; // Litecoin default fees is 0.001 LTC\n\n// Safe upper bound for change address script size in bytes\nTransaction.CHANGE_OUTPUT_MAX_SIZE = 20 + 4 + 34 + 4;\nTransaction.MAXIMUM_EXTRA_SIZE = 4 + 9 + 9 + 4;\n\n/* Constructors and Serialization */\n\n/**\n * Create a 'shallow' copy of the transaction, by serializing and deserializing\n * it dropping any additional information that inputs and outputs may have hold\n *\n * @param {Transaction} transaction\n * @return {Transaction}\n */\nTransaction.shallowCopy = function(transaction) {\n  var copy = new Transaction(transaction.toBuffer());\n  return copy;\n};\n\nvar hashProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function() {\n    this._hash = new BufferReader(this._getHash()).readReverse().toString('hex');\n    return this._hash;\n  }\n};\n\nvar witnessHashProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function() {\n    return new BufferReader(this._getWitnessHash()).readReverse().toString('hex');\n  }\n};\n\nObject.defineProperty(Transaction.prototype, 'witnessHash', witnessHashProperty);\nObject.defineProperty(Transaction.prototype, 'hash', hashProperty);\nObject.defineProperty(Transaction.prototype, 'id', hashProperty);\n\nvar ioProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function() {\n    return this._getInputAmount();\n  }\n};\nObject.defineProperty(Transaction.prototype, 'inputAmount', ioProperty);\nioProperty.get = function() {\n  return this._getOutputAmount();\n};\nObject.defineProperty(Transaction.prototype, 'outputAmount', ioProperty);\n\n/**\n * Retrieve the little endian hash of the transaction (used for serialization)\n * @return {Buffer}\n */\nTransaction.prototype._getHash = function() {\n  return Hash.sha256sha256(this.toBuffer(true));\n};\n\n/**\n * Retrieve the little endian hash of the transaction including witness data\n * @return {Buffer}\n */\nTransaction.prototype._getWitnessHash = function() {\n  return Hash.sha256sha256(this.toBuffer(false));\n};\n\n/**\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\n * (decoderawtransaction, sendrawtransaction)\n *\n * @param {Object|boolean=} unsafe if true, skip all tests. if it's an object,\n *   it's expected to contain a set of flags to skip certain tests:\n * * `disableAll`: disable all checks\n * * `disableSmallFees`: disable checking for fees that are too small\n * * `disableLargeFees`: disable checking for fees that are too large\n * * `disableIsFullySigned`: disable checking if all inputs are fully signed\n * * `disableDustOutputs`: disable checking if there are no outputs that are dust amounts\n * * `disableMoreOutputThanInput`: disable checking if the transaction spends more bitcoins than the sum of the input amounts\n * @return {string}\n */\nTransaction.prototype.serialize = function(unsafe) {\n  if (true === unsafe || unsafe && unsafe.disableAll) {\n    return this.uncheckedSerialize();\n  } else {\n    return this.checkedSerialize(unsafe);\n  }\n};\n\nTransaction.prototype.uncheckedSerialize = Transaction.prototype.toString = function() {\n  return this.toBuffer().toString('hex');\n};\n\n/**\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\n * (decoderawtransaction, sendrawtransaction)\n *\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\n * @return {string}\n */\nTransaction.prototype.checkedSerialize = function(opts) {\n  var serializationError = this.getSerializationError(opts);\n  if (serializationError) {\n    serializationError.message += ' Use Transaction#uncheckedSerialize if you want to skip security checks. ' +\n      'See http://litecore.io/guide/transaction.html#Serialization for more info.';\n    throw serializationError;\n  }\n  return this.uncheckedSerialize();\n};\n\nTransaction.prototype.invalidSatoshis = function() {\n  var invalid = false;\n  for (var i = 0; i < this.outputs.length; i++) {\n    if (this.outputs[i].invalidSatoshis()) {\n      invalid = true;\n    }\n  }\n  return invalid;\n};\n\n/**\n * Retrieve a possible error that could appear when trying to serialize and\n * broadcast this transaction.\n *\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\n * @return {bitcore.Error}\n */\nTransaction.prototype.getSerializationError = function(opts) {\n  opts = opts || {};\n\n  if (this.invalidSatoshis()) {\n    return new errors.Transaction.InvalidSatoshis();\n  }\n\n  var unspent = this._getUnspentValue();\n  var unspentError;\n  if (unspent < 0) {\n    if (!opts.disableMoreOutputThanInput) {\n      unspentError = new errors.Transaction.InvalidOutputAmountSum();\n    }\n  } else {\n    unspentError = this._hasFeeError(opts, unspent);\n  }\n\n  return unspentError ||\n    this._hasDustOutputs(opts) ||\n    this._isMissingSignatures(opts);\n};\n\nTransaction.prototype._hasFeeError = function(opts, unspent) {\n\n  if (!_.isUndefined(this._fee) && this._fee !== unspent) {\n    return new errors.Transaction.FeeError.Different(\n      'Unspent value is ' + unspent + ' but specified fee is ' + this._fee\n    );\n  }\n\n  if (!opts.disableLargeFees) {\n    var maximumFee = Math.floor(Transaction.FEE_SECURITY_MARGIN * this._estimateFee());\n    if (unspent > maximumFee) {\n      if (this._missingChange()) {\n        return new errors.Transaction.ChangeAddressMissing(\n          'Fee is too large and no change address was provided'\n        );\n      }\n      return new errors.Transaction.FeeError.TooLarge(\n        'expected less than ' + maximumFee + ' but got ' + unspent\n      );\n    }\n  }\n\n  if (!opts.disableSmallFees) {\n    var minimumFee = Math.ceil(this._estimateFee() / Transaction.FEE_SECURITY_MARGIN);\n    if (unspent < minimumFee) {\n      return new errors.Transaction.FeeError.TooSmall(\n        'expected more than ' + minimumFee + ' but got ' + unspent\n      );\n    }\n  }\n};\n\nTransaction.prototype._missingChange = function() {\n  return !this._changeScript;\n};\n\nTransaction.prototype._hasDustOutputs = function(opts) {\n  if (opts.disableDustOutputs) {\n    return;\n  }\n  var index, output;\n  for (index in this.outputs) {\n    output = this.outputs[index];\n    if (output.satoshis < Transaction.DUST_AMOUNT && !output.script.isDataOut()) {\n      return new errors.Transaction.DustOutputs();\n    }\n  }\n};\n\nTransaction.prototype._isMissingSignatures = function(opts) {\n  if (opts.disableIsFullySigned) {\n    return;\n  }\n  if (!this.isFullySigned()) {\n    return new errors.Transaction.MissingSignatures();\n  }\n};\n\nTransaction.prototype.inspect = function() {\n  return '<Transaction: ' + this.uncheckedSerialize() + '>';\n};\n\nTransaction.prototype.toBuffer = function(noWitness) {\n  var writer = new BufferWriter();\n  return this.toBufferWriter(writer, noWitness).toBuffer();\n};\n\nTransaction.prototype.hasWitnesses = function() {\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].hasWitnesses()) {\n      return true;\n    }\n  }\n  return false;\n};\n\nTransaction.prototype.toBufferWriter = function(writer, noWitness) {\n  writer.writeInt32LE(this.version);\n\n  var hasWitnesses = this.hasWitnesses();\n\n  if (hasWitnesses && !noWitness) {\n    writer.write(Buffer.from('0001', 'hex'));\n  }\n\n  writer.writeVarintNum(this.inputs.length);\n\n  _.each(this.inputs, function(input) {\n    input.toBufferWriter(writer);\n  });\n\n  writer.writeVarintNum(this.outputs.length);\n  _.each(this.outputs, function(output) {\n    output.toBufferWriter(writer);\n  });\n\n  if (hasWitnesses && !noWitness) {\n    _.each(this.inputs, function(input) {\n      var witnesses = input.getWitnesses();\n      writer.writeVarintNum(witnesses.length);\n      for (var j = 0; j < witnesses.length; j++) {\n        writer.writeVarintNum(witnesses[j].length);\n        writer.write(witnesses[j]);\n      }\n    });\n  }\n\n  writer.writeUInt32LE(this.nLockTime);\n  return writer;\n};\n\nTransaction.prototype.fromBuffer = function(buffer) {\n  var reader = new BufferReader(buffer);\n  return this.fromBufferReader(reader);\n};\n\nTransaction.prototype.fromBufferReader = function(reader) {\n  $.checkArgument(!reader.finished(), 'No transaction data received');\n\n  this.version = reader.readInt32LE();\n  var sizeTxIns = reader.readVarintNum();\n\n  // check for segwit\n  var hasWitnesses = false;\n  if (sizeTxIns === 0 && reader.buf[reader.pos] !== 0) {\n    reader.pos += 1;\n    hasWitnesses = true;\n    sizeTxIns = reader.readVarintNum();\n  }\n\n  for (var i = 0; i < sizeTxIns; i++) {\n    var input = Input.fromBufferReader(reader);\n    this.inputs.push(input);\n  }\n\n  var sizeTxOuts = reader.readVarintNum();\n  for (var j = 0; j < sizeTxOuts; j++) {\n    this.outputs.push(Output.fromBufferReader(reader));\n  }\n\n  if (hasWitnesses) {\n    for (var k = 0; k < sizeTxIns; k++) {\n      var itemCount = reader.readVarintNum();\n      var witnesses = [];\n      for (var l = 0; l < itemCount; l++) {\n        var size = reader.readVarintNum();\n        var item = reader.read(size);\n        witnesses.push(item);\n      }\n      this.inputs[k].setWitnesses(witnesses);\n    }\n  }\n\n  this.nLockTime = reader.readUInt32LE();\n  return this;\n};\n\n\nTransaction.prototype.toObject = Transaction.prototype.toJSON = function toObject() {\n  var inputs = [];\n  this.inputs.forEach(function(input) {\n    inputs.push(input.toObject());\n  });\n  var outputs = [];\n  this.outputs.forEach(function(output) {\n    outputs.push(output.toObject());\n  });\n  var obj = {\n    hash: this.hash,\n    version: this.version,\n    inputs: inputs,\n    outputs: outputs,\n    nLockTime: this.nLockTime\n  };\n  if (this._changeScript) {\n    obj.changeScript = this._changeScript.toString();\n  }\n  if (!_.isUndefined(this._changeIndex)) {\n    obj.changeIndex = this._changeIndex;\n  }\n  if (!_.isUndefined(this._fee)) {\n    obj.fee = this._fee;\n  }\n  return obj;\n};\n\nTransaction.prototype.fromObject = function fromObject(arg, opts) {\n  /* jshint maxstatements: 20 */\n  $.checkArgument(_.isObject(arg) || arg instanceof Transaction);\n  var self = this;\n  var transaction;\n  if (arg instanceof Transaction) {\n    transaction = transaction.toObject();\n  } else {\n    transaction = arg;\n  }\n  _.each(transaction.inputs, function(input) {\n    if (!input.output || !input.output.script) {\n      self.uncheckedAddInput(new Input(input));\n      return;\n    }\n    var script = new Script(input.output.script);\n    var txin;\n    if ((script.isScriptHashOut() || script.isWitnessScriptHashOut()) && input.publicKeys && input.threshold) {\n      txin = new Input.MultiSigScriptHash(\n        input, input.publicKeys, input.threshold, input.signatures, opts\n      );\n    } else if (script.isPublicKeyHashOut() || script.isWitnessPublicKeyHashOut() || script.isScriptHashOut()) {\n      txin = new Input.PublicKeyHash(input);\n    } else if (script.isPublicKeyOut()) {\n      txin = new Input.PublicKey(input);\n    } else {\n      throw new errors.Transaction.Input.UnsupportedScript(input.output.script);\n    }\n    self.addInput(txin);\n  });\n  _.each(transaction.outputs, function(output) {\n    self.addOutput(new Output(output));\n  });\n  if (transaction.changeIndex) {\n    this._changeIndex = transaction.changeIndex;\n  }\n  if (transaction.changeScript) {\n    this._changeScript = new Script(transaction.changeScript);\n  }\n  if (transaction.fee) {\n    this._fee = transaction.fee;\n  }\n  this.nLockTime = transaction.nLockTime;\n  this.version = transaction.version;\n  this._checkConsistency(arg);\n  return this;\n};\n\nTransaction.prototype._checkConsistency = function(arg) {\n  if (!_.isUndefined(this._changeIndex)) {\n    $.checkState(this._changeScript, 'Change script is expected.');\n    $.checkState(this.outputs[this._changeIndex], 'Change index points to undefined output.');\n    $.checkState(this.outputs[this._changeIndex].script.toString() ===\n      this._changeScript.toString(), 'Change output has an unexpected script.');\n  }\n  if (arg && arg.hash) {\n    $.checkState(arg.hash === this.hash, 'Hash in object does not match transaction hash.');\n  }\n};\n\n/**\n * Sets nLockTime so that transaction is not valid until the desired date(a\n * timestamp in seconds since UNIX epoch is also accepted)\n *\n * @param {Date | Number} time\n * @return {Transaction} this\n */\nTransaction.prototype.lockUntilDate = function(time) {\n  $.checkArgument(time);\n  if (_.isNumber(time) && time < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.LockTimeTooEarly();\n  }\n  if (_.isDate(time)) {\n    time = time.getTime() / 1000;\n  }\n\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER){\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n\n  this.nLockTime = time;\n  return this;\n};\n\n/**\n * Sets nLockTime so that transaction is not valid until the desired block\n * height.\n *\n * @param {Number} height\n * @return {Transaction} this\n */\nTransaction.prototype.lockUntilBlockHeight = function(height) {\n  $.checkArgument(_.isNumber(height));\n  if (height >= Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.BlockHeightTooHigh();\n  }\n  if (height < 0) {\n    throw new errors.Transaction.NLockTimeOutOfRange();\n  }\n\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER){\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n\n\n  this.nLockTime = height;\n  return this;\n};\n\n/**\n *  Returns a semantic version of the transaction's nLockTime.\n *  @return {Number|Date}\n *  If nLockTime is 0, it returns null,\n *  if it is < 500000000, it returns a block height (number)\n *  else it returns a Date object.\n */\nTransaction.prototype.getLockTime = function() {\n  if (!this.nLockTime) {\n    return null;\n  }\n  if (this.nLockTime < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    return this.nLockTime;\n  }\n  return new Date(1000 * this.nLockTime);\n};\n\nTransaction.prototype.fromString = function(string) {\n  return this.fromBuffer(Buffer.from(string, 'hex'));\n};\n\nTransaction.prototype._newTransaction = function() {\n  this.version = CURRENT_VERSION;\n  this.nLockTime = DEFAULT_NLOCKTIME;\n};\n\n/* Transaction creation interface */\n\n/**\n * @typedef {Object} Transaction~fromObject\n * @property {string} prevTxId\n * @property {number} outputIndex\n * @property {(Buffer|string|Script)} script\n * @property {number} satoshis\n */\n\n/**\n * Add an input to this transaction. This is a high level interface\n * to add an input, for more control, use @{link Transaction#addInput}.\n *\n * Can receive, as output information, the output of bitcoind's `listunspent` command,\n * and a slightly fancier format recognized by bitcore:\n *\n * ```\n * {\n *  address: 'mszYqVnqKoQx4jcTdJXxwKAissE3Jbrrc1',\n *  txId: 'a477af6b2667c29670467e4e0728b685ee07b240235771862318e29ddbe58458',\n *  outputIndex: 0,\n *  script: Script.empty(),\n *  satoshis: 1020000\n * }\n * ```\n * Where `address` can be either a string or a bitcore Address object. The\n * same is true for `script`, which can be a string or a bitcore Script.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @example\n * ```javascript\n * var transaction = new Transaction();\n *\n * // From a pay to public key hash output from bitcoind's listunspent\n * transaction.from({'txid': '0000...', vout: 0, amount: 0.1, scriptPubKey: 'OP_DUP ...'});\n *\n * // From a pay to public key hash output\n * transaction.from({'txId': '0000...', outputIndex: 0, satoshis: 1000, script: 'OP_DUP ...'});\n *\n * // From a multisig P2SH output\n * transaction.from({'txId': '0000...', inputIndex: 0, satoshis: 1000, script: '... OP_HASH'},\n *                  ['03000...', '02000...'], 2);\n * ```\n *\n * @param {(Array.<Transaction~fromObject>|Transaction~fromObject)} utxo\n * @param {Array=} pubkeys\n * @param {number=} threshold\n * @param {Object=} opts - Several options:\n *        - noSorting: defaults to false, if true and is multisig, don't\n *                      sort the given public keys before creating the script\n */\nTransaction.prototype.from = function(utxo, pubkeys, threshold, opts) {\n  if (_.isArray(utxo)) {\n    var self = this;\n    _.each(utxo, function(utxo) {\n      self.from(utxo, pubkeys, threshold, opts);\n    });\n    return this;\n  }\n  var exists = _.some(this.inputs, function(input) {\n    // TODO: Maybe prevTxId should be a string? Or defined as read only property?\n    return input.prevTxId.toString('hex') === utxo.txId && input.outputIndex === utxo.outputIndex;\n  });\n  if (exists) {\n    return this;\n  }\n  if (pubkeys && threshold) {\n    this._fromMultisigUtxo(utxo, pubkeys, threshold, opts);\n  } else {\n    this._fromNonP2SH(utxo);\n  }\n  return this;\n};\n\n/**\n * associateInputs - Update inputs with utxos, allowing you to specify value, and pubkey.\n * Populating these inputs allows for them to be signed with .sign(privKeys)\n *\n * @param {Array<Object>} utxos\n * @param {Array<string | PublicKey>} pubkeys\n * @param {number} threshold\n * @param {Object} opts\n * @returns {Array<number>}\n */\nTransaction.prototype.associateInputs = function(utxos, pubkeys, threshold, opts) {\n  let indexes = [];\n  for(let utxo of utxos) {\n    const index = this.inputs.findIndex(i => i.prevTxId.toString('hex') === utxo.txId && i.outputIndex === utxo.outputIndex);\n    indexes.push(index);\n    if(index >= 0) {\n      this.inputs[index] = this._getInputFrom(utxo, pubkeys, threshold, opts);\n    }\n  }\n  return indexes;\n}\n\n\nTransaction.prototype._selectInputType = function(utxo, pubkeys, threshold) {\n  var clazz;\n  utxo = new UnspentOutput(utxo);\n  if(pubkeys && threshold) {\n    if (utxo.script.isMultisigOut()) {\n      clazz = MultiSigInput;\n    } else if (utxo.script.isScriptHashOut() || utxo.script.isWitnessScriptHashOut()) {\n      clazz = MultiSigScriptHashInput;\n    }\n  } else if (utxo.script.isPublicKeyHashOut() || utxo.script.isWitnessPublicKeyHashOut() || utxo.script.isScriptHashOut()) {\n    clazz = PublicKeyHashInput;\n  } else if (utxo.script.isPublicKeyOut()) {\n    clazz = PublicKeyInput;\n  } else {\n    clazz = Input;\n  }\n  return clazz;\n}\n\n\nTransaction.prototype._getInputFrom = function(utxo, pubkeys, threshold, opts) {\n  utxo = new UnspentOutput(utxo);\n  const InputClass = this._selectInputType(utxo, pubkeys, threshold);\n  const input = {\n    output: new Output({\n      script: utxo.script,\n      satoshis: utxo.satoshis\n    }),\n    prevTxId: utxo.txId,\n    outputIndex: utxo.outputIndex,\n    sequenceNumber: utxo.sequenceNumber,\n    script: Script.empty()\n  };\n  let args = pubkeys && threshold ? [pubkeys, threshold, false, opts] : []\n  return new InputClass(input, ...args);\n}\n\nTransaction.prototype._fromNonP2SH = function(utxo) {\n  const input = this._getInputFrom(utxo);\n  this.addInput(input);\n};\n\nTransaction.prototype._fromMultisigUtxo = function(utxo, pubkeys, threshold, opts) {\n  $.checkArgument(threshold <= pubkeys.length,\n    'Number of required signatures must be greater than the number of public keys');\n  const input = this._getInputFrom(utxo, pubkeys, threshold, opts);\n  this.addInput(input);\n};\n\n/**\n * Add an input to this transaction. The input must be an instance of the `Input` class.\n * It should have information about the Output that it's spending, but if it's not already\n * set, two additional parameters, `outputScript` and `satoshis` can be provided.\n *\n * @param {Input} input\n * @param {String|Script} outputScript\n * @param {number} satoshis\n * @return Transaction this, for chaining\n */\nTransaction.prototype.addInput = function(input, outputScript, satoshis) {\n  $.checkArgumentType(input, Input, 'input');\n  if (!input.output && (_.isUndefined(outputScript) || _.isUndefined(satoshis))) {\n    throw new errors.Transaction.NeedMoreInfo('Need information about the UTXO script and satoshis');\n  }\n  if (!input.output && outputScript && !_.isUndefined(satoshis)) {\n    outputScript = outputScript instanceof Script ? outputScript : new Script(outputScript);\n    $.checkArgumentType(satoshis, 'number', 'satoshis');\n    input.output = new Output({\n      script: outputScript,\n      satoshis: satoshis\n    });\n  }\n  return this.uncheckedAddInput(input);\n};\n\n/**\n * Add an input to this transaction, without checking that the input has information about\n * the output that it's spending.\n *\n * @param {Input} input\n * @return Transaction this, for chaining\n */\nTransaction.prototype.uncheckedAddInput = function(input) {\n  $.checkArgumentType(input, Input, 'input');\n  this.inputs.push(input);\n  this._inputAmount = undefined;\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\n * Returns true if the transaction has enough info on all inputs to be correctly validated\n *\n * @return {boolean}\n */\nTransaction.prototype.hasAllUtxoInfo = function() {\n  return _.every(this.inputs.map(function(input) {\n    return !!input.output;\n  }));\n};\n\n/**\n * Manually set the fee for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n *\n * @param {number} amount satoshis to be sent\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.fee = function(amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._fee = amount;\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\n * Manually set the fee per KB for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n *\n * @param {number} amount satoshis per KB to be sent\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.feePerKb = function(amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._feePerKb = amount;\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\n * Manually set the fee per Byte for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n * fee per Byte will be ignored if fee per KB is set\n *\n * @param {number} amount satoshis per Byte to be sent\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.feePerByte = function (amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._feePerByte = amount;\n  this._updateChangeOutput();\n  return this;\n};\n\n/* Output management */\n\n/**\n * Set the change address for this transaction\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {Address} address An address for change to be sent to.\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.change = function(address) {\n  $.checkArgument(address, 'address is required');\n  this._changeScript = Script.fromAddress(address);\n  this._updateChangeOutput();\n  return this;\n};\n\n\n/**\n * @return {Output} change output, if it exists\n */\nTransaction.prototype.getChangeOutput = function() {\n  if (!_.isUndefined(this._changeIndex)) {\n    return this.outputs[this._changeIndex];\n  }\n  return null;\n};\n\n/**\n * @typedef {Object} Transaction~toObject\n * @property {(string|Address)} address\n * @property {number} satoshis\n */\n\n/**\n * Add an output to the transaction.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {(string|Address|Array.<Transaction~toObject>)} address\n * @param {number} amount in satoshis\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.to = function(address, amount) {\n  if (_.isArray(address)) {\n    var self = this;\n    _.each(address, function(to) {\n      self.to(to.address, to.satoshis);\n    });\n    return this;\n  }\n\n  $.checkArgument(\n    JSUtil.isNaturalNumber(amount),\n    'Amount is expected to be a positive integer'\n  );\n  this.addOutput(new Output({\n    script: Script(new Address(address)),\n    satoshis: amount\n  }));\n  return this;\n};\n\n/**\n * Add an OP_RETURN output to the transaction.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {Buffer|string} value the data to be stored in the OP_RETURN output.\n *    In case of a string, the UTF-8 representation will be stored\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.addData = function(value) {\n  this.addOutput(new Output({\n    script: Script.buildDataOut(value),\n    satoshis: 0\n  }));\n  return this;\n};\n\n\n/**\n * Add an output to the transaction.\n *\n * @param {Output} output the output to add.\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.addOutput = function(output) {\n  $.checkArgumentType(output, Output, 'output');\n  this._addOutput(output);\n  this._updateChangeOutput();\n  return this;\n};\n\n\n/**\n * Remove all outputs from the transaction.\n *\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.clearOutputs = function() {\n  this.outputs = [];\n  this._clearSignatures();\n  this._outputAmount = undefined;\n  this._changeIndex = undefined;\n  this._updateChangeOutput();\n  return this;\n};\n\n\nTransaction.prototype._addOutput = function(output) {\n  this.outputs.push(output);\n  this._outputAmount = undefined;\n};\n\n\n/**\n * Calculates or gets the total output amount in satoshis\n *\n * @return {Number} the transaction total output amount\n */\nTransaction.prototype._getOutputAmount = function() {\n  if (_.isUndefined(this._outputAmount)) {\n    var self = this;\n    this._outputAmount = 0;\n    _.each(this.outputs, function(output) {\n      self._outputAmount += output.satoshis;\n    });\n  }\n  return this._outputAmount;\n};\n\n\n/**\n * Calculates or gets the total input amount in satoshis\n *\n * @return {Number} the transaction total input amount\n */\nTransaction.prototype._getInputAmount = function() {\n  if (_.isUndefined(this._inputAmount)) {\n    this._inputAmount = _.sumBy(this.inputs, function(input) {\n      if (_.isUndefined(input.output)) {\n        throw new errors.Transaction.Input.MissingPreviousOutput();\n      }\n      return input.output.satoshis;\n    });\n  }\n  return this._inputAmount;\n};\n\nTransaction.prototype._updateChangeOutput = function() {\n  if (!this._changeScript) {\n    return;\n  }\n  this._clearSignatures();\n  if (!_.isUndefined(this._changeIndex)) {\n    this._removeOutput(this._changeIndex);\n  }\n  var available = this._getUnspentValue();\n  var fee = this.getFee();\n  var changeAmount = available - fee;\n  if (changeAmount > Transaction.DUST_AMOUNT) {\n    this._changeIndex = this.outputs.length;\n    this._addOutput(new Output({\n      script: this._changeScript,\n      satoshis: changeAmount\n    }));\n  } else {\n    this._changeIndex = undefined;\n  }\n};\n/**\n * Calculates the fee of the transaction.\n *\n * If there's a fixed fee set, return that.\n *\n * If there is no change output set, the fee is the\n * total value of the outputs minus inputs. Note that\n * a serialized transaction only specifies the value\n * of its outputs. (The value of inputs are recorded\n * in the previous transaction outputs being spent.)\n * This method therefore raises a \"MissingPreviousOutput\"\n * error when called on a serialized transaction.\n *\n * If there's no fee set and no change address,\n * estimate the fee based on size.\n *\n * @return {Number} fee of this transaction in satoshis\n */\nTransaction.prototype.getFee = function() {\n  if (this.isCoinbase()) {\n    return 0;\n  }\n  if (!_.isUndefined(this._fee)) {\n    return this._fee;\n  }\n  // if no change output is set, fees should equal all the unspent amount\n  if (!this._changeScript) {\n    return this._getUnspentValue();\n  }\n  return this._estimateFee();\n};\n\n/**\n * Estimates fee from serialized transaction size in bytes.\n */\nTransaction.prototype._estimateFee = function () {\n  var estimatedSize = this._estimateSize();\n  var available = this._getUnspentValue();\n  var feeRate = this._feePerByte || (this._feePerKb || Transaction.FEE_PER_KB) / 1000;\n  function getFee(size) {\n    return size * feeRate;\n  }\n  var fee = Math.ceil(getFee(estimatedSize));\n  var feeWithChange = Math.ceil(getFee(estimatedSize) + getFee(Transaction.CHANGE_OUTPUT_MAX_SIZE));\n  if (!this._changeScript || available <= feeWithChange) {\n    return fee;\n  }\n  return feeWithChange;\n};\n\nTransaction.prototype._getUnspentValue = function() {\n  return this._getInputAmount() - this._getOutputAmount();\n};\n\nTransaction.prototype._clearSignatures = function() {\n  _.each(this.inputs, function(input) {\n    input.clearSignatures();\n  });\n};\n\nTransaction.prototype._estimateSize = function() {\n  var result = Transaction.MAXIMUM_EXTRA_SIZE;\n  _.each(this.inputs, function(input) {\n    result += 32 + 4;  // prevout size:w\n    result += input._estimateSize();\n  });\n  _.each(this.outputs, function(output) {\n    result += output.script.toBuffer().length + 9;\n  });\n  return Math.ceil(result);\n};\n\nTransaction.prototype._removeOutput = function(index) {\n  var output = this.outputs[index];\n  this.outputs = _.without(this.outputs, output);\n  this._outputAmount = undefined;\n};\n\nTransaction.prototype.removeOutput = function(index) {\n  this._removeOutput(index);\n  this._updateChangeOutput();\n};\n\n/**\n * Sort a transaction's inputs and outputs according to BIP69\n *\n * @see {https://github.com/bitcoin/bips/blob/master/bip-0069.mediawiki}\n * @return {Transaction} this\n */\nTransaction.prototype.sort = function() {\n  this.sortInputs(function(inputs) {\n    var copy = Array.prototype.concat.apply([], inputs);\n    let i = 0;\n    copy.forEach((x) => { x.i = i++;});\n    copy.sort(function(first, second) {\n     return compare(first.prevTxId, second.prevTxId)\n        || first.outputIndex - second.outputIndex\n        || first.i - second.i;  // to ensure stable sort\n    });\n    return copy;\n  });\n  this.sortOutputs(function(outputs) {\n    var copy = Array.prototype.concat.apply([], outputs);\n    let i = 0;\n    copy.forEach((x) => { x.i = i++});\n    copy.sort(function(first, second) {\n      return first.satoshis - second.satoshis\n        || compare(first.script.toBuffer(), second.script.toBuffer())\n        || first.i - second.i;  // to ensure stable sort\n    });\n    return copy;\n  });\n  return this;\n};\n\n/**\n * Randomize this transaction's outputs ordering. The shuffling algorithm is a\n * version of the Fisher-Yates shuffle, provided by lodash's _.shuffle().\n *\n * @return {Transaction} this\n */\nTransaction.prototype.shuffleOutputs = function() {\n  return this.sortOutputs(_.shuffle);\n};\n\n/**\n * Sort this transaction's outputs, according to a given sorting function that\n * takes an array as argument and returns a new array, with the same elements\n * but with a different order. The argument function MUST NOT modify the order\n * of the original array\n *\n * @param {Function} sortingFunction\n * @return {Transaction} this\n */\nTransaction.prototype.sortOutputs = function(sortingFunction) {\n  var outs = sortingFunction(this.outputs);\n  return this._newOutputOrder(outs);\n};\n\n/**\n * Sort this transaction's inputs, according to a given sorting function that\n * takes an array as argument and returns a new array, with the same elements\n * but with a different order.\n *\n * @param {Function} sortingFunction\n * @return {Transaction} this\n */\nTransaction.prototype.sortInputs = function(sortingFunction) {\n  this.inputs = sortingFunction(this.inputs);\n  this._clearSignatures();\n  return this;\n};\n\nTransaction.prototype._newOutputOrder = function(newOutputs) {\n  var isInvalidSorting = (this.outputs.length !== newOutputs.length ||\n                          _.difference(this.outputs, newOutputs).length !== 0);\n  if (isInvalidSorting) {\n    throw new errors.Transaction.InvalidSorting();\n  }\n\n  if (!_.isUndefined(this._changeIndex)) {\n    var changeOutput = this.outputs[this._changeIndex];\n    this._changeIndex = _.findIndex(newOutputs, changeOutput);\n  }\n\n  this.outputs = newOutputs;\n  return this;\n};\n\nTransaction.prototype.removeInput = function(txId, outputIndex) {\n  var index;\n  if (!outputIndex && _.isNumber(txId)) {\n    index = txId;\n  } else {\n    index = _.findIndex(this.inputs, function(input) {\n      return input.prevTxId.toString('hex') === txId && input.outputIndex === outputIndex;\n    });\n  }\n  if (index < 0 || index >= this.inputs.length) {\n    throw new errors.Transaction.InvalidIndex(index, this.inputs.length);\n  }\n  var input = this.inputs[index];\n  this.inputs = _.without(this.inputs, input);\n  this._inputAmount = undefined;\n  this._updateChangeOutput();\n};\n\n/* Signature handling */\n\n/**\n * Sign the transaction using one or more private keys.\n *\n * It tries to sign each input, verifying that the signature will be valid\n * (matches a public key).\n *\n * @param {Array|String|PrivateKey} privateKey\n * @param {number} sigtype\n * @param {String} signingMethod - method used to sign - 'ecdsa' or 'schnorr'\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.sign = function(privateKey, sigtype, signingMethod) {\n  $.checkState(this.hasAllUtxoInfo(), 'Not all utxo information is available to sign the transaction.');\n  var self = this;\n  if (_.isArray(privateKey)) {\n    _.each(privateKey, function(privateKey) {\n      self.sign(privateKey, sigtype, signingMethod);\n    });\n    return this;\n  }\n  _.each(this.getSignatures(privateKey, sigtype, signingMethod), function(signature) {\n    self.applySignature(signature, signingMethod);\n  });\n  return this;\n};\n\nTransaction.prototype.getSignatures = function(privKey, sigtype, signingMethod) {\n  privKey = new PrivateKey(privKey);\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n  var transaction = this;\n  var results = [];\n  var hashData = Hash.sha256ripemd160(privKey.publicKey.toBuffer());\n  _.each(this.inputs, function forEachInput(input, index) {\n    _.each(input.getSignatures(transaction, privKey, index, sigtype, hashData, signingMethod), function(signature) {\n      results.push(signature);\n    });\n  });\n  return results;\n};\n\n/**\n * Add a signature to the transaction\n *\n * @param {Object} signature\n * @param {number} signature.inputIndex\n * @param {number} signature.sigtype\n * @param {PublicKey} signature.publicKey\n * @param {Signature} signature.signature\n * @param {String} signingMethod - 'ecdsa' to sign transaction\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.applySignature = function(signature, signingMethod) {\n  this.inputs[signature.inputIndex].addSignature(this, signature, signingMethod);\n  return this;\n};\n\nTransaction.prototype.isFullySigned = function() {\n  _.each(this.inputs, function(input) {\n    if (input.isFullySigned === Input.prototype.isFullySigned) {\n      throw new errors.Transaction.UnableToVerifySignature(\n        'Unrecognized script kind, or not enough information to execute script.' +\n        'This usually happens when creating a transaction from a serialized transaction'\n      );\n    }\n  });\n  return _.every(_.map(this.inputs, function(input) {\n    return input.isFullySigned();\n  }));\n};\n\nTransaction.prototype.isValidSignature = function(signature, signingMethod) {\n  var self = this;\n  if (this.inputs[signature.inputIndex].isValidSignature === Input.prototype.isValidSignature) {\n    throw new errors.Transaction.UnableToVerifySignature(\n      'Unrecognized script kind, or not enough information to execute script.' +\n      'This usually happens when creating a transaction from a serialized transaction'\n    );\n  }\n  return this.inputs[signature.inputIndex].isValidSignature(self, signature, signingMethod);\n};\n\n/**\n * @param {String} signingMethod method used to sign - 'ecdsa' or 'schnorr' (future signing method)\n * @returns {bool} whether the signature is valid for this transaction input\n */\nTransaction.prototype.verifySignature = function(sig, pubkey, nin, subscript, sigversion, satoshis, signingMethod) {\n\n  if (_.isUndefined(sigversion)) {\n    sigversion = 0;\n  }\n\n  if (sigversion === Interpreter.SIGVERSION_WITNESS_V0) {\n    var subscriptBuffer = subscript.toBuffer();\n    var scriptCodeWriter = new BufferWriter();\n    scriptCodeWriter.writeVarintNum(subscriptBuffer.length);\n    scriptCodeWriter.write(subscriptBuffer);\n\n    var satoshisBuffer;\n    if (satoshis) {\n      $.checkState(JSUtil.isNaturalNumber(satoshis));\n      satoshisBuffer = new BufferWriter().writeUInt64LEBN(new BN(satoshis)).toBuffer();\n    } else {\n      satoshisBuffer = this.inputs[nin].getSatoshisBuffer();\n    }\n    var verified = SighashWitness.verify(\n      this,\n      sig,\n      pubkey,\n      nin,\n      scriptCodeWriter.toBuffer(),\n      satoshisBuffer,\n      signingMethod\n    );\n    return verified;\n  }\n\n  return Sighash.verify(this, sig, pubkey, nin, subscript, signingMethod);\n};\n\n/**\n * Check that a transaction passes basic sanity tests. If not, return a string\n * describing the error. This function contains the same logic as\n * CheckTransaction in bitcoin core.\n */\nTransaction.prototype.verify = function() {\n  // Basic checks that don't depend on any context\n  if (this.inputs.length === 0) {\n    return 'transaction txins empty';\n  }\n\n  if (this.outputs.length === 0) {\n    return 'transaction txouts empty';\n  }\n\n  // Check for negative or overflow output values\n  var valueoutbn = new BN(0);\n  for (var i = 0; i < this.outputs.length; i++) {\n    var txout = this.outputs[i];\n\n    if (txout.invalidSatoshis()) {\n      return 'transaction txout ' + i + ' satoshis is invalid';\n    }\n    if (txout._satoshisBN.gt(new BN(Transaction.MAX_MONEY, 10))) {\n      return 'transaction txout ' + i + ' greater than MAX_MONEY';\n    }\n    valueoutbn = valueoutbn.add(txout._satoshisBN);\n    if (valueoutbn.gt(new BN(Transaction.MAX_MONEY))) {\n      return 'transaction txout ' + i + ' total output greater than MAX_MONEY';\n    }\n  }\n\n  // Size limits\n  if (this.toBuffer().length > MAX_BLOCK_SIZE) {\n    return 'transaction over the maximum block size';\n  }\n\n  // Check for duplicate inputs\n  var txinmap = {};\n  for (i = 0; i < this.inputs.length; i++) {\n    var txin = this.inputs[i];\n\n    var inputid = txin.prevTxId + ':' + txin.outputIndex;\n    if (!_.isUndefined(txinmap[inputid])) {\n      return 'transaction input ' + i + ' duplicate input';\n    }\n    txinmap[inputid] = true;\n  }\n\n  var isCoinbase = this.isCoinbase();\n  if (isCoinbase) {\n    var buf = this.inputs[0]._scriptBuffer;\n    if (buf.length < 2 || buf.length > 100) {\n      return 'coinbase transaction script size invalid';\n    }\n  } else {\n    for (i = 0; i < this.inputs.length; i++) {\n      if (this.inputs[i].isNull()) {\n        return 'transaction input ' + i + ' has null input';\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Analogous to bitcoind's IsCoinBase function in transaction.h\n */\nTransaction.prototype.isCoinbase = function() {\n  return (this.inputs.length === 1 && this.inputs[0].isNull());\n};\n\n/**\n * Determines if this transaction can be replaced in the mempool with another\n * transaction that provides a sufficiently higher fee (RBF).\n */\nTransaction.prototype.isRBF = function() {\n  for (var i = 0; i < this.inputs.length; i++) {\n    var input = this.inputs[i];\n    if (input.sequenceNumber < Input.MAXINT - 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Enable this transaction to be replaced in the mempool (RBF) if a transaction\n * includes a sufficiently higher fee. It will set the sequenceNumber to\n * DEFAULT_RBF_SEQNUMBER for all inputs if the sequence number does not\n * already enable RBF.\n */\nTransaction.prototype.enableRBF = function() {\n  for (var i = 0; i < this.inputs.length; i++) {\n    var input = this.inputs[i];\n    if (input.sequenceNumber >= Input.MAXINT - 1) {\n      input.sequenceNumber = Input.DEFAULT_RBF_SEQNUMBER;\n    }\n  }\n  return this;\n};\n\nTransaction.prototype.setVersion = function(version) {\n  $.checkArgument(\n    JSUtil.isNaturalNumber(version) && version <= CURRENT_VERSION,\n    'Wrong version number');\n  this.version = version;\n  return this;\n};\n\n\n\nmodule.exports = Transaction;\n"]},"metadata":{},"sourceType":"script"}