{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.signAdaOffchainKMSTransaction = exports.sendAdaOffchainTransaction = void 0;\n\nconst cardano_serialization_lib_nodejs_1 = require(\"@emurgo/cardano-serialization-lib-nodejs\");\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst model_1 = require(\"../model\");\n\nconst transaction_1 = require(\"../transaction\");\n\nconst wallet_1 = require(\"../wallet\");\n\nconst common_1 = require(\"./common\");\n\nconst kms_1 = require(\"./kms\");\n/**\n * Send Ada transaction from Tatum Ledger account to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain or id of the withdrawal, if it was not cancelled automatically\n */\n\n\nconst sendAdaOffchainTransaction = async (testnet, body) => {\n  if (body.signatureId) {\n    return kms_1.offchainTransferAdaKMS(body);\n  }\n\n  await tatum_1.validateBody(body, model_1.TransferBtcBasedOffchain);\n\n  const {\n    mnemonic,\n    keyPair,\n    xpub,\n    attr: changeAddress\n  } = body,\n        withdrawal = __rest(body, [\"mnemonic\", \"keyPair\", \"xpub\", \"attr\"]);\n\n  if (!withdrawal.fee) {\n    withdrawal.fee = '1';\n  }\n\n  const {\n    id,\n    data\n  } = await common_1.offchainStoreWithdrawal(withdrawal);\n  const {\n    amount,\n    address\n  } = withdrawal;\n  let txData;\n\n  try {\n    txData = await prepareAdaSignedOffchainTransaction(testnet, data, amount, address, mnemonic, keyPair, changeAddress, xpub, withdrawal.multipleAmounts);\n  } catch (e) {\n    console.error(e);\n    await common_1.offchainCancelWithdrawal(id);\n    throw e;\n  }\n\n  try {\n    return Object.assign(Object.assign({}, await common_1.offchainBroadcast({\n      txData,\n      withdrawalId: id,\n      currency: model_1.Currency.ADA\n    })), {\n      id\n    });\n  } catch (e) {\n    console.error(e);\n\n    try {\n      await common_1.offchainCancelWithdrawal(id);\n    } catch (e1) {\n      console.log(e);\n      return {\n        id\n      };\n    }\n\n    throw e;\n  }\n};\n\nexports.sendAdaOffchainTransaction = sendAdaOffchainTransaction;\n\nconst prepareAdaSignedOffchainTransaction = async (testnet, data, amount, address, mnemonic, keyPair, changeAddress, xpub, multipleAmounts, signatureId) => {\n  var _a;\n\n  const txBuilder = await transaction_1.initTransactionBuilder();\n  const fromAddress = data.filter(input => input.address).map(input => ({\n    address: input.address.address\n  }));\n  await transaction_1.addAddressInputsWithoutPrivateKey(txBuilder, fromAddress);\n  addOffchainInputs(txBuilder, data);\n\n  if (multipleAmounts === null || multipleAmounts === void 0 ? void 0 : multipleAmounts.length) {\n    for (const [i, multipleAmount] of multipleAmounts.entries()) {\n      transaction_1.addOutputAda(txBuilder, address.split(',')[i], multipleAmount);\n    }\n  } else {\n    transaction_1.addOutputAda(txBuilder, address, amount);\n  }\n\n  const lastVin = data.find(d => d.vIn === '-1');\n\n  if (new bignumber_js_1.default(lastVin.amount).isGreaterThan(0)) {\n    if (xpub) {\n      const zeroAddress = await wallet_1.generateAddressFromXPub(model_1.Currency.ADA, testnet, xpub, 0);\n      transaction_1.addOutputAda(txBuilder, zeroAddress, lastVin.amount);\n    } else if (changeAddress) {\n      transaction_1.addOutputAda(txBuilder, changeAddress, lastVin.amount);\n    } else {\n      throw new Error('Impossible to prepare transaction. Either xpub or keyPair and attr must be present.');\n    }\n  }\n\n  const lovelaceFee = transaction_1.adaToLovelace(1);\n  txBuilder.set_fee(cardano_serialization_lib_nodejs_1.BigNum.from_str(lovelaceFee));\n  const txBody = txBuilder.build();\n\n  if (signatureId) {\n    return JSON.stringify({\n      txData: txBody.to_bytes().toString()\n    });\n  }\n\n  const vKeyWitnesses = cardano_serialization_lib_nodejs_1.Vkeywitnesses.new();\n  const txHash = cardano_serialization_lib_nodejs_1.hash_transaction(txBody);\n\n  for (const input of data) {\n    // when there is no address field present, input is pool transfer to 0\n    if (input.vIn === '-1') {\n      continue;\n    }\n\n    if (mnemonic) {\n      const derivationKey = ((_a = input.address) === null || _a === void 0 ? void 0 : _a.derivationKey) || 0;\n      const privateKey = await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.ADA, testnet, mnemonic, derivationKey);\n      transaction_1.makeWitness(privateKey, txHash, vKeyWitnesses);\n    } else if (keyPair) {\n      const {\n        privateKey\n      } = keyPair.find(k => k.address === input.address.address);\n      transaction_1.makeWitness(privateKey, txHash, vKeyWitnesses);\n    } else {\n      throw new Error('Impossible to prepare transaction. Either mnemonic or keyPair and attr must be present.');\n    }\n  }\n\n  const witnesses = cardano_serialization_lib_nodejs_1.TransactionWitnessSet.new();\n  witnesses.set_vkeys(vKeyWitnesses);\n  return Buffer.from(cardano_serialization_lib_nodejs_1.Transaction.new(txBody, witnesses).to_bytes()).toString('hex');\n};\n\nconst addOffchainInputs = (transactionBuilder, inputs) => {\n  var _a;\n\n  let amount = new bignumber_js_1.default(0);\n\n  for (const input of inputs) {\n    if (input.vIn !== '-1' && input.amount && input.vInIndex !== undefined && ((_a = input.address) === null || _a === void 0 ? void 0 : _a.address)) {\n      transaction_1.addInput(transactionBuilder, {\n        value: transaction_1.adaToLovelace(input.amount),\n        index: input.vInIndex,\n        txHash: input.vIn\n      }, input.address.address);\n      amount = amount.plus(input.amount);\n    }\n  }\n\n  return amount;\n};\n/**\n * Sign Ada pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param mnemonic mnemonic to generate private keys to sign transaction with.\n * @param testnet mainnet or testnet version\n * @returns transaction data to be broadcast to blockchain.\n */\n\n\nconst signAdaOffchainKMSTransaction = async (tx, mnemonic, testnet) => {\n  var _a;\n\n  if (tx.chain !== model_1.Currency.ADA || !tx.withdrawalResponses) {\n    throw Error('Unsupported chain.');\n  }\n\n  const txData = JSON.parse(tx.serializedTransaction).txData;\n  const transactionBody = cardano_serialization_lib_nodejs_1.TransactionBody.from_bytes(Uint8Array.from(txData.split(',')));\n  const txHash = cardano_serialization_lib_nodejs_1.hash_transaction(transactionBody);\n  const vKeyWitnesses = cardano_serialization_lib_nodejs_1.Vkeywitnesses.new();\n\n  for (const response of tx.withdrawalResponses) {\n    if (response.vIn === '-1') {\n      continue;\n    }\n\n    const privateKey = await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.ADA, testnet, mnemonic, ((_a = response.address) === null || _a === void 0 ? void 0 : _a.derivationKey) || 0);\n    transaction_1.makeWitness(privateKey, txHash, vKeyWitnesses);\n  }\n\n  const witnesses = cardano_serialization_lib_nodejs_1.TransactionWitnessSet.new();\n  witnesses.set_vkeys(vKeyWitnesses);\n  return Buffer.from(cardano_serialization_lib_nodejs_1.Transaction.new(transactionBody, witnesses).to_bytes()).toString('hex');\n};\n\nexports.signAdaOffchainKMSTransaction = signAdaOffchainKMSTransaction;","map":{"version":3,"mappings":"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","names":["sendAdaOffchainTransaction","testnet","body","signatureId","kms_1","tatum_1","model_1","mnemonic","keyPair","xpub","attr","changeAddress","withdrawal","fee","id","data","common_1","amount","address","txData","prepareAdaSignedOffchainTransaction","multipleAmounts","e","console","error","withdrawalId","currency","ADA","e1","log","exports","txBuilder","transaction_1","fromAddress","filter","input","map","addOffchainInputs","length","i","multipleAmount","entries","split","lastVin","find","d","vIn","bignumber_js_1","isGreaterThan","zeroAddress","wallet_1","Error","lovelaceFee","set_fee","cardano_serialization_lib_nodejs_1","from_str","txBody","build","JSON","stringify","to_bytes","toString","vKeyWitnesses","new","txHash","derivationKey","_a","privateKey","k","witnesses","set_vkeys","Buffer","from","transactionBuilder","inputs","vInIndex","undefined","value","index","plus","signAdaOffchainKMSTransaction","tx","chain","withdrawalResponses","parse","serializedTransaction","transactionBody","from_bytes","Uint8Array","response"],"sourceRoot":"","sources":["../../../src/offchain/ada.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}