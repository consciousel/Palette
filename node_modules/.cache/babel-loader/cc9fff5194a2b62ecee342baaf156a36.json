{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getClassicAccountAndTag = exports.setCanonicalFlag = exports.common = exports.prepareTransaction = exports.convertMemo = exports.convertStringToHex = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst common = __importStar(require(\"../common\"));\n\nexports.common = common;\n\nconst common_1 = require(\"../common\");\n\nconst errors_1 = require(\"../common/errors\");\n\nconst ripple_address_codec_1 = require(\"ripple-address-codec\");\n\nconst txFlags = common.txFlags;\nconst TRANSACTION_TYPES_WITH_DESTINATION_TAG_FIELD = ['Payment', 'CheckCreate', 'EscrowCreate', 'PaymentChannelCreate'];\n\nfunction formatPrepareResponse(txJSON) {\n  const instructions = {\n    fee: common.dropsToXrp(txJSON.Fee),\n    maxLedgerVersion: txJSON.LastLedgerSequence == null ? null : txJSON.LastLedgerSequence\n  };\n\n  if (txJSON.TicketSequence != null) {\n    instructions['ticketSequence'] = txJSON.TicketSequence;\n  } else {\n    instructions['sequence'] = txJSON.Sequence;\n  }\n\n  return {\n    txJSON: JSON.stringify(txJSON),\n    instructions\n  };\n}\n\nfunction setCanonicalFlag(txJSON) {\n  txJSON.Flags |= txFlags.Universal.FullyCanonicalSig;\n  txJSON.Flags = txJSON.Flags >>> 0;\n}\n\nexports.setCanonicalFlag = setCanonicalFlag;\n\nfunction scaleValue(value, multiplier) {\n  let extra = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return new bignumber_js_1.default(value).times(multiplier).plus(extra).toString();\n}\n\nfunction getClassicAccountAndTag(Account, expectedTag) {\n  if (ripple_address_codec_1.isValidXAddress(Account)) {\n    const classic = ripple_address_codec_1.xAddressToClassicAddress(Account);\n\n    if (expectedTag != null && classic.tag !== expectedTag) {\n      throw new errors_1.ValidationError('address includes a tag that does not match the tag specified in the transaction');\n    }\n\n    return {\n      classicAccount: classic.classicAddress,\n      tag: classic.tag\n    };\n  } else {\n    return {\n      classicAccount: Account,\n      tag: expectedTag\n    };\n  }\n}\n\nexports.getClassicAccountAndTag = getClassicAccountAndTag;\n\nfunction prepareTransaction(txJSON, api, instructions) {\n  common.validate.instructions(instructions);\n  common.validate.tx_json(txJSON);\n\n  if (instructions.sequence != null && instructions.sequence === 0) {\n    return Promise.reject(new errors_1.ValidationError('`sequence` cannot be 0'));\n  }\n\n  const disallowedFieldsInTxJSON = ['maxLedgerVersion', 'maxLedgerVersionOffset', 'fee', 'sequence', 'ticketSequence'];\n  const badFields = disallowedFieldsInTxJSON.filter(field => txJSON[field]);\n\n  if (badFields.length) {\n    return Promise.reject(new errors_1.ValidationError('txJSON additionalProperty \"' + badFields[0] + '\" exists in instance when not allowed'));\n  }\n\n  const newTxJSON = Object.assign({}, txJSON);\n\n  if (txJSON['SignerQuorum'] === 0) {\n    delete newTxJSON.SignerEntries;\n  }\n\n  const {\n    classicAccount,\n    tag: sourceTag\n  } = getClassicAccountAndTag(txJSON.Account);\n  newTxJSON.Account = classicAccount;\n\n  if (sourceTag != null) {\n    if (txJSON.SourceTag && txJSON.SourceTag !== sourceTag) {\n      return Promise.reject(new errors_1.ValidationError('The `SourceTag`, if present, must match the tag of the `Account` X-address'));\n    }\n\n    if (sourceTag) {\n      newTxJSON.SourceTag = sourceTag;\n    }\n  }\n\n  if (typeof txJSON.Destination === 'string') {\n    const {\n      classicAccount: destinationAccount,\n      tag: destinationTag\n    } = getClassicAccountAndTag(txJSON.Destination);\n    newTxJSON.Destination = destinationAccount;\n\n    if (destinationTag != null) {\n      if (TRANSACTION_TYPES_WITH_DESTINATION_TAG_FIELD.includes(txJSON.TransactionType)) {\n        if (txJSON.DestinationTag && txJSON.DestinationTag !== destinationTag) {\n          return Promise.reject(new errors_1.ValidationError('The Payment `DestinationTag`, if present, must match the tag of the `Destination` X-address'));\n        }\n\n        if (destinationTag) {\n          newTxJSON.DestinationTag = destinationTag;\n        }\n      }\n    }\n  }\n\n  function convertToClassicAccountIfPresent(fieldName) {\n    const account = txJSON[fieldName];\n\n    if (typeof account === 'string') {\n      const {\n        classicAccount: ca\n      } = getClassicAccountAndTag(account);\n      newTxJSON[fieldName] = ca;\n    }\n  }\n\n  function convertIssuedCurrencyToAccountIfPresent(fieldName) {\n    const amount = txJSON[fieldName];\n    if (typeof amount === 'number' || amount instanceof Array || amount == null) return;\n    newTxJSON[fieldName] = common_1.toRippledAmount(amount);\n  }\n\n  convertToClassicAccountIfPresent('Authorize');\n  convertToClassicAccountIfPresent('Unauthorize');\n  convertToClassicAccountIfPresent('Owner');\n  convertToClassicAccountIfPresent('RegularKey');\n  convertIssuedCurrencyToAccountIfPresent('Amount');\n  convertIssuedCurrencyToAccountIfPresent('SendMax');\n  convertIssuedCurrencyToAccountIfPresent('DeliverMin');\n  convertIssuedCurrencyToAccountIfPresent('TakerPays');\n  convertIssuedCurrencyToAccountIfPresent('TakerGets');\n  convertIssuedCurrencyToAccountIfPresent('LimitAmount');\n  setCanonicalFlag(newTxJSON);\n\n  function prepareMaxLedgerVersion() {\n    if (newTxJSON.LastLedgerSequence && instructions.maxLedgerVersion) {\n      return Promise.reject(new errors_1.ValidationError('`LastLedgerSequence` in txJSON and `maxLedgerVersion`' + ' in `instructions` cannot both be set'));\n    }\n\n    if (newTxJSON.LastLedgerSequence && instructions.maxLedgerVersionOffset) {\n      return Promise.reject(new errors_1.ValidationError('`LastLedgerSequence` in txJSON and `maxLedgerVersionOffset`' + ' in `instructions` cannot both be set'));\n    }\n\n    if (newTxJSON.LastLedgerSequence) {\n      return Promise.resolve();\n    }\n\n    if (instructions.maxLedgerVersion !== undefined) {\n      if (instructions.maxLedgerVersion !== null) {\n        newTxJSON.LastLedgerSequence = instructions.maxLedgerVersion;\n      }\n\n      return Promise.resolve();\n    }\n\n    const offset = instructions.maxLedgerVersionOffset != null ? instructions.maxLedgerVersionOffset : 3;\n    return api.connection.getLedgerVersion().then(ledgerVersion => {\n      newTxJSON.LastLedgerSequence = ledgerVersion + offset;\n      return;\n    });\n  }\n\n  function prepareFee() {\n    if (newTxJSON.Fee && instructions.fee) {\n      return Promise.reject(new errors_1.ValidationError('`Fee` in txJSON and `fee` in `instructions` cannot both be set'));\n    }\n\n    if (newTxJSON.Fee) {\n      return Promise.resolve();\n    }\n\n    const multiplier = instructions.signersCount == null ? 1 : instructions.signersCount + 1;\n\n    if (instructions.fee != null) {\n      const fee = new bignumber_js_1.default(instructions.fee);\n\n      if (fee.isGreaterThan(api._maxFeeXRP)) {\n        return Promise.reject(new errors_1.ValidationError(`Fee of ${fee.toString(10)} XRP exceeds ` + `max of ${api._maxFeeXRP} XRP. To use this fee, increase ` + '`maxFeeXRP` in the RippleAPI constructor.'));\n      }\n\n      newTxJSON.Fee = scaleValue(common.xrpToDrops(instructions.fee), multiplier);\n      return Promise.resolve();\n    }\n\n    const cushion = api._feeCushion;\n    return api.getFee(cushion).then(fee => {\n      return api.connection.getFeeRef().then(feeRef => {\n        const extraFee = newTxJSON.TransactionType !== 'EscrowFinish' || newTxJSON.Fulfillment == null ? 0 : cushion * feeRef * (32 + Math.floor(Buffer.from(newTxJSON.Fulfillment, 'hex').length / 16));\n        const feeDrops = common.xrpToDrops(fee);\n        const maxFeeXRP = instructions.maxFee ? bignumber_js_1.default.min(api._maxFeeXRP, instructions.maxFee) : api._maxFeeXRP;\n        const maxFeeDrops = common.xrpToDrops(maxFeeXRP);\n        const normalFee = scaleValue(feeDrops, multiplier, extraFee);\n        newTxJSON.Fee = bignumber_js_1.default.min(normalFee, maxFeeDrops).toString(10);\n        return;\n      });\n    });\n  }\n\n  function prepareSequence() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (instructions.sequence != null) {\n        if (newTxJSON.Sequence == null || instructions.sequence === newTxJSON.Sequence) {\n          newTxJSON.Sequence = instructions.sequence;\n          return Promise.resolve();\n        } else {\n          return Promise.reject(new errors_1.ValidationError('`Sequence` in txJSON must match `sequence` in `instructions`'));\n        }\n      }\n\n      if (newTxJSON.Sequence != null) {\n        return Promise.resolve();\n      }\n\n      if (instructions.ticketSequence != null) {\n        newTxJSON.Sequence = 0;\n        newTxJSON.TicketSequence = instructions.ticketSequence;\n        return Promise.resolve();\n      }\n\n      try {\n        const response = yield api.request('account_info', {\n          account: classicAccount,\n          ledger_index: 'current'\n        });\n        newTxJSON.Sequence = response.account_data.Sequence;\n        return Promise.resolve();\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    });\n  }\n\n  return Promise.all([prepareMaxLedgerVersion(), prepareFee(), prepareSequence()]).then(() => formatPrepareResponse(newTxJSON));\n}\n\nexports.prepareTransaction = prepareTransaction;\n\nfunction convertStringToHex(string) {\n  return Buffer.from(string, 'utf8').toString('hex').toUpperCase();\n}\n\nexports.convertStringToHex = convertStringToHex;\n\nfunction convertMemo(memo) {\n  return {\n    Memo: common.removeUndefined({\n      MemoData: memo.data ? convertStringToHex(memo.data) : undefined,\n      MemoType: memo.type ? convertStringToHex(memo.type) : undefined,\n      MemoFormat: memo.format ? convertStringToHex(memo.format) : undefined\n    })\n  };\n}\n\nexports.convertMemo = convertMemo;","map":{"version":3,"mappings":"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","names":["exports","txFlags","common","TRANSACTION_TYPES_WITH_DESTINATION_TAG_FIELD","formatPrepareResponse","txJSON","instructions","fee","dropsToXrp","Fee","maxLedgerVersion","LastLedgerSequence","TicketSequence","Sequence","JSON","stringify","setCanonicalFlag","Flags","Universal","FullyCanonicalSig","scaleValue","value","multiplier","extra","bignumber_js_1","times","plus","toString","getClassicAccountAndTag","Account","expectedTag","ripple_address_codec_1","classic","tag","errors_1","classicAccount","classicAddress","prepareTransaction","api","validate","tx_json","sequence","Promise","reject","disallowedFieldsInTxJSON","badFields","filter","field","length","newTxJSON","Object","assign","SignerEntries","sourceTag","SourceTag","Destination","destinationAccount","destinationTag","includes","TransactionType","DestinationTag","convertToClassicAccountIfPresent","fieldName","account","ca","convertIssuedCurrencyToAccountIfPresent","amount","Array","common_1","prepareMaxLedgerVersion","maxLedgerVersionOffset","resolve","undefined","offset","connection","getLedgerVersion","then","ledgerVersion","prepareFee","signersCount","isGreaterThan","_maxFeeXRP","xrpToDrops","cushion","_feeCushion","getFee","getFeeRef","feeRef","extraFee","Fulfillment","Math","floor","Buffer","from","feeDrops","maxFeeXRP","maxFee","min","maxFeeDrops","normalFee","prepareSequence","ticketSequence","response","request","ledger_index","account_data","e","all","convertStringToHex","string","toUpperCase","convertMemo","memo","Memo","removeUndefined","MemoData","data","MemoType","type","MemoFormat","format"],"sourceRoot":"","sources":["../../../src/transaction/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}