{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prepareEthErc20SignedOffchainTransaction = exports.prepareEthSignedOffchainTransaction = exports.signEthOffchainKMSTransaction = exports.sendEthErc20OffchainTransaction = exports.sendEthOffchainTransaction = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst constants_1 = require(\"../constants\");\n\nconst token_abi_1 = __importDefault(require(\"../contracts/erc20/token_abi\"));\n\nconst ledger_1 = require(\"../ledger\");\n\nconst model_1 = require(\"../model\");\n\nconst transaction_1 = require(\"../transaction\");\n\nconst wallet_1 = require(\"../wallet\");\n\nconst common_1 = require(\"./common\");\n\nconst kms_1 = require(\"./kms\");\n/**\n * Send Ethereum transaction from Tatum Ledger account to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain or id of the withdrawal, if it was not cancelled automatically\n */\n\n\nconst sendEthOffchainTransaction = async (testnet, body, provider) => {\n  if (body.signatureId) {\n    return kms_1.offchainTransferEthKMS(body);\n  }\n\n  await tatum_1.validateBody(body, model_1.TransferEthOffchain);\n\n  const {\n    mnemonic,\n    index,\n    privateKey,\n    nonce\n  } = body,\n        withdrawal = __rest(body, [\"mnemonic\", \"index\", \"privateKey\", \"nonce\"]);\n\n  const {\n    amount,\n    address\n  } = withdrawal;\n  let fromPriv;\n\n  if (mnemonic && index !== undefined) {\n    fromPriv = mnemonic && index ? await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.ETH, testnet, mnemonic, index) : privateKey;\n  } else if (privateKey) {\n    fromPriv = privateKey;\n  } else {\n    throw new Error('No mnemonic or private key is present.');\n  }\n\n  const web3 = await transaction_1.getClient(provider, fromPriv);\n  const gasPrice = body.gasPrice ? web3.utils.toWei(body.gasPrice, 'gwei') : await transaction_1.ethGetGasPriceInWei();\n  const account = await ledger_1.getAccountById(withdrawal.senderAccountId);\n  const {\n    txData,\n    gasLimit\n  } = await exports.prepareEthSignedOffchainTransaction({\n    amount,\n    privateKey: fromPriv,\n    address,\n    currency: account.currency,\n    web3,\n    gasPrice,\n    nonce,\n    gasLimit: body.gasLimit\n  }); // @ts-ignore\n\n  withdrawal.fee = new bignumber_js_1.default(web3.utils.fromWei(new bignumber_js_1.default(body.gasLimit || gasLimit).multipliedBy(gasPrice).toString(), 'ether')).toString();\n  const {\n    id\n  } = await common_1.offchainStoreWithdrawal(withdrawal);\n\n  try {\n    return Object.assign(Object.assign({}, await common_1.offchainBroadcast({\n      txData,\n      withdrawalId: id,\n      currency: model_1.Currency.ETH\n    })), {\n      id\n    });\n  } catch (e) {\n    console.error(e);\n\n    try {\n      await common_1.offchainCancelWithdrawal(id);\n    } catch (e1) {\n      console.log(e);\n      return {\n        id\n      };\n    }\n\n    throw e;\n  }\n};\n\nexports.sendEthOffchainTransaction = sendEthOffchainTransaction;\n/**\n * Send Ethereum ERC20 transaction from Tatum Ledger account to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain or id of the withdrawal, if it was not cancelled automatically\n */\n\nconst sendEthErc20OffchainTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.TransferEthOffchain);\n\n  const {\n    mnemonic,\n    index,\n    privateKey,\n    nonce\n  } = body,\n        withdrawal = __rest(body, [\"mnemonic\", \"index\", \"privateKey\", \"nonce\"]);\n\n  const {\n    amount,\n    address\n  } = withdrawal;\n  let fromPriv;\n\n  if (mnemonic && index !== undefined) {\n    fromPriv = mnemonic && index ? await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.ETH, testnet, mnemonic, index) : privateKey;\n  } else if (privateKey) {\n    fromPriv = privateKey;\n  } else {\n    throw new Error('No mnemonic or private key is present.');\n  }\n\n  const web3 = await transaction_1.getClient(provider, fromPriv);\n  const gasPrice = body.gasPrice ? web3.utils.toWei(body.gasPrice, 'gwei') : await transaction_1.ethGetGasPriceInWei();\n  const account = await ledger_1.getAccountById(withdrawal.senderAccountId);\n\n  if (model_1.ETH_BASED_CURRENCIES.includes(account.currency)) {\n    return exports.sendEthOffchainTransaction(testnet, body, provider);\n  }\n\n  const vc = await ledger_1.getVirtualCurrencyByName(account.currency);\n  const {\n    txData,\n    gasLimit\n  } = await exports.prepareEthErc20SignedOffchainTransaction({\n    amount,\n    privateKey: fromPriv,\n    address,\n    web3,\n    tokenAddress: vc.erc20Address,\n    gasPrice,\n    nonce,\n    gasLimit: body.gasLimit\n  }); // @ts-ignore\n\n  withdrawal.fee = new bignumber_js_1.default(web3.utils.fromWei(new bignumber_js_1.default(gasLimit).multipliedBy(gasPrice).toString(), 'ether')).toString();\n  const {\n    id\n  } = await common_1.offchainStoreWithdrawal(withdrawal);\n\n  try {\n    return Object.assign(Object.assign({}, await common_1.offchainBroadcast({\n      txData,\n      withdrawalId: id,\n      currency: model_1.Currency.ETH\n    })), {\n      id\n    });\n  } catch (e) {\n    console.error(e);\n\n    try {\n      await common_1.offchainCancelWithdrawal(id);\n    } catch (e1) {\n      console.log(e);\n      return {\n        id\n      };\n    }\n\n    throw e;\n  }\n};\n\nexports.sendEthErc20OffchainTransaction = sendEthErc20OffchainTransaction;\n/**\n * Sign Ethereum pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param fromPrivateKey private key to sign transaction with.\n * @param testnet mainnet or testnet version\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst signEthOffchainKMSTransaction = async (tx, fromPrivateKey, testnet, provider) => {\n  if (tx.chain !== model_1.Currency.ETH) {\n    throw Error('Unsupported chain.');\n  }\n\n  const client = await transaction_1.getClient(provider, fromPrivateKey);\n  const transactionConfig = JSON.parse(tx.serializedTransaction);\n  transactionConfig.gas = await client.eth.estimateGas(transactionConfig);\n\n  if (!transactionConfig.nonce) {\n    transactionConfig.nonce = await blockchain_1.ethGetTransactionsCount(client.eth.defaultAccount);\n  }\n\n  if (!transactionConfig.gasPrice || transactionConfig.gasPrice === '0' || transactionConfig.gasPrice === 0 || transactionConfig.gasPrice === '0x0') {\n    transactionConfig.gasPrice = await transaction_1.ethGetGasPriceInWei();\n  }\n\n  return (await client.eth.accounts.signTransaction(transactionConfig, fromPrivateKey)).rawTransaction;\n};\n\nexports.signEthOffchainKMSTransaction = signEthOffchainKMSTransaction;\n/**\n * Sign Ethereum transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @returns transaction data to be broadcast to blockchain.\n * @param body\n */\n\nconst prepareEthSignedOffchainTransaction = async body => {\n  await tatum_1.validateBody(body, model_1.PrepareEthSignedOffchainTransaction);\n  const {\n    currency,\n    address,\n    amount,\n    gasLimit,\n    gasPrice,\n    nonce,\n    privateKey,\n    web3\n  } = body;\n  let tx;\n\n  if (currency === model_1.Currency.ETH) {\n    tx = {\n      from: 0,\n      to: address.trim(),\n      value: web3.utils.toWei(amount, 'ether'),\n      gasPrice,\n      nonce\n    };\n  } else {\n    if (!Object.keys(constants_1.CONTRACT_ADDRESSES).includes(currency)) {\n      throw new Error('Unsupported ETH ERC20 blockchain.');\n    } // @ts-ignore\n\n\n    const contract = new web3.eth.Contract(token_abi_1.default, constants_1.CONTRACT_ADDRESSES[currency]);\n    tx = {\n      from: 0,\n      to: constants_1.CONTRACT_ADDRESSES[currency],\n      data: contract.methods.transfer(address.trim(), `0x${new bignumber_js_1.default(amount).multipliedBy(new bignumber_js_1.default(10).pow(constants_1.CONTRACT_DECIMALS[currency])).toString(16)}`).encodeABI(),\n      gasPrice,\n      nonce\n    };\n  }\n\n  tx.gas = gasLimit || (await web3.eth.estimateGas(tx));\n  return {\n    txData: (await web3.eth.accounts.signTransaction(tx, privateKey)).rawTransaction,\n    gasLimit: tx.gas\n  };\n};\n\nexports.prepareEthSignedOffchainTransaction = prepareEthSignedOffchainTransaction;\n/**\n * Sign Ethereum custom ERC20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @returns transaction data to be broadcast to blockchain.\n * @param body\n */\n\nconst prepareEthErc20SignedOffchainTransaction = async body => {\n  await tatum_1.validateBody(body, model_1.PrepareEthErc20SignedOffchainTransaction);\n  const {\n    amount,\n    privateKey,\n    address,\n    gasPrice,\n    nonce,\n    tokenAddress,\n    web3,\n    gasLimit\n  } = body; // @ts-ignore\n\n  const contract = new web3.eth.Contract(token_abi_1.default, tokenAddress);\n  const tx = {\n    from: 0,\n    to: tokenAddress.trim(),\n    data: contract.methods.transfer(address.trim(), `0x${new bignumber_js_1.default(amount).multipliedBy(new bignumber_js_1.default(10).pow(18)).toString(16)}`).encodeABI(),\n    gasPrice,\n    nonce\n  };\n  tx.gas = gasLimit || (await web3.eth.estimateGas(tx));\n  return {\n    txData: (await web3.eth.accounts.signTransaction(tx, privateKey)).rawTransaction,\n    gasLimit: tx.gas\n  };\n};\n\nexports.prepareEthErc20SignedOffchainTransaction = prepareEthErc20SignedOffchainTransaction;","map":{"version":3,"mappings":"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","names":["sendEthOffchainTransaction","testnet","body","provider","signatureId","kms_1","tatum_1","model_1","mnemonic","index","privateKey","nonce","withdrawal","amount","address","fromPriv","undefined","wallet_1","ETH","Error","web3","transaction_1","gasPrice","utils","toWei","account","ledger_1","senderAccountId","txData","gasLimit","exports","currency","fee","bignumber_js_1","fromWei","multipliedBy","toString","id","common_1","withdrawalId","e","console","error","e1","log","sendEthErc20OffchainTransaction","includes","vc","tokenAddress","erc20Address","signEthOffchainKMSTransaction","tx","fromPrivateKey","chain","client","transactionConfig","JSON","parse","serializedTransaction","gas","eth","estimateGas","blockchain_1","defaultAccount","accounts","signTransaction","rawTransaction","prepareEthSignedOffchainTransaction","from","to","trim","value","Object","keys","constants_1","contract","Contract","token_abi_1","data","methods","transfer","pow","encodeABI","prepareEthErc20SignedOffchainTransaction"],"sourceRoot":"","sources":["../../../src/offchain/eth.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}