{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return async function* (path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('name/resolve', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        stream: true,\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const result of res.ndjson()) {\n      yield result.Path;\n    }\n  };\n});","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/NFT_minter/node_modules/caver-js/node_modules/ipfs-http-client/src/name/resolve.js"],"names":["configure","require","toUrlSearchParams","module","exports","api","path","options","res","post","timeout","signal","searchParams","arg","stream","headers","result","ndjson","Path"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;AAEAE,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC,SAAO,iBAAkBC,IAAlB,EAAsC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC3C,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,cAAT,EAAyB;AACzCC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OADwB;AAEzCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFyB;AAGzCC,MAAAA,YAAY,EAAEV,iBAAiB,CAAC;AAC9BW,QAAAA,GAAG,EAAEP,IADyB;AAE9BQ,QAAAA,MAAM,EAAE,IAFsB;AAG9B,WAAGP;AAH2B,OAAD,CAHU;AAQzCQ,MAAAA,OAAO,EAAER,OAAO,CAACQ;AARwB,KAAzB,CAAlB;;AAWA,eAAW,MAAMC,MAAjB,IAA2BR,GAAG,CAACS,MAAJ,EAA3B,EAAyC;AACvC,YAAMD,MAAM,CAACE,IAAb;AACD;AACF,GAfD;AAgBD,CAjByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async function * (path, options = {}) {\n    const res = await api.post('name/resolve', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        stream: true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      yield result.Path\n    }\n  }\n})\n"]},"metadata":{},"sourceType":"script"}