{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport * as rlp from 'rlp';\nexport class RLP {\n  constructor(profile) {\n    this.profile = profile;\n  }\n  /**\n   * encode data according to profile\n   * @param data the structured data to be encoded\n   */\n\n\n  encode(data) {\n    const packed = pack(data, this.profile, '');\n    return rlp.encode(packed);\n  }\n  /**\n   * decode buffer according to profile\n   * @param buf rlp encoded data\n   */\n\n\n  decode(buf) {\n    const packed = rlp.decode(buf);\n    return unpack(packed, this.profile, '');\n  }\n\n}\n\n(function (RLP) {\n  /** base class of scalar kind */\n  class ScalarKind {}\n\n  RLP.ScalarKind = ScalarKind;\n  /** a buffer kind to keep buffer type */\n\n  class BufferKind extends ScalarKind {\n    data(data, ctx) {\n      assert(Buffer.isBuffer(data), ctx, 'expected buffer');\n      return {\n        encode() {\n          return data;\n        }\n\n      };\n    }\n\n    buffer(buf, ctx) {\n      return {\n        decode() {\n          return buf;\n        }\n\n      };\n    }\n\n  }\n\n  RLP.BufferKind = BufferKind;\n  /** a scalar kind to presents number */\n\n  class NumericKind extends ScalarKind {\n    /**\n     * create a numeric kind\n     * @param maxBytes up limit of data in bytes\n     */\n    constructor(maxBytes) {\n      super();\n      this.maxBytes = maxBytes;\n    }\n\n    data(data, ctx) {\n      assert(typeof data === 'string' || typeof data === 'number', ctx, 'expected string or number');\n\n      if (typeof data === 'string') {\n        const isHex = isHexString(data);\n        const isDec = isDecString(data);\n        assert(isHex || isDec, ctx, 'expected non-negative integer in hex or dec string');\n\n        if (isHex) {\n          assert(data.length > 2, ctx, 'expected valid hex string');\n        }\n      } else {\n        assert(Number.isSafeInteger(data) && data >= 0, ctx, 'expected non-negative safe integer');\n      }\n\n      const bn = new BigNumber(data);\n\n      if (bn.isZero()) {\n        return {\n          encode() {\n            return Buffer.alloc(0);\n          }\n\n        };\n      }\n\n      let hex = bn.toString(16);\n\n      if (hex.length % 2 !== 0) {\n        hex = '0' + hex;\n      }\n\n      assert(this.maxBytes ? hex.length <= this.maxBytes * 2 : true, ctx, `expected number in ${this.maxBytes} bytes`);\n      return {\n        encode() {\n          return Buffer.from(hex, 'hex');\n        }\n\n      };\n    }\n\n    buffer(buf, ctx) {\n      assert(this.maxBytes ? buf.length <= this.maxBytes : true, ctx, `expected less than ${this.maxBytes} bytes`);\n      assert(buf.length === 0 || buf[0] !== 0, ctx, `expected canonical integer (no leading zero bytes)`);\n      return {\n        decode() {\n          if (buf.length === 0) {\n            return 0;\n          }\n\n          const bn = new BigNumber(buf.toString('hex'), 16);\n          const num = bn.toNumber();\n          return Number.isSafeInteger(num) ? num : '0x' + bn.toString(16);\n        }\n\n      };\n    }\n\n  }\n\n  RLP.NumericKind = NumericKind;\n  /** a scalar kind to present blob */\n\n  class BlobKind extends ScalarKind {\n    data(data, ctx) {\n      assert(isHexString(data), ctx, 'expected hex string');\n      assert(data.length % 2 === 0, ctx, 'expected even length hex');\n      return {\n        encode() {\n          return Buffer.from(data.slice(2), 'hex');\n        }\n\n      };\n    }\n\n    buffer(buf, ctx) {\n      return {\n        decode() {\n          return '0x' + buf.toString('hex');\n        }\n\n      };\n    }\n\n  }\n\n  RLP.BlobKind = BlobKind;\n  /** fixed length blob */\n\n  class FixedBlobKind extends BlobKind {\n    constructor(bytes) {\n      super();\n      this.bytes = bytes;\n    }\n\n    data(data, ctx) {\n      const encoder = super.data(data, ctx);\n      assert(data.length === this.bytes * 2 + 2, ctx, `expected hex string presents ${this.bytes} bytes`);\n      return encoder;\n    }\n\n    buffer(buf, ctx) {\n      const decoder = super.buffer(buf, ctx);\n      assert(buf.length === this.bytes, ctx, `expected ${this.bytes} bytes`);\n      return decoder;\n    }\n\n  }\n\n  RLP.FixedBlobKind = FixedBlobKind;\n  /** fixed length blob allowing null */\n\n  class NullableFixedBlobKind extends FixedBlobKind {\n    data(data, ctx) {\n      if (!data) {\n        return {\n          encode() {\n            return Buffer.alloc(0);\n          }\n\n        };\n      }\n\n      return super.data(data, ctx);\n    }\n\n    buffer(buf, ctx) {\n      if (buf.length === 0) {\n        return {\n          decode() {\n            return null;\n          }\n\n        };\n      }\n\n      return super.buffer(buf, ctx);\n    }\n\n  }\n\n  RLP.NullableFixedBlobKind = NullableFixedBlobKind;\n  /** fixed length blob kind that will remove leading zero on encoding and pad zero on decoding */\n\n  class CompactFixedBlobKind extends FixedBlobKind {\n    data(data, ctx) {\n      const buf = super.data(data, ctx).encode();\n      return {\n        encode() {\n          const nzIndex = buf.findIndex(v => v !== 0);\n\n          if (nzIndex >= 0) {\n            return buf.slice(nzIndex);\n          }\n\n          return Buffer.alloc(0);\n        }\n\n      };\n    }\n\n    buffer(buf, ctx) {\n      assert(buf.length <= this.bytes, ctx, `expected less than ${this.bytes} bytes`);\n      assert(buf.length === 0 || buf[0] !== 0, ctx, `expected no leading zero bytes`);\n      const bytes = this.bytes;\n      return {\n        decode() {\n          const zeros = '0'.repeat((bytes - buf.length) * 2);\n          return '0x' + zeros + buf.toString('hex');\n        }\n\n      };\n    }\n\n  }\n\n  RLP.CompactFixedBlobKind = CompactFixedBlobKind;\n})(RLP || (RLP = {}));\n\nfunction pack(obj, profile, ctx) {\n  ctx = ctx ? ctx + '.' + profile.name : profile.name;\n  const kind = profile.kind;\n\n  if (kind instanceof RLP.ScalarKind) {\n    return kind.data(obj, ctx).encode();\n  }\n\n  if (Array.isArray(kind)) {\n    return kind.map(k => pack(obj[k.name], k, ctx));\n  }\n\n  assert(Array.isArray(obj), ctx, 'expected array');\n  const item = kind.item;\n  return obj.map((part, i) => pack(part, {\n    name: '#' + i,\n    kind: item\n  }, ctx));\n}\n\nfunction unpack(packed, profile, ctx) {\n  ctx = ctx ? ctx + '.' + profile.name : profile.name;\n  const kind = profile.kind;\n\n  if (kind instanceof RLP.ScalarKind) {\n    assert(Buffer.isBuffer(packed), ctx, 'expected Buffer');\n    return kind.buffer(packed, ctx).decode();\n  }\n\n  if (Array.isArray(kind)) {\n    assert(Array.isArray(packed), ctx, 'expected array');\n    const parts = packed;\n    assert(parts.length === kind.length, ctx, `expected ${kind.length} items, but got ${parts.length}`);\n    return kind.reduce((o, p, i) => {\n      o[p.name] = unpack(parts[i], p, ctx);\n      return o;\n    }, {});\n  }\n\n  assert(Array.isArray(packed), ctx, 'expected array');\n  const item = kind.item;\n  return packed.map((part, i) => unpack(part, {\n    name: '#' + i,\n    kind: item\n  }, ctx));\n}\n\nfunction assert(cond, ctx, msg) {\n  if (!cond) {\n    throw new RLPError(`${ctx}: ${msg}`);\n  }\n}\n\nfunction isHexString(str) {\n  return /^0x[0-9a-f]*$/i.test(str);\n}\n\nfunction isDecString(str) {\n  return /^[0-9]+$/.test(str);\n}\n\nclass RLPError extends Error {\n  constructor(msg) {\n    super(msg);\n    this.name = RLPError.name;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["BigNumber","rlp","RLP","constructor","profile","encode","data","packed","pack","decode","buf","unpack","ScalarKind","BufferKind","ctx","assert","Buffer","isBuffer","buffer","NumericKind","maxBytes","isHex","isHexString","isDec","isDecString","length","Number","isSafeInteger","bn","isZero","alloc","hex","toString","from","num","toNumber","BlobKind","slice","FixedBlobKind","bytes","encoder","decoder","NullableFixedBlobKind","CompactFixedBlobKind","nzIndex","findIndex","v","zeros","repeat","obj","name","kind","Array","isArray","map","k","item","part","i","parts","reduce","o","p","cond","msg","RLPError","str","test","Error"],"sourceRoot":"","sources":["../src/rlp.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}