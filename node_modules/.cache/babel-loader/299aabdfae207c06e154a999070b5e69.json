{"ast":null,"code":"'use strict';\n\nvar assert = require('assert');\n\nvar js = require('./js');\n\nvar $ = require('./preconditions');\n\nfunction equals(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  var length = a.length;\n\n  for (var i = 0; i < length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = {\n  /**\n   * Fill a buffer with a value.\n   *\n   * @param {Buffer} buffer\n   * @param {number} value\n   * @return {Buffer}\n   */\n  fill: function fill(buffer, value) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    $.checkArgumentType(value, 'number', 'value');\n    var length = buffer.length;\n\n    for (var i = 0; i < length; i++) {\n      buffer[i] = value;\n    }\n\n    return buffer;\n  },\n\n  /**\n   * Return a copy of a buffer\n   *\n   * @param {Buffer} original\n   * @return {Buffer}\n   */\n  copy: function (original) {\n    var buffer = Buffer.alloc(original.length);\n    original.copy(buffer);\n    return buffer;\n  },\n\n  /**\n   * Returns true if the given argument is an instance of a buffer. Tests for\n   * both node's Buffer and Uint8Array\n   *\n   * @param {*} arg\n   * @return {boolean}\n   */\n  isBuffer: function isBuffer(arg) {\n    return Buffer.isBuffer(arg) || arg instanceof Uint8Array;\n  },\n\n  /**\n   * Returns a zero-filled byte array\n   *\n   * @param {number} bytes\n   * @return {Buffer}\n   */\n  emptyBuffer: function emptyBuffer(bytes) {\n    $.checkArgumentType(bytes, 'number', 'bytes');\n    var result = Buffer.alloc(bytes);\n\n    for (var i = 0; i < bytes; i++) {\n      result.write('\\0', i);\n    }\n\n    return result;\n  },\n\n  /**\n   * Concatenates a buffer\n   *\n   * Shortcut for <tt>buffer.Buffer.concat</tt>\n   */\n  concat: Buffer.concat,\n  equals: equals,\n  equal: equals,\n\n  /**\n   * Transforms a number from 0 to 255 into a Buffer of size 1 with that value\n   *\n   * @param {number} integer\n   * @return {Buffer}\n   */\n  integerAsSingleByteBuffer: function integerAsSingleByteBuffer(integer) {\n    $.checkArgumentType(integer, 'number', 'integer');\n    return Buffer.from([integer & 0xff]);\n  },\n\n  /**\n   * Transform a 4-byte integer into a Buffer of length 4.\n   *\n   * @param {number} integer\n   * @return {Buffer}\n   */\n  integerAsBuffer: function integerAsBuffer(integer) {\n    $.checkArgumentType(integer, 'number', 'integer');\n    var bytes = [];\n    bytes.push(integer >> 24 & 0xff);\n    bytes.push(integer >> 16 & 0xff);\n    bytes.push(integer >> 8 & 0xff);\n    bytes.push(integer & 0xff);\n    return Buffer.from(bytes);\n  },\n\n  /**\n   * Transform the first 4 values of a Buffer into a number, in little endian encoding\n   *\n   * @param {Buffer} buffer\n   * @return {number}\n   */\n  integerFromBuffer: function integerFromBuffer(buffer) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    return buffer[0] << 24 | buffer[1] << 16 | buffer[2] << 8 | buffer[3];\n  },\n\n  /**\n   * Transforms the first byte of an array into a number ranging from -128 to 127\n   * @param {Buffer} buffer\n   * @return {number}\n   */\n  integerFromSingleByteBuffer: function integerFromBuffer(buffer) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    return buffer[0];\n  },\n\n  /**\n   * Transforms a buffer into a string with a number in hexa representation\n   *\n   * Shorthand for <tt>buffer.toString('hex')</tt>\n   *\n   * @param {Buffer} buffer\n   * @return {string}\n   */\n  bufferToHex: function bufferToHex(buffer) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    return buffer.toString('hex');\n  },\n\n  /**\n   * Reverse a buffer\n   * @param {Buffer} param\n   * @return {Buffer}\n   */\n  reverse: function reverse(param) {\n    return Buffer.from(param).reverse();\n  },\n\n  /**\n   * Transforms an hexa encoded string into a Buffer with binary values\n   *\n   * Shorthand for <tt>Buffer(string, 'hex')</tt>\n   *\n   * @param {string} string\n   * @return {Buffer}\n   */\n  hexToBuffer: function hexToBuffer(string) {\n    assert(js.isHexa(string));\n    return Buffer.from(string, 'hex');\n  }\n};\nmodule.exports.NULL_HASH = module.exports.fill(Buffer.alloc(32), 0);\nmodule.exports.EMPTY_BUFFER = Buffer.alloc(0);","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/NFT_minter/node_modules/bitcore-lib-ltc/lib/util/buffer.js"],"names":["assert","require","js","$","equals","a","b","length","i","module","exports","fill","buffer","value","checkArgumentType","copy","original","Buffer","alloc","isBuffer","arg","Uint8Array","emptyBuffer","bytes","result","write","concat","equal","integerAsSingleByteBuffer","integer","from","integerAsBuffer","push","integerFromBuffer","integerFromSingleByteBuffer","bufferToHex","toString","reverse","param","hexToBuffer","string","isHexa","NULL_HASH","EMPTY_BUFFER"],"mappings":"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","sourcesContent":["'use strict';\n\nvar assert = require('assert');\n\nvar js = require('./js');\nvar $ = require('./preconditions');\n\nfunction equals(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  var length = a.length;\n  for (var i = 0; i < length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = {\n  /**\n   * Fill a buffer with a value.\n   *\n   * @param {Buffer} buffer\n   * @param {number} value\n   * @return {Buffer}\n   */\n  fill: function fill(buffer, value) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    $.checkArgumentType(value, 'number', 'value');\n    var length = buffer.length;\n    for (var i = 0; i < length; i++) {\n      buffer[i] = value;\n    }\n    return buffer;\n  },\n\n  /**\n   * Return a copy of a buffer\n   *\n   * @param {Buffer} original\n   * @return {Buffer}\n   */\n  copy: function(original) {\n    var buffer = Buffer.alloc(original.length);\n    original.copy(buffer);\n    return buffer;\n  },\n\n  /**\n   * Returns true if the given argument is an instance of a buffer. Tests for\n   * both node's Buffer and Uint8Array\n   *\n   * @param {*} arg\n   * @return {boolean}\n   */\n  isBuffer: function isBuffer(arg) {\n    return Buffer.isBuffer(arg) || arg instanceof Uint8Array;\n  },\n\n  /**\n   * Returns a zero-filled byte array\n   *\n   * @param {number} bytes\n   * @return {Buffer}\n   */\n  emptyBuffer: function emptyBuffer(bytes) {\n    $.checkArgumentType(bytes, 'number', 'bytes');\n    var result = Buffer.alloc(bytes);\n    for (var i = 0; i < bytes; i++) {\n      result.write('\\0', i);\n    }\n    return result;\n  },\n\n  /**\n   * Concatenates a buffer\n   *\n   * Shortcut for <tt>buffer.Buffer.concat</tt>\n   */\n  concat: Buffer.concat,\n\n  equals: equals,\n  equal: equals,\n\n  /**\n   * Transforms a number from 0 to 255 into a Buffer of size 1 with that value\n   *\n   * @param {number} integer\n   * @return {Buffer}\n   */\n  integerAsSingleByteBuffer: function integerAsSingleByteBuffer(integer) {\n    $.checkArgumentType(integer, 'number', 'integer');\n    return Buffer.from([integer & 0xff]);\n  },\n\n  /**\n   * Transform a 4-byte integer into a Buffer of length 4.\n   *\n   * @param {number} integer\n   * @return {Buffer}\n   */\n  integerAsBuffer: function integerAsBuffer(integer) {\n    $.checkArgumentType(integer, 'number', 'integer');\n    var bytes = [];\n    bytes.push((integer >> 24) & 0xff);\n    bytes.push((integer >> 16) & 0xff);\n    bytes.push((integer >> 8) & 0xff);\n    bytes.push(integer & 0xff);\n    return Buffer.from(bytes);\n  },\n\n  /**\n   * Transform the first 4 values of a Buffer into a number, in little endian encoding\n   *\n   * @param {Buffer} buffer\n   * @return {number}\n   */\n  integerFromBuffer: function integerFromBuffer(buffer) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    return buffer[0] << 24 | buffer[1] << 16 | buffer[2] << 8 | buffer[3];\n  },\n\n  /**\n   * Transforms the first byte of an array into a number ranging from -128 to 127\n   * @param {Buffer} buffer\n   * @return {number}\n   */\n  integerFromSingleByteBuffer: function integerFromBuffer(buffer) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    return buffer[0];\n  },\n\n  /**\n   * Transforms a buffer into a string with a number in hexa representation\n   *\n   * Shorthand for <tt>buffer.toString('hex')</tt>\n   *\n   * @param {Buffer} buffer\n   * @return {string}\n   */\n  bufferToHex: function bufferToHex(buffer) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    return buffer.toString('hex');\n  },\n\n  /**\n   * Reverse a buffer\n   * @param {Buffer} param\n   * @return {Buffer}\n   */\n  reverse: function reverse(param) {\n    return (Buffer.from(param)).reverse();\n  },\n\n  /**\n   * Transforms an hexa encoded string into a Buffer with binary values\n   *\n   * Shorthand for <tt>Buffer(string, 'hex')</tt>\n   *\n   * @param {string} string\n   * @return {Buffer}\n   */\n  hexToBuffer: function hexToBuffer(string) {\n    assert(js.isHexa(string));\n    return Buffer.from(string, 'hex');\n  }\n};\n\nmodule.exports.NULL_HASH = module.exports.fill(Buffer.alloc(32), 0);\nmodule.exports.EMPTY_BUFFER = Buffer.alloc(0);\n"]},"metadata":{},"sourceType":"script"}