{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccountOnNetwork = exports.Account = void 0;\n\nconst address_1 = require(\"./address\");\n\nconst nonce_1 = require(\"./nonce\");\n\nconst balance_1 = require(\"./balance\");\n\nconst balanceBuilder_1 = require(\"./balanceBuilder\");\n/**\n * An abstraction representing an account (user or Smart Contract) on the Network.\n */\n\n\nclass Account {\n  /**\n   * Creates an account object from an address\n   */\n  constructor(address) {\n    /**\n     * The address of the account.\n     */\n    this.address = new address_1.Address();\n    /**\n     * The nonce of the account (the account sequence number).\n     */\n\n    this.nonce = new nonce_1.Nonce(0);\n    /**\n     * The balance of the account.\n     */\n\n    this.balance = balanceBuilder_1.Egld(\"0\");\n    this.asOnNetwork = new AccountOnNetwork();\n    this.address = address;\n  }\n  /**\n   * Queries the details of the account on the Network\n   * @param provider the Network provider\n   * @param cacheLocally whether to save the query response within the object, locally\n   */\n\n\n  getAsOnNetwork(provider) {\n    let cacheLocally = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return __awaiter(this, void 0, void 0, function* () {\n      this.address.assertNotEmpty();\n      let response = yield provider.getAccount(this.address);\n\n      if (cacheLocally) {\n        this.asOnNetwork = response;\n      }\n\n      return response;\n    });\n  }\n  /**\n   * Gets a previously saved query response\n   */\n\n\n  getAsOnNetworkCached() {\n    return this.asOnNetwork;\n  }\n  /**\n   * Synchronizes account properties (such as nonce, balance) with the ones queried from the Network\n   * @param provider the Network provider\n   */\n\n\n  sync(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getAsOnNetwork(provider, true);\n      this.nonce = this.asOnNetwork.nonce;\n      this.balance = this.asOnNetwork.balance;\n    });\n  }\n  /**\n   * Increments (locally) the nonce (the account sequence number).\n   */\n\n\n  incrementNonce() {\n    this.nonce = this.nonce.increment();\n  }\n  /**\n   * Gets then increments (locally) the nonce (the account sequence number).\n   */\n\n\n  getNonceThenIncrement() {\n    let nonce = this.nonce;\n    this.nonce = this.nonce.increment();\n    return nonce;\n  }\n  /**\n   * Converts the account to a pretty, plain JavaScript object.\n   */\n\n\n  toJSON() {\n    return {\n      address: this.address.bech32(),\n      nonce: this.nonce.valueOf(),\n      balance: this.balance.toString()\n    };\n  }\n\n}\n\nexports.Account = Account;\n/**\n * A plain view of an account, as queried from the Network.\n */\n\nclass AccountOnNetwork {\n  constructor(init) {\n    this.address = new address_1.Address();\n    this.nonce = new nonce_1.Nonce(0);\n    this.balance = balanceBuilder_1.Egld(0);\n    this.code = \"\";\n    this.userName = \"\";\n    Object.assign(this, init);\n  }\n\n  static fromHttpResponse(payload) {\n    let result = new AccountOnNetwork();\n    result.address = new address_1.Address(payload[\"address\"] || 0);\n    result.nonce = new nonce_1.Nonce(payload[\"nonce\"] || 0);\n    result.balance = balance_1.Balance.fromString(payload[\"balance\"]);\n    result.code = payload[\"code\"];\n    result.userName = payload[\"username\"];\n    return result;\n  }\n\n}\n\nexports.AccountOnNetwork = AccountOnNetwork;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;AAEA;;;;;AAGA,MAAaA,OAAb,CAAoB;AAkBhB;;;AAGAC,cAAYC,OAAZ,EAA4B;AApB5B;;;AAGS,mBAAmB,IAAIC,iBAAJ,EAAnB;AAET;;;;AAGA,iBAAe,IAAIC,aAAJ,CAAU,CAAV,CAAf;AAEA;;;;AAGA,mBAAmBC,sBAAK,GAAL,CAAnB;AAEQ,uBAAgC,IAAIC,gBAAJ,EAAhC;AAMJ,SAAKJ,OAAL,GAAeA,OAAf;AACH;AAED;;;;;;;AAKMK,gBAAc,CAACC,QAAD,EAAkD;AAAA,QAA5BC,YAA4B,uEAAJ,IAAI;;AAClE,WAAKP,OAAL,CAAaQ,cAAb;AAEA,UAAIC,QAAQ,GAAG,MAAMH,QAAQ,CAACI,UAAT,CAAoB,KAAKV,OAAzB,CAArB;;AAEA,UAAIO,YAAJ,EAAkB;AACd,aAAKI,WAAL,GAAmBF,QAAnB;AACH;;AAED,aAAOA,QAAP;AACH;AAAA;AAED;;;;;AAGAG,sBAAoB;AAChB,WAAO,KAAKD,WAAZ;AACH;AAED;;;;;;AAIME,MAAI,CAACP,QAAD,EAAoB;;AAC1B,YAAM,KAAKD,cAAL,CAAoBC,QAApB,EAA8B,IAA9B,CAAN;AACA,WAAKQ,KAAL,GAAa,KAAKH,WAAL,CAAiBG,KAA9B;AACA,WAAKC,OAAL,GAAe,KAAKJ,WAAL,CAAiBI,OAAhC;AACH;AAAA;AAED;;;;;AAGAC,gBAAc;AACV,SAAKF,KAAL,GAAa,KAAKA,KAAL,CAAWG,SAAX,EAAb;AACH;AAED;;;;;AAGAC,uBAAqB;AACjB,QAAIJ,KAAK,GAAG,KAAKA,KAAjB;AACA,SAAKA,KAAL,GAAa,KAAKA,KAAL,CAAWG,SAAX,EAAb;AACA,WAAOH,KAAP;AACH;AAED;;;;;AAGAK,QAAM;AACF,WAAO;AACHnB,aAAO,EAAE,KAAKA,OAAL,CAAaoB,MAAb,EADN;AAEHN,WAAK,EAAE,KAAKA,KAAL,CAAWO,OAAX,EAFJ;AAGHN,aAAO,EAAE,KAAKA,OAAL,CAAaO,QAAb;AAHN,KAAP;AAKH;;AApFe;;AAApBC;AAuFA;;;;AAGA,MAAanB,gBAAb,CAA6B;AAOzBL,cAAYyB,IAAZ,EAA4C;AAN5C,mBAAmB,IAAIvB,iBAAJ,EAAnB;AACA,iBAAe,IAAIC,aAAJ,CAAU,CAAV,CAAf;AACA,mBAAmBC,sBAAK,CAAL,CAAnB;AACA,gBAAe,EAAf;AACA,oBAAmB,EAAnB;AAGIsB,UAAM,CAACC,MAAP,CAAc,IAAd,EAAoBF,IAApB;AACH;;AAEsB,SAAhBG,gBAAgB,CAACC,OAAD,EAAa;AAChC,QAAIC,MAAM,GAAG,IAAIzB,gBAAJ,EAAb;AAEAyB,UAAM,CAAC7B,OAAP,GAAiB,IAAIC,iBAAJ,CAAY2B,OAAO,CAAC,SAAD,CAAP,IAAsB,CAAlC,CAAjB;AACAC,UAAM,CAACf,KAAP,GAAe,IAAIZ,aAAJ,CAAU0B,OAAO,CAAC,OAAD,CAAP,IAAoB,CAA9B,CAAf;AACAC,UAAM,CAACd,OAAP,GAAiBe,kBAAQC,UAAR,CAAmBH,OAAO,CAAC,SAAD,CAA1B,CAAjB;AACAC,UAAM,CAACG,IAAP,GAAcJ,OAAO,CAAC,MAAD,CAArB;AACAC,UAAM,CAACI,QAAP,GAAkBL,OAAO,CAAC,UAAD,CAAzB;AAEA,WAAOC,MAAP;AACH;;AArBwB;;AAA7BN","names":["Account","constructor","address","address_1","nonce_1","balanceBuilder_1","AccountOnNetwork","getAsOnNetwork","provider","cacheLocally","assertNotEmpty","response","getAccount","asOnNetwork","getAsOnNetworkCached","sync","nonce","balance","incrementNonce","increment","getNonceThenIncrement","toJSON","bech32","valueOf","toString","exports","init","Object","assign","fromHttpResponse","payload","result","balance_1","fromString","code","userName"],"sourceRoot":"","sources":["../src/account.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}