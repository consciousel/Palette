{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mint721BatchBuiltInPrivateKeyValidator = void 0;\n\nconst class_validator_1 = require(\"class-validator\");\n\nconst request_1 = require(\"../request\");\n\nlet Mint721BatchBuiltInPrivateKeyValidator = class Mint721BatchBuiltInPrivateKeyValidator {\n  constructor() {\n    this.message = null;\n  }\n\n  defaultMessage(validationArguments) {\n    if (this.message) {\n      return this.message;\n    }\n\n    return 'If you fill signatureId or privateKey/secret/fromPrivateKey, then tokenId, contractAddress must be present.';\n  }\n\n  validate(value, validationArguments) {\n    const data = validationArguments === null || validationArguments === void 0 ? void 0 : validationArguments.object;\n    const chains = [request_1.Currency.BSC, request_1.Currency.ETH, request_1.Currency.CELO, request_1.Currency.ONE, request_1.Currency.MATIC, request_1.Currency.KLAY];\n    const isAllowedChain = chains.includes(data.chain);\n\n    if (data.minter) {\n      if (!isAllowedChain) {\n        this.message = `Chain is not supported for external minters. Minter is available only on these chains - ${chains}`;\n        return false;\n      }\n\n      if (data.fromPrivateKey || data.signatureId) {\n        this.message = `If minter is present, no private key or signatureId must be entered. Minter is available only on these chains - ${chains}`;\n        return false;\n      }\n\n      if (!this.validateRequiredFields(data)) {\n        return false;\n      }\n\n      return true;\n    }\n\n    if (!this.validateRequiredFields(data)) {\n      return false;\n    }\n\n    if (!data.fromPrivateKey && !data.signatureId || data.fromPrivateKey && data.signatureId) {\n      this.message = 'Field fromPrivateKey or signatureId must be filled.';\n      return false;\n    }\n\n    return true;\n  }\n\n  validateRequiredFields(data) {\n    if (data.chain === request_1.Currency.CELO && (!data.feeCurrency || ![request_1.Currency.CELO, request_1.Currency.CUSD, request_1.Currency.CEUR].includes(data.feeCurrency))) {\n      this.message = 'CELO chain must have assigned feeCurrency field.';\n      return false;\n    }\n\n    return true;\n  }\n\n};\nMint721BatchBuiltInPrivateKeyValidator = __decorate([class_validator_1.ValidatorConstraint({\n  name: 'builtInPrivateKey',\n  async: false\n})], Mint721BatchBuiltInPrivateKeyValidator);\nexports.Mint721BatchBuiltInPrivateKeyValidator = Mint721BatchBuiltInPrivateKeyValidator;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AAGA,IAAaA,sCAAsC,GAAnD,MAAaA,sCAAb,CAAmD;AAAnDC;AAEU,mBAAyB,IAAzB;AA6CT;;AA3CQC,gBAAc,CAACC,mBAAD,EAA0C;AAC7D,QAAI,KAAKC,OAAT,EAAkB;AAChB,aAAO,KAAKA,OAAZ;AACD;;AACD,WAAO,6GAAP;AACD;;AAEMC,UAAQ,CAACC,KAAD,EAAaH,mBAAb,EAAsD;AACnE,UAAMI,IAAI,GAAGJ,mBAAmB,SAAnB,uBAAmB,WAAnB,GAAmB,MAAnB,sBAAmB,CAAEK,MAAlC;AACA,UAAMC,MAAM,GAAG,CAACC,mBAASC,GAAV,EAAeD,mBAASE,GAAxB,EAA6BF,mBAASG,IAAtC,EAA4CH,mBAASI,GAArD,EAA0DJ,mBAASK,KAAnE,EAA0EL,mBAASM,IAAnF,CAAf;AACA,UAAMC,cAAc,GAAGR,MAAM,CAACS,QAAP,CAAgBX,IAAI,CAACY,KAArB,CAAvB;;AAEA,QAAIZ,IAAI,CAACa,MAAT,EAAiB;AACf,UAAI,CAACH,cAAL,EAAqB;AACnB,aAAKb,OAAL,GAAe,2FAA2FK,MAAM,EAAhH;AACA,eAAO,KAAP;AACD;;AACD,UAAIF,IAAI,CAACc,cAAL,IAAuBd,IAAI,CAACe,WAAhC,EAA6C;AAC3C,aAAKlB,OAAL,GAAe,mHAAmHK,MAAM,EAAxI;AACA,eAAO,KAAP;AACD;;AACD,UAAI,CAAC,KAAKc,sBAAL,CAA4BhB,IAA5B,CAAL,EAAwC;AACtC,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD;;AACD,QAAI,CAAC,KAAKgB,sBAAL,CAA4BhB,IAA5B,CAAL,EAAwC;AACtC,aAAO,KAAP;AACD;;AACD,QAAK,CAACA,IAAI,CAACc,cAAN,IAAwB,CAACd,IAAI,CAACe,WAA/B,IAAgDf,IAAI,CAACc,cAAL,IAAuBd,IAAI,CAACe,WAAhF,EAA8F;AAC5F,WAAKlB,OAAL,GAAe,qDAAf;AACA,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAEOmB,wBAAsB,CAAChB,IAAD,EAAU;AACtC,QAAIA,IAAI,CAACY,KAAL,KAAeT,mBAASG,IAAxB,KAAiC,CAACN,IAAI,CAACiB,WAAN,IAAqB,CAAC,CAACd,mBAASG,IAAV,EAAgBH,mBAASe,IAAzB,EAA+Bf,mBAASgB,IAAxC,EAA8CR,QAA9C,CAAuDX,IAAI,CAACiB,WAA5D,CAAvD,CAAJ,EAAsI;AACpI,WAAKpB,OAAL,GAAe,kDAAf;AACA,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD;;AA9CgD,CAAnD;AAAaJ,sCAAsC,eADlD2B,sCAAoB;AAAEC,MAAI,EAAE,mBAAR;AAA6BC,OAAK,EAAE;AAApC,CAApB,CACkD,GAAtC7B,sCAAsC,CAAtC;AAAA8B","names":["Mint721BatchBuiltInPrivateKeyValidator","constructor","defaultMessage","validationArguments","message","validate","value","data","object","chains","request_1","BSC","ETH","CELO","ONE","MATIC","KLAY","isAllowedChain","includes","chain","minter","fromPrivateKey","signatureId","validateRequiredFields","feeCurrency","CUSD","CEUR","class_validator_1","name","async","exports"],"sourceRoot":"","sources":["../../../../src/model/validation/Mint721BatchBuiltInPrivateKeyValidator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}