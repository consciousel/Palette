{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendEthDeployMultiTokenTransaction = exports.sendEthMultiTokenBatchTransaction = exports.sendEthMultiTokenTransaction = exports.sendDeployErc721Transaction = exports.sendErc721Transaction = exports.sendUpdateCashbackForAuthorErc721Transaction = exports.sendBurnErc721Transaction = exports.sendMintMultipleErc721Transaction = exports.sendMintMultipleErc721ProvenanceTransaction = exports.sendEthMintMultipleCashbackErc721SignedTransaction = exports.sendMintErc721ProvenanceTransaction = exports.sendMintCashbackErc721Transaction = exports.sendMintErc721Transaction = exports.sendSmartContractMethodInvocationTransaction = exports.sendDeployErc20Transaction = exports.sendCustomErc20Transaction = exports.sendEthOrErc20Transaction = exports.sendStoreDataTransaction = exports.sendSmartContractReadMethodInvocationTransaction = exports.getEthErc20ContractDecimals = exports.prepareEthDeployErc721SignedTransaction = exports.prepareEthDeployMultiTokenSignedTransaction = exports.prepareEthTransferMultiTokenSignedTransaction = exports.prepareEthBatchTransferMultiTokenSignedTransaction = exports.prepareEthBurnMultiTokenSignedTransaction = exports.prepareEthBurnBatchMultiTokenSignedTransaction = exports.prepareEthMintMultiTokenSignedTransaction = exports.prepareEthMintMultiTokenBatchSignedTransaction = exports.prepareEthTransferErc721SignedTransaction = exports.prepareEthUpdateCashbackForAuthorErc721SignedTransaction = exports.prepareEthBurnErc721SignedTransaction = exports.prepareEthMintMultipleErc721SignedTransaction = exports.prepareEthMintMultipleCashbackErc721SignedTransaction = exports.prepareEthMintCashbackErc721SignedTransaction = exports.prepareEthMintErc721SignedTransaction = exports.prepareEthMintMultipleErc721ProvenanceSignedTransaction = exports.prepareEthMintErc721ProvenanceSignedTransaction = exports.prepareEthDeployAuctionSignedTransaction = exports.prepareEthDeployMarketplaceListingSignedTransaction = exports.prepareSmartContractWriteMethodInvocation = exports.prepareDeployErc20SignedTransaction = exports.prepareCustomErc20SignedTransaction = exports.prepareEthOrErc20SignedTransaction = exports.prepareEthBurnErc20SignedTransaction = exports.prepareEthMintErc20SignedTransaction = exports.prepareStoreDataTransaction = exports.prepareEthGenerateCustodialWalletSignedTransaction = exports.signEthKMSTransaction = exports.getClient = exports.ethGetGasPriceInWei = void 0;\nexports.sendEthDeployMarketplaceListingSignedTransaction = exports.sendEthGenerateCustodialWalletSignedTransaction = exports.sendEthBurnBatchMultiTokenTransaction = exports.sendEthBurnMultiTokenTransaction = exports.sendEthMintMultiTokenBatchTransaction = exports.sendEthMintMultiTokenTransaction = void 0;\n\nconst bignumber_js_1 = require(\"bignumber.js\");\n\nconst web3_1 = __importDefault(require(\"web3\"));\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst constants_1 = require(\"../constants\");\n\nconst erc1155_abi_1 = __importDefault(require(\"../contracts/erc1155/erc1155_abi\"));\n\nconst erc1155_bytecode_1 = __importDefault(require(\"../contracts/erc1155/erc1155_bytecode\"));\n\nconst token_abi_1 = __importDefault(require(\"../contracts/erc20/token_abi\"));\n\nconst token_abi_2 = __importDefault(require(\"../contracts/erc20/token_abi\"));\n\nconst token_bytecode_1 = __importDefault(require(\"../contracts/erc20/token_bytecode\"));\n\nconst erc721_abi_1 = __importDefault(require(\"../contracts/erc721Cashback/erc721_abi\"));\n\nconst erc721_bytecode_1 = __importDefault(require(\"../contracts/erc721Cashback/erc721_bytecode\"));\n\nconst erc721Provenance_abi_1 = __importDefault(require(\"../contracts/erc721Provenance/erc721Provenance_abi\"));\n\nconst erc721Provenance_bytecode_1 = __importDefault(require(\"../contracts/erc721Provenance/erc721Provenance_bytecode\"));\n\nconst marketplace_1 = require(\"../contracts/marketplace\");\n\nconst model_1 = require(\"../model\");\n\nconst nft_1 = require(\"../nft\");\n\nconst wallet_1 = require(\"../wallet\");\n\nconst erc721_abi_2 = __importDefault(require(\"../contracts/erc721General/erc721_abi\"));\n\nconst erc721_bytecode_2 = __importDefault(require(\"../contracts/erc721General/erc721_bytecode\"));\n/**\n * Estimate Gas price for the transaction.\n */\n\n\nconst ethGetGasPriceInWei = async () => {\n  let gasStationUrl = 'https://ethgasstation.info/json/ethgasAPI.json';\n\n  if (process.env.TATUM_GAS_STATION_API_KEY) {\n    gasStationUrl = `${gasStationUrl}?apiKey=${process.env.TATUM_GAS_STATION_API_KEY}`;\n  }\n\n  const data = await Promise.all([tatum_1.axios.get(gasStationUrl.toString()).then(response => `${response.data.fastest / 10}`)]);\n  const gasPrice = data[0] === '0' ? '20' : data[0];\n  return web3_1.default.utils.toWei(gasPrice, 'gwei');\n};\n\nexports.ethGetGasPriceInWei = ethGetGasPriceInWei;\n/**\n * Returns Ethereum server to connect to.\n *\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @param privateKey\n */\n\nconst getClient = (provider, privateKey) => {\n  let url = provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/ethereum/web3/${process.env.TATUM_API_KEY}`;\n\n  if (process.env.TESTNET_TYPE === 'ethereum-rinkeby') {\n    url += '?testnetType=ethereum-rinkeby';\n  }\n\n  const web3 = new web3_1.default(url);\n\n  if (privateKey) {\n    web3.eth.accounts.wallet.add(privateKey);\n    web3.eth.defaultAccount = web3.eth.accounts.wallet[0].address;\n  }\n\n  return web3;\n};\n\nexports.getClient = getClient;\n/**\n * Sign Ethereum pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param fromPrivateKey private key to sign transaction with.\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst signEthKMSTransaction = async (tx, fromPrivateKey, provider) => {\n  if (tx.chain !== model_1.Currency.ETH) {\n    throw Error('Unsupported chain.');\n  }\n\n  const client = exports.getClient(provider, fromPrivateKey);\n  const transactionConfig = JSON.parse(tx.serializedTransaction);\n  const gas = await client.eth.estimateGas(transactionConfig);\n\n  if (!transactionConfig.gas) {\n    transactionConfig.gas = gas;\n  }\n\n  if (!transactionConfig.nonce) {\n    transactionConfig.nonce = await blockchain_1.ethGetTransactionsCount(client.eth.defaultAccount);\n  }\n\n  if (!transactionConfig.gasPrice || transactionConfig.gasPrice === '0' || transactionConfig.gasPrice === 0 || transactionConfig.gasPrice === '0x0') {\n    transactionConfig.gasPrice = await exports.ethGetGasPriceInWei();\n  }\n\n  return (await client.eth.accounts.signTransaction(transactionConfig, fromPrivateKey)).rawTransaction;\n};\n\nexports.signEthKMSTransaction = signEthKMSTransaction;\n/**\n * Sign Eth generate custodial wallet address transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the ETH Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthGenerateCustodialWalletSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.GenerateCustodialAddress);\n  const client = exports.getClient(provider, body.fromPrivateKey);\n  const {\n    abi,\n    code\n  } = wallet_1.obtainCustodialAddressType(body); // @ts-ignore\n\n  const contract = new client.eth.Contract(abi);\n  const deploy = contract.deploy({\n    data: code\n  });\n  const tx = {\n    from: 0,\n    data: deploy.encodeABI(),\n    nonce: body.nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, body.signatureId, body.fromPrivateKey, body.fee);\n};\n\nexports.prepareEthGenerateCustodialWalletSignedTransaction = prepareEthGenerateCustodialWalletSignedTransaction;\n/**\n * Sign Ethereum Store data transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareStoreDataTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.CreateRecord);\n  const {\n    fromPrivateKey,\n    to,\n    ethFee,\n    data,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getClient(provider, fromPrivateKey);\n  const address = to || client.eth.defaultAccount;\n  const hexData = client.utils.isHex(data) ? client.utils.stringToHex(data) : client.utils.toHex(data);\n  const addressNonce = nonce ? nonce : await blockchain_1.ethGetTransactionsCount(address);\n  const customFee = ethFee ? Object.assign(Object.assign({}, ethFee), {\n    gasPrice: client.utils.toWei(ethFee.gasPrice, 'gwei')\n  }) : {\n    gasLimit: `${hexData.length * 68 + 21000}`,\n    gasPrice: await exports.ethGetGasPriceInWei()\n  };\n  const tx = {\n    from: 0,\n    to: address.trim(),\n    value: '0',\n    gasPrice: customFee.gasPrice,\n    gas: customFee.gasLimit,\n    data: hexData,\n    nonce: addressNonce\n  };\n\n  if (signatureId) {\n    return JSON.stringify(tx);\n  }\n\n  return (await client.eth.accounts.signTransaction(tx, fromPrivateKey)).rawTransaction;\n};\n\nexports.prepareStoreDataTransaction = prepareStoreDataTransaction;\n/**\n * Sign Ethereum mint ERC 20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthMintErc20SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.MintErc20);\n  const {\n    fromPrivateKey,\n    amount,\n    to,\n    contractAddress,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(token_abi_2.default, contractAddress.trim());\n  const digits = new bignumber_js_1.BigNumber(10).pow(await contract.methods.decimals().call());\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.mint(to.trim(), `0x${new bignumber_js_1.BigNumber(amount).multipliedBy(digits).toString(16)}`).encodeABI(),\n    nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEthMintErc20SignedTransaction = prepareEthMintErc20SignedTransaction;\n\nconst prepareEthSignedTransactionAbstraction = async (client, transaction, signatureId, fromPrivateKey, fee) => {\n  var _a;\n\n  const gasPrice = fee ? client.utils.toWei(fee.gasPrice, 'gwei') : await exports.ethGetGasPriceInWei();\n  const tx = Object.assign(Object.assign({}, transaction), {\n    gasPrice,\n    gas: (fee === null || fee === void 0 ? void 0 : fee.gasLimit) || undefined\n  });\n\n  if (signatureId) {\n    return JSON.stringify(tx);\n  }\n\n  tx.gas = (_a = fee === null || fee === void 0 ? void 0 : fee.gasLimit) !== null && _a !== void 0 ? _a : await client.eth.estimateGas(tx);\n  return (await client.eth.accounts.signTransaction(tx, fromPrivateKey)).rawTransaction;\n};\n/**\n * Sign Ethereum burn ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\n\nconst prepareEthBurnErc20SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.BurnErc20);\n  const {\n    fromPrivateKey,\n    amount,\n    contractAddress,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(token_abi_2.default, contractAddress.trim());\n  const digits = new bignumber_js_1.BigNumber(10).pow(await contract.methods.decimals().call());\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.burn(`0x${new bignumber_js_1.BigNumber(amount).multipliedBy(digits).toString(16)}`).encodeABI(),\n    nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareEthBurnErc20SignedTransaction = prepareEthBurnErc20SignedTransaction;\n/**\n * Sign Ethereum or supported ERC20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthOrErc20SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.TransferErc20);\n  const {\n    fromPrivateKey,\n    to,\n    amount,\n    currency,\n    fee,\n    data,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getClient(provider, fromPrivateKey);\n  let tx;\n\n  if (currency === model_1.Currency.ETH) {\n    tx = {\n      from: 0,\n      to: to.trim(),\n      value: client.utils.toWei(`${amount}`, 'ether'),\n      data: data ? client.utils.isHex(data) ? client.utils.stringToHex(data) : client.utils.toHex(data) : undefined,\n      nonce\n    };\n  } else {\n    // @ts-ignore\n    const contract = new client.eth.Contract([constants_1.TRANSFER_METHOD_ABI], constants_1.CONTRACT_ADDRESSES[currency]);\n    const digits = new bignumber_js_1.BigNumber(10).pow(constants_1.CONTRACT_DECIMALS[currency]);\n    tx = {\n      from: 0,\n      to: constants_1.CONTRACT_ADDRESSES[currency],\n      data: contract.methods.transfer(to.trim(), `0x${new bignumber_js_1.BigNumber(amount).multipliedBy(digits).toString(16)}`).encodeABI(),\n      nonce\n    };\n  }\n\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareEthOrErc20SignedTransaction = prepareEthOrErc20SignedTransaction;\n/**\n * Sign Ethereum custom ERC20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareCustomErc20SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.TransferErc20);\n  const {\n    fromPrivateKey,\n    to,\n    amount,\n    contractAddress,\n    digits,\n    fee,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract([constants_1.TRANSFER_METHOD_ABI], contractAddress);\n  const decimals = new bignumber_js_1.BigNumber(10).pow(digits);\n  const tx = {\n    from: 0,\n    to: contractAddress,\n    data: contract.methods.transfer(to.trim(), `0x${new bignumber_js_1.BigNumber(amount).multipliedBy(decimals).toString(16)}`).encodeABI(),\n    nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareCustomErc20SignedTransaction = prepareCustomErc20SignedTransaction;\n/**\n * Sign Ethereum deploy ERC20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareDeployErc20SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.DeployErc20);\n  const {\n    name,\n    address,\n    symbol,\n    supply,\n    digits,\n    fromPrivateKey,\n    nonce,\n    fee,\n    signatureId,\n    totalCap\n  } = body;\n  const client = exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(token_abi_2.default);\n  const deploy = contract.deploy({\n    data: token_bytecode_1.default,\n    arguments: [name, symbol, address, digits, `0x${new bignumber_js_1.BigNumber(totalCap || supply).multipliedBy(new bignumber_js_1.BigNumber(10).pow(digits)).toString(16)}`, `0x${new bignumber_js_1.BigNumber(supply).multipliedBy(new bignumber_js_1.BigNumber(10).pow(digits)).toString(16)}`]\n  });\n  const tx = {\n    from: 0,\n    data: deploy.encodeABI(),\n    nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareDeployErc20SignedTransaction = prepareDeployErc20SignedTransaction;\n/**\n * Sign Ethereum invoke smart contract transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareSmartContractWriteMethodInvocation = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.SmartContractMethodInvocation);\n  const {\n    fromPrivateKey,\n    fee,\n    params,\n    methodName,\n    methodABI,\n    amount,\n    contractAddress,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getClient(provider, fromPrivateKey);\n  const contract = new client.eth.Contract([methodABI]);\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    value: amount ? `0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(amount, 'ether')).toString(16)}` : undefined,\n    data: contract.methods[methodName](...params).encodeABI(),\n    nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareSmartContractWriteMethodInvocation = prepareSmartContractWriteMethodInvocation;\n\nconst deployContract = async (abi, bytecode, args, fromPrivateKey, fee, nonce, signatureId, provider) => {\n  const client = await exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(abi, null, {\n    data: bytecode\n  }); // @ts-ignore\n\n  const deploy = contract.deploy({\n    arguments: args\n  });\n  const tx = {\n    from: 0,\n    data: deploy.encodeABI(),\n    nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n/**\n * Sign ETH generate custodial wallet address transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the ETH Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS\n */\n\n\nconst prepareEthDeployMarketplaceListingSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.DeployMarketplaceListing);\n  return deployContract(marketplace_1.listing.abi, marketplace_1.listing.data, [body.marketplaceFee, body.feeRecipient], body.fromPrivateKey, body.fee, body.nonce, body.signatureId, provider);\n};\n\nexports.prepareEthDeployMarketplaceListingSignedTransaction = prepareEthDeployMarketplaceListingSignedTransaction;\n/**\n * Sign ETH deploy NFT Auction contract transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the ETH Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS\n */\n\nconst prepareEthDeployAuctionSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.DeployNftAuction);\n  return deployContract(marketplace_1.auction.abi, marketplace_1.auction.data, [body.auctionFee, body.feeRecipient], body.fromPrivateKey, body.fee, body.nonce, body.signatureId, provider);\n};\n\nexports.prepareEthDeployAuctionSignedTransaction = prepareEthDeployAuctionSignedTransaction;\n/**\n * Sign Ethereum mint ERC 721 provenance transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthMintErc721ProvenanceSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthMintErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    nonce,\n    fee,\n    url,\n    signatureId,\n    authorAddresses,\n    cashbackValues,\n    fixedValues,\n    erc20\n  } = body;\n  const client = exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721Provenance_abi_1.default, contractAddress);\n  const cb = [];\n  const fv = [];\n\n  if (cashbackValues && fixedValues && authorAddresses) {\n    cashbackValues.map(c => cb.push(`0x${new bignumber_js_1.BigNumber(c).multipliedBy(100).toString(16)}`));\n    fixedValues.map(c => fv.push(`0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(c, 'ether')).toString(16)}`));\n  }\n\n  const data = erc20 ? contract.methods.mintWithTokenURI(to.trim(), tokenId, url, authorAddresses ? authorAddresses : [], cb, fv, erc20).encodeABI() : contract.methods.mintWithTokenURI(to.trim(), tokenId, url, authorAddresses ? authorAddresses : [], cb, fv).encodeABI();\n\n  if (contractAddress) {\n    const tx = {\n      from: 0,\n      to: contractAddress.trim(),\n      data: data,\n      nonce\n    };\n    return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n  }\n\n  throw new Error('Contract address should not be empty!');\n};\n\nexports.prepareEthMintErc721ProvenanceSignedTransaction = prepareEthMintErc721ProvenanceSignedTransaction;\n/**\n * Sign Ethereum mint multiple ERC 721 Provenance transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthMintMultipleErc721ProvenanceSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthMintMultipleErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    url,\n    nonce,\n    signatureId,\n    authorAddresses,\n    cashbackValues,\n    fixedValues,\n    fee,\n    erc20\n  } = body;\n  const client = await exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721Provenance_abi_1.default, contractAddress);\n  const cb = [];\n  const fv = [];\n\n  if (cashbackValues && fixedValues && authorAddresses) {\n    for (let i = 0; i < cashbackValues.length; i++) {\n      const cb2 = [];\n      const fv2 = [];\n\n      for (let j = 0; j < cashbackValues[i].length; j++) {\n        cb2.push(`0x${new bignumber_js_1.BigNumber(cashbackValues[i][j]).multipliedBy(100).toString(16)}`);\n        fv2.push(`0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(fixedValues[i][j], 'ether')).toString(16)}`);\n      }\n\n      cb.push(cb2);\n      fv.push(fv2);\n    }\n  }\n\n  const data = erc20 ? contract.methods.mintMultiple(to.map(t => t.trim()), tokenId, url, authorAddresses ? authorAddresses : [], cb, fv, erc20).encodeABI() : contract.methods.mintMultiple(to.map(t => t.trim()), tokenId, url, authorAddresses ? authorAddresses : [], cb, fv).encodeABI();\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: data,\n    nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareEthMintMultipleErc721ProvenanceSignedTransaction = prepareEthMintMultipleErc721ProvenanceSignedTransaction;\n/**\n * Sign Ethereum mint ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthMintErc721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthMintErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    nonce,\n    fee,\n    url,\n    signatureId\n  } = body;\n  const client = exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721_abi_1.default, contractAddress);\n\n  if (contractAddress) {\n    const tx = {\n      from: 0,\n      to: contractAddress.trim(),\n      data: contract.methods.mintWithTokenURI(to.trim(), tokenId, url).encodeABI(),\n      nonce\n    };\n    return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n  }\n\n  throw new Error('Contract address should not be empty!');\n};\n\nexports.prepareEthMintErc721SignedTransaction = prepareEthMintErc721SignedTransaction;\n/**\n * Sign Ethereum mint multiple ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthMintCashbackErc721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthMintErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    authorAddresses,\n    cashbackValues,\n    url,\n    nonce,\n    signatureId,\n    fee,\n    erc20\n  } = body;\n  const client = await exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721_abi_1.default, contractAddress);\n  const cashbacks = cashbackValues; // tslint:disable-next-line: prefer-for-of\n\n  const cb = cashbacks.map(c => `0x${new bignumber_js_1.BigNumber(client.utils.toWei(c, 'ether')).toString(16)}`);\n\n  if (contractAddress) {\n    const tx = {\n      from: 0,\n      to: contractAddress.trim(),\n      data: erc20 ? contract.methods.mintWithCashback(to.trim(), tokenId, url, authorAddresses, cb, erc20).encodeABI() : contract.methods.mintWithCashback(to.trim(), tokenId, url, authorAddresses, cb).encodeABI(),\n      nonce\n    };\n    return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n  }\n\n  throw new Error('Contract address should not be empty!');\n};\n\nexports.prepareEthMintCashbackErc721SignedTransaction = prepareEthMintCashbackErc721SignedTransaction;\n/**\n * Sign Ethereum mint multiple ERC 721 Cashback transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthMintMultipleCashbackErc721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthMintMultipleErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    url,\n    nonce,\n    signatureId,\n    authorAddresses,\n    cashbackValues,\n    fee,\n    erc20\n  } = body;\n  const client = await exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721_abi_1.default, contractAddress);\n  const cashbacks = cashbackValues;\n  const cb = cashbacks.map(cashback => cashback.map(c => `0x${new bignumber_js_1.BigNumber(client.utils.toWei(c, 'ether')).toString(16)}`));\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: erc20 ? contract.methods.mintMultipleCashback(to.map(t => t.trim()), tokenId, url, authorAddresses, cb, erc20).encodeABI() : contract.methods.mintMultipleCashback(to.map(t => t.trim()), tokenId, url, authorAddresses, cb).encodeABI(),\n    nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareEthMintMultipleCashbackErc721SignedTransaction = prepareEthMintMultipleCashbackErc721SignedTransaction;\n/**\n * Sign Ethereum mint multiple ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthMintMultipleErc721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthMintMultipleErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    url,\n    nonce,\n    signatureId,\n    fee\n  } = body;\n  const client = await exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721_abi_1.default, contractAddress);\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.mintMultiple(to.map(t => t.trim()), tokenId, url).encodeABI(),\n    nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareEthMintMultipleErc721SignedTransaction = prepareEthMintMultipleErc721SignedTransaction;\n/**\n * Sign Ethereum burn ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthBurnErc721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthBurnErc721);\n  const {\n    fromPrivateKey,\n    tokenId,\n    fee,\n    contractAddress,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721_abi_1.default, contractAddress);\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.burn(tokenId).encodeABI(),\n    nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareEthBurnErc721SignedTransaction = prepareEthBurnErc721SignedTransaction;\n/**\n * Sign Ethereum update cashback ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthUpdateCashbackForAuthorErc721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthBurnErc721);\n  const {\n    fromPrivateKey,\n    cashbackValue,\n    tokenId,\n    fee,\n    contractAddress,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721_abi_1.default, contractAddress);\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.updateCashbackForAuthor(tokenId, `0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(cashbackValue, 'ether')).toString(16)}`).encodeABI(),\n    nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareEthUpdateCashbackForAuthorErc721SignedTransaction = prepareEthUpdateCashbackForAuthorErc721SignedTransaction;\n/**\n * Sign Ethereum transfer ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthTransferErc721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthTransferErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    fee,\n    contractAddress,\n    nonce,\n    signatureId,\n    value,\n    provenanceData,\n    tokenPrice,\n    provenance\n  } = body;\n  const client = await exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(provenance ? erc721Provenance_abi_1.default : erc721_abi_1.default, contractAddress);\n  const dataBytes = provenance ? Buffer.from(provenanceData + '\\'\\'\\'###\\'\\'\\'' + web3_utils_1.toWei(tokenPrice, 'ether'), 'utf8') : '';\n  const tokenData = provenance ? contract.methods.safeTransfer(to.trim(), tokenId, `0x${dataBytes.toString('hex')}`).encodeABI() : contract.methods.safeTransfer(to.trim(), tokenId).encodeABI();\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: tokenData,\n    nonce,\n    value: value ? `0x${new bignumber_js_1.BigNumber(value).multipliedBy(1e18).toString(16)}` : undefined\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareEthTransferErc721SignedTransaction = prepareEthTransferErc721SignedTransaction;\n/**\n * Sign Ethereum mint ERC 1155 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthMintMultiTokenBatchSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.MintMultiTokenBatch);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    nonce,\n    data,\n    fee,\n    amounts,\n    signatureId\n  } = body;\n  const client = exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc1155_abi_1.default, contractAddress);\n  const amts = amounts.map(amts => amts.map(amt => `0x${new bignumber_js_1.BigNumber(amt).toString(16)}`));\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.mintBatch(to, tokenId, amts, data ? data : '0x0').encodeABI(),\n    nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareEthMintMultiTokenBatchSignedTransaction = prepareEthMintMultiTokenBatchSignedTransaction;\n/**\n * Sign Ethereum mint ERC 1155 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthMintMultiTokenSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.MintMultiToken);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    nonce,\n    data,\n    fee,\n    amount,\n    signatureId\n  } = body;\n  const client = exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc1155_abi_1.default, contractAddress);\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.mint(to.trim(), tokenId, `0x${new bignumber_js_1.BigNumber(amount).toString(16)}`, data ? data : '0x0').encodeABI(),\n    nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareEthMintMultiTokenSignedTransaction = prepareEthMintMultiTokenSignedTransaction;\n/**\n * Sign Ethereum burn ERC 1155 batch transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthBurnBatchMultiTokenSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthBurnMultiTokenBatch);\n  const {\n    fromPrivateKey,\n    account,\n    tokenId,\n    amounts,\n    fee,\n    contractAddress,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc1155_abi_1.default, contractAddress);\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.burnBatch(account, tokenId, amounts).encodeABI(),\n    nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareEthBurnBatchMultiTokenSignedTransaction = prepareEthBurnBatchMultiTokenSignedTransaction;\n/**\n * Sign Ethereum burn ERC 1155 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthBurnMultiTokenSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthBurnMultiToken);\n  const {\n    fromPrivateKey,\n    account,\n    tokenId,\n    amount,\n    fee,\n    contractAddress,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc1155_abi_1.default, contractAddress);\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.burn(account, tokenId, amount).encodeABI(),\n    nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareEthBurnMultiTokenSignedTransaction = prepareEthBurnMultiTokenSignedTransaction;\n/**\n * Sign Ethereum transfer ERC 1155 Batch transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthBatchTransferMultiTokenSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.TransferMultiTokenBatch);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    fee,\n    contractAddress,\n    nonce,\n    signatureId,\n    amounts,\n    data\n  } = body;\n  const client = await exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc1155_abi_1.default, contractAddress);\n  const amts = amounts.map(amt => `0x${new bignumber_js_1.BigNumber(amt).toString(16)}`);\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.safeBatchTransfer(to.trim(), tokenId.map(token => token.trim()), amts, data ? data : '0x0').encodeABI(),\n    nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareEthBatchTransferMultiTokenSignedTransaction = prepareEthBatchTransferMultiTokenSignedTransaction;\n/**\n * Sign Ethereum transfer ERC 1155 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthTransferMultiTokenSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthTransferErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    fee,\n    contractAddress,\n    nonce,\n    signatureId,\n    amount,\n    data\n  } = body;\n  const client = await exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc1155_abi_1.default, contractAddress);\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.safeTransfer(to.trim(), tokenId, `0x${new bignumber_js_1.BigNumber(amount).toString(16)}`, data ? data : '0x0').encodeABI(),\n    nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareEthTransferMultiTokenSignedTransaction = prepareEthTransferMultiTokenSignedTransaction;\n/**\n * Sign Ethereum deploy ERC 1155 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthDeployMultiTokenSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthDeployMultiToken);\n  const {\n    fromPrivateKey,\n    fee,\n    uri,\n    nonce,\n    signatureId,\n    publicMint\n  } = body;\n  const client = await exports.getClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc1155_abi_1.default, null, {\n    data: erc1155_bytecode_1.default\n  }); // @ts-ignore\n\n  const deploy = contract.deploy({\n    arguments: [uri, publicMint ? publicMint : false]\n  });\n  const tx = {\n    from: 0,\n    data: deploy.encodeABI(),\n    nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareEthDeployMultiTokenSignedTransaction = prepareEthDeployMultiTokenSignedTransaction;\n/**\n * Sign Ethereum deploy ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareEthDeployErc721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthDeployErc721);\n  const {\n    fromPrivateKey,\n    fee,\n    name,\n    symbol,\n    nonce,\n    signatureId,\n    provenance,\n    cashback,\n    publicMint\n  } = body;\n  const client = await exports.getClient(provider, fromPrivateKey);\n\n  if (provenance && cashback) {\n    throw new Error('Only one of provenance or cashback must be present and true.');\n  }\n\n  let abi = erc721_abi_2.default;\n  let data = erc721_bytecode_2.default;\n\n  if (provenance) {\n    abi = erc721Provenance_abi_1.default;\n    data = erc721Provenance_bytecode_1.default;\n  } else if (cashback) {\n    abi = erc721_abi_1.default;\n    data = erc721_bytecode_1.default;\n  } // @ts-ignore\n\n\n  const contract = new client.eth.Contract(abi, null, {\n    data\n  }); // @ts-ignore\n\n  const deploy = contract.deploy({\n    arguments: [name, symbol, publicMint ? publicMint : false]\n  });\n  const tx = {\n    from: 0,\n    data: deploy.encodeABI(),\n    nonce\n  };\n  return await prepareEthSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareEthDeployErc721SignedTransaction = prepareEthDeployErc721SignedTransaction;\n\nconst getEthErc20ContractDecimals = async (testnet, contractAddress, provider) => {\n  if (!contractAddress) {\n    throw new Error('Contract address not set.');\n  }\n\n  const client = await exports.getClient(provider); // @ts-ignore\n\n  const contract = new client.eth.Contract(token_abi_1.default, contractAddress.trim());\n  return await contract.methods.decimals().call();\n};\n\nexports.getEthErc20ContractDecimals = getEthErc20ContractDecimals;\n/**\n * Send Ethereum invoke smart contract transaction to the blockchain.\n * Invoked method only reads from blockchain the data and returns them back.\n *\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n */\n\nconst sendSmartContractReadMethodInvocationTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.SmartContractReadMethodInvocation);\n  const {\n    params,\n    methodName,\n    methodABI,\n    contractAddress\n  } = body;\n  const client = exports.getClient(provider);\n  const contract = new client.eth.Contract([methodABI], contractAddress);\n  return {\n    data: await contract.methods[methodName](...params).call()\n  };\n};\n\nexports.sendSmartContractReadMethodInvocationTransaction = sendSmartContractReadMethodInvocationTransaction;\n/**\n * Send Ethereum store data transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendStoreDataTransaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareStoreDataTransaction(body, provider), body.signatureId);\n\nexports.sendStoreDataTransaction = sendStoreDataTransaction;\n/**\n * Send Ethereum or supported ERC20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendEthOrErc20Transaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareEthOrErc20SignedTransaction(body, provider), body.signatureId);\n\nexports.sendEthOrErc20Transaction = sendEthOrErc20Transaction;\n/**\n * Send Ethereum custom ERC20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCustomErc20Transaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareCustomErc20SignedTransaction(body, provider), body.signatureId);\n\nexports.sendCustomErc20Transaction = sendCustomErc20Transaction;\n/**\n * Send Ethereum deploy ERC20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendDeployErc20Transaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareDeployErc20SignedTransaction(body, provider), body.signatureId);\n\nexports.sendDeployErc20Transaction = sendDeployErc20Transaction;\n/**\n * Send Ethereum invoke smart contract transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendSmartContractMethodInvocationTransaction = async (body, provider) => {\n  if (body.methodABI.stateMutability === 'view') {\n    return exports.sendSmartContractReadMethodInvocationTransaction(body, provider);\n  }\n\n  return blockchain_1.ethBroadcast(await exports.prepareSmartContractWriteMethodInvocation(body, provider), body.signatureId);\n};\n\nexports.sendSmartContractMethodInvocationTransaction = sendSmartContractMethodInvocationTransaction;\n/**\n * Send Ethereum ERC721 mint transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendMintErc721Transaction = async (body, provider) => {\n  if (!body.fromPrivateKey) {\n    return nft_1.mintNFT(body);\n  }\n\n  return blockchain_1.ethBroadcast(await exports.prepareEthMintErc721SignedTransaction(body, provider), body.signatureId);\n};\n\nexports.sendMintErc721Transaction = sendMintErc721Transaction;\n/**\n * Send Ethereum ERC721 mint with cashback transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendMintCashbackErc721Transaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareEthMintCashbackErc721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendMintCashbackErc721Transaction = sendMintCashbackErc721Transaction;\n/**\n * Send Ethereum ERC721 provenance mint with cashback transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendMintErc721ProvenanceTransaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareEthMintErc721ProvenanceSignedTransaction(body, provider), body.signatureId);\n\nexports.sendMintErc721ProvenanceTransaction = sendMintErc721ProvenanceTransaction;\n/**\n * Send Ethereum ERC721 mint multiple cashback transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendEthMintMultipleCashbackErc721SignedTransaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareEthMintMultipleCashbackErc721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendEthMintMultipleCashbackErc721SignedTransaction = sendEthMintMultipleCashbackErc721SignedTransaction;\n/**\n * Send Ethereum ERC721 mint multiple provenance transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendMintMultipleErc721ProvenanceTransaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareEthMintMultipleErc721ProvenanceSignedTransaction(body, provider), body.signatureId);\n\nexports.sendMintMultipleErc721ProvenanceTransaction = sendMintMultipleErc721ProvenanceTransaction;\n/**\n * Send Ethereum ERC721 mint multiple transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendMintMultipleErc721Transaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareEthMintMultipleErc721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendMintMultipleErc721Transaction = sendMintMultipleErc721Transaction;\n/**\n * Send Ethereum ERC721 burn transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendBurnErc721Transaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareEthBurnErc721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendBurnErc721Transaction = sendBurnErc721Transaction;\n/**\n * Send Ethereum ERC721 update cashback for author transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendUpdateCashbackForAuthorErc721Transaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareEthUpdateCashbackForAuthorErc721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendUpdateCashbackForAuthorErc721Transaction = sendUpdateCashbackForAuthorErc721Transaction;\n/**\n * Send Ethereum ERC721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendErc721Transaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareEthTransferErc721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendErc721Transaction = sendErc721Transaction;\n/**\n * Send Ethereum ERC721 deploy to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendDeployErc721Transaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareEthDeployErc721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendDeployErc721Transaction = sendDeployErc721Transaction;\n/**\n * Send Ethereum MultiToken transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendEthMultiTokenTransaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareEthTransferMultiTokenSignedTransaction(body, provider), body.signatureId);\n\nexports.sendEthMultiTokenTransaction = sendEthMultiTokenTransaction;\n/**\n * Send Ethereum MultiToken batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendEthMultiTokenBatchTransaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareEthBatchTransferMultiTokenSignedTransaction(body, provider), body.signatureId);\n\nexports.sendEthMultiTokenBatchTransaction = sendEthMultiTokenBatchTransaction;\n/**\n * Send Ethereum MultiToken deploy to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendEthDeployMultiTokenTransaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareEthDeployMultiTokenSignedTransaction(body, provider), body.signatureId);\n\nexports.sendEthDeployMultiTokenTransaction = sendEthDeployMultiTokenTransaction;\n/**\n * Send Ethereum MultiToken mint transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendEthMintMultiTokenTransaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareEthMintMultiTokenSignedTransaction(body, provider), body.signatureId);\n\nexports.sendEthMintMultiTokenTransaction = sendEthMintMultiTokenTransaction;\n/**\n * Send Ethereum MultiToken mint batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendEthMintMultiTokenBatchTransaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareEthMintMultiTokenBatchSignedTransaction(body, provider), body.signatureId);\n\nexports.sendEthMintMultiTokenBatchTransaction = sendEthMintMultiTokenBatchTransaction;\n/**\n * Send Ethereum MultiToken burn transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendEthBurnMultiTokenTransaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareEthBurnMultiTokenSignedTransaction(body, provider), body.signatureId);\n\nexports.sendEthBurnMultiTokenTransaction = sendEthBurnMultiTokenTransaction;\n/**\n * Send Ethereum MultiToken burn batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendEthBurnBatchMultiTokenTransaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareEthBurnBatchMultiTokenSignedTransaction(body, provider), body.signatureId);\n\nexports.sendEthBurnBatchMultiTokenTransaction = sendEthBurnBatchMultiTokenTransaction;\n/**\n * Send Ethereum generate custodial wallet transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendEthGenerateCustodialWalletSignedTransaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareEthGenerateCustodialWalletSignedTransaction(body, provider), body.signatureId);\n\nexports.sendEthGenerateCustodialWalletSignedTransaction = sendEthGenerateCustodialWalletSignedTransaction;\n/**\n * Deploy new smart contract for NFT marketplace logic. Smart contract enables marketplace operator to create new listing for NFT (ERC-721/1155).\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst sendEthDeployMarketplaceListingSignedTransaction = async (body, provider) => blockchain_1.ethBroadcast(await exports.prepareEthDeployMarketplaceListingSignedTransaction(body, provider), body.signatureId);\n\nexports.sendEthDeployMarketplaceListingSignedTransaction = sendEthDeployMarketplaceListingSignedTransaction;","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AA4BA;;AACA;;AACA;;AACA;AAEA;;;;;AAGO,MAAMA,mBAAmB,GAAG,YAAW;AAC5C,MAAIC,aAAa,GAAG,gDAApB;;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,yBAAhB,EAA2C;AACzCH,iBAAa,GAAG,GAAGA,aAAa,WAAWC,OAAO,CAACC,GAAR,CAAYC,yBAAyB,EAAhF;AACD;;AACD,QAAMC,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAY,CAC7BC,cAAMC,GAAN,CAAUR,aAAa,CAACS,QAAd,EAAV,EACGC,IADH,CACQC,QAAQ,IAAI,GAAGA,QAAQ,CAACP,IAAT,CAAcQ,OAAd,GAAwB,EAAE,EADjD,CAD6B,CAAZ,CAAnB;AAIA,QAAMC,QAAQ,GAAGT,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAZ,GAAkB,IAAlB,GAAyBA,IAAI,CAAC,CAAD,CAA9C;AACA,SAAOU,eAAKC,KAAL,CAAWC,KAAX,CAAiBH,QAAjB,EAA2B,MAA3B,CAAP;AACD,CAXM;;AAAMI,8BAAmBlB,mBAAnB;AAab;;;;;;;AAMO,MAAMmB,SAAS,GAAG,CAACC,QAAD,EAAoBC,UAApB,KAA2C;AAClE,MAAIC,GAAG,GAAGF,QAAQ,IAAI,GAAGlB,OAAO,CAACC,GAAR,CAAYoB,aAAZ,IAA6BC,yBAAa,qBAAqBtB,OAAO,CAACC,GAAR,CAAYsB,aAAa,EAAjH;;AACA,MAAIvB,OAAO,CAACC,GAAR,CAAYuB,YAAZ,KAA6B,kBAAjC,EAAqD;AACnDJ,OAAG,IAAI,+BAAP;AACD;;AACD,QAAMK,IAAI,GAAG,IAAIZ,cAAJ,CAASO,GAAT,CAAb;;AACA,MAAID,UAAJ,EAAgB;AACdM,QAAI,CAACC,GAAL,CAASC,QAAT,CAAkBC,MAAlB,CAAyBC,GAAzB,CAA6BV,UAA7B;AACAM,QAAI,CAACC,GAAL,CAASI,cAAT,GAA0BL,IAAI,CAACC,GAAL,CAASC,QAAT,CAAkBC,MAAlB,CAAyB,CAAzB,EAA4BG,OAAtD;AACD;;AACD,SAAON,IAAP;AACD,CAXM;;AAAMT,oBAASC,SAAT;AAab;;;;;;;;AAOO,MAAMe,qBAAqB,GAAG,OAAOC,EAAP,EAA2BC,cAA3B,EAAmDhB,QAAnD,KAAwE;AAC3G,MAAIe,EAAE,CAACE,KAAH,KAAaC,iBAASC,GAA1B,EAA+B;AAC7B,UAAMC,KAAK,CAAC,oBAAD,CAAX;AACD;;AACD,QAAMC,MAAM,GAAGvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAAf;AACA,QAAMM,iBAAiB,GAAGC,IAAI,CAACC,KAAL,CAAWT,EAAE,CAACU,qBAAd,CAA1B;AACA,QAAMC,GAAG,GAAG,MAAML,MAAM,CAACb,GAAP,CAAWmB,WAAX,CAAuBL,iBAAvB,CAAlB;;AACA,MAAI,CAACA,iBAAiB,CAACI,GAAvB,EAA4B;AAC1BJ,qBAAiB,CAACI,GAAlB,GAAwBA,GAAxB;AACD;;AACD,MAAI,CAACJ,iBAAiB,CAACM,KAAvB,EAA8B;AAC5BN,qBAAiB,CAACM,KAAlB,GAA0B,MAAMC,qCAAwBR,MAAM,CAACb,GAAP,CAAWI,cAAnC,CAAhC;AACD;;AACD,MAAI,CAACU,iBAAiB,CAAC5B,QAAnB,IAA+B4B,iBAAiB,CAAC5B,QAAlB,KAA+B,GAA9D,IAAqE4B,iBAAiB,CAAC5B,QAAlB,KAA+B,CAApG,IAAyG4B,iBAAiB,CAAC5B,QAAlB,KAA+B,KAA5I,EAAmJ;AACjJ4B,qBAAiB,CAAC5B,QAAlB,GAA6B,MAAMI,6BAAnC;AACD;;AACD,SAAO,CAAC,MAAMuB,MAAM,CAACb,GAAP,CAAWC,QAAX,CAAoBqB,eAApB,CAAoCR,iBAApC,EAAuDN,cAAvD,CAAP,EAAyFe,cAAhG;AACD,CAjBM;;AAAMjC,gCAAqBgB,qBAArB;AAmBb;;;;;;;AAMO,MAAMkB,kDAAkD,GAAG,OAAOC,IAAP,EAAuCjC,QAAvC,KAA4D;AAC5H,QAAMZ,qBAAa6C,IAAb,EAAmBf,gCAAnB,CAAN;AAEA,QAAMG,MAAM,GAAGvB,kBAAUE,QAAV,EAAoBiC,IAAI,CAACjB,cAAzB,CAAf;AAEA,QAAM;AAAEkB,OAAF;AAAOC;AAAP,MAAgBC,oCAA2BH,IAA3B,CAAtB,CAL4H,CAM5H;;AACA,QAAMI,QAAQ,GAAG,IAAIhB,MAAM,CAACb,GAAP,CAAW8B,QAAf,CAAwBJ,GAAxB,CAAjB;AACA,QAAMK,MAAM,GAAGF,QAAQ,CAACE,MAAT,CAAgB;AAC7BtD,QAAI,EAAEkD;AADuB,GAAhB,CAAf;AAGA,QAAMpB,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BvD,QAAI,EAAEsD,MAAM,CAACE,SAAP,EAFsB;AAG5Bb,SAAK,EAAEK,IAAI,CAACL;AAHgB,GAA9B;AAKA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAakB,IAAI,CAACU,WAAlB,EAA+BV,IAAI,CAACjB,cAApC,EAAoDiB,IAAI,CAACW,GAAzD,CAAnD;AACD,CAjBM;;AAAM9C,6DAAkDkC,kDAAlD;AAmBb;;;;;;;AAMO,MAAMa,2BAA2B,GAAG,OAAOZ,IAAP,EAA2BjC,QAA3B,KAAgD;AACzF,QAAMZ,qBAAa6C,IAAb,EAAmBf,oBAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJ8B,MAFI;AAGJC,UAHI;AAIJ9D,QAJI;AAKJ2C,SALI;AAMJe;AANI,MAOFV,IAPJ;AAQA,QAAMZ,MAAM,GAAGvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAAf;AACA,QAAMH,OAAO,GAAIiC,EAAE,IAAIzB,MAAM,CAACb,GAAP,CAAWI,cAAlC;AACA,QAAMoC,OAAO,GAAG3B,MAAM,CAACzB,KAAP,CAAaqD,KAAb,CAAmBhE,IAAnB,IAA2BoC,MAAM,CAACzB,KAAP,CAAasD,WAAb,CAAyBjE,IAAzB,CAA3B,GAA4DoC,MAAM,CAACzB,KAAP,CAAauD,KAAb,CAAmBlE,IAAnB,CAA5E;AACA,QAAMmE,YAAY,GAAGxB,KAAK,GAAGA,KAAH,GAAW,MAAMC,qCAAwBhB,OAAxB,CAA3C;AACA,QAAMwC,SAAS,GAAGN,MAAM,GAAEO,gCACrBP,MADqB,GACf;AACTrD,YAAQ,EAAE2B,MAAM,CAACzB,KAAP,CAAaC,KAAb,CAAmBkD,MAAM,CAACrD,QAA1B,EAAoC,MAApC;AADD,GADe,CAAF,GAGpB;AACF6D,YAAQ,EAAE,GAAGP,OAAO,CAACQ,MAAR,GAAiB,EAAjB,GAAsB,KAAK,EADtC;AAEF9D,YAAQ,EAAE,MAAMI;AAFd,GAHJ;AAQA,QAAMiB,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BM,MAAE,EAAEjC,OAAO,CAAC4C,IAAR,EAFwB;AAG5BC,SAAK,EAAE,GAHqB;AAI5BhE,YAAQ,EAAE2D,SAAS,CAAC3D,QAJQ;AAK5BgC,OAAG,EAAE2B,SAAS,CAACE,QALa;AAM5BtE,QAAI,EAAE+D,OANsB;AAO5BpB,SAAK,EAAEwB;AAPqB,GAA9B;;AAUA,MAAIT,WAAJ,EAAiB;AACf,WAAOpB,IAAI,CAACoC,SAAL,CAAe5C,EAAf,CAAP;AACD;;AAED,SAAO,CAAC,MAAMM,MAAM,CAACb,GAAP,CAAWC,QAAX,CAAoBqB,eAApB,CAAoCf,EAApC,EAAwCC,cAAxC,CAAP,EAA0Ee,cAAjF;AACD,CArCM;;AAAMjC,sCAA2B+C,2BAA3B;AAuCb;;;;;;;AAMO,MAAMe,oCAAoC,GAAG,OAAO3B,IAAP,EAAwBjC,QAAxB,KAA6C;AAC/F,QAAMZ,qBAAa6C,IAAb,EAAmBf,iBAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJ6C,UAFI;AAGJf,MAHI;AAIJgB,mBAJI;AAKJlC,SALI;AAMJe;AANI,MAOFV,IAPJ;AASA,QAAMZ,MAAM,GAAGvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAAf,CAX+F,CAa/F;;AACA,QAAMqB,QAAQ,GAAG,IAAIhB,MAAM,CAACb,GAAP,CAAW8B,QAAf,CAAwByB,mBAAxB,EAAuCD,eAAe,CAACL,IAAhB,EAAvC,CAAjB;AACA,QAAMO,MAAM,GAAG,IAAIC,wBAAJ,CAAc,EAAd,EAAkBC,GAAlB,CAAsB,MAAM7B,QAAQ,CAAC8B,OAAT,CAAiBC,QAAjB,GAA4BC,IAA5B,EAA5B,CAAf;AACA,QAAMtD,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BM,MAAE,EAAEgB,eAAe,CAACL,IAAhB,EAFwB;AAG5BxE,QAAI,EAAEoD,QAAQ,CAAC8B,OAAT,CAAiBG,IAAjB,CAAsBxB,EAAE,CAACW,IAAH,EAAtB,EAAiC,KAAK,IAAIQ,wBAAJ,CAAcJ,MAAd,EAAsBU,YAAtB,CAAmCP,MAAnC,EAA2C1E,QAA3C,CAAoD,EAApD,CAAuD,EAA7F,EAAiGmD,SAAjG,EAHsB;AAI5Bb;AAJ4B,GAA9B;AAOA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,CAAnD;AACD,CAxBM;;AAAMlB,+CAAoC8D,oCAApC;;AAyBb,MAAMlB,sCAAsC,GAAG,OAC7CrB,MAD6C,EAC/BmD,WAD+B,EACC7B,WADD,EACkC3B,cADlC,EACsE4B,GADtE,KAE3C;;;AACF,QAAMlD,QAAQ,GAAGkD,GAAG,GAAGvB,MAAM,CAACzB,KAAP,CAAaC,KAAb,CAAmB+C,GAAG,CAAClD,QAAvB,EAAiC,MAAjC,CAAH,GAA8C,MAAMI,6BAAxE;AACA,QAAMiB,EAAE,mCACHyD,WADG,GACQ;AACd9E,YADc;AAEdgC,OAAG,EAAE,IAAG,SAAH,OAAG,WAAH,GAAG,MAAH,MAAG,CAAE6B,QAAL,KAAiBkB;AAFR,GADR,CAAR;;AAMA,MAAI9B,WAAJ,EAAiB;AACf,WAAOpB,IAAI,CAACoC,SAAL,CAAe5C,EAAf,CAAP;AACD;;AAEDA,IAAE,CAACW,GAAH,GAAS,SAAG,SAAH,OAAG,WAAH,GAAG,MAAH,MAAG,CAAE6B,QAAL,MAAa,IAAb,IAAamB,aAAb,GAAaA,EAAb,GAAiB,MAAMrD,MAAM,CAACb,GAAP,CAAWmB,WAAX,CAAuBZ,EAAvB,CAAhC;AACA,SAAO,CAAC,MAAMM,MAAM,CAACb,GAAP,CAAWC,QAAX,CAAoBqB,eAApB,CAAoCf,EAApC,EAAwCC,cAAxC,CAAP,EAA0Ee,cAAjF;AACD,CAhBD;AAiBA;;;;;;;;AAMO,MAAM4C,oCAAoC,GAAG,OAAO1C,IAAP,EAAwBjC,QAAxB,KAA6C;AAC/F,QAAMZ,qBAAa6C,IAAb,EAAmBf,iBAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJ6C,UAFI;AAGJC,mBAHI;AAIJlC,SAJI;AAKJe;AALI,MAMFV,IANJ;AAQA,QAAMZ,MAAM,GAAGvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAAf,CAV+F,CAW/F;;AACA,QAAMqB,QAAQ,GAAG,IAAIhB,MAAM,CAACb,GAAP,CAAW8B,QAAf,CAAwByB,mBAAxB,EAAuCD,eAAe,CAACL,IAAhB,EAAvC,CAAjB;AACA,QAAMO,MAAM,GAAG,IAAIC,wBAAJ,CAAc,EAAd,EAAkBC,GAAlB,CAAsB,MAAM7B,QAAQ,CAAC8B,OAAT,CAAiBC,QAAjB,GAA4BC,IAA5B,EAA5B,CAAf;AACA,QAAMtD,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BM,MAAE,EAAEgB,eAAe,CAACL,IAAhB,EAFwB;AAG5BxE,QAAI,EAAEoD,QAAQ,CAAC8B,OAAT,CAAiBS,IAAjB,CAAsB,KAAK,IAAIX,wBAAJ,CAAcJ,MAAd,EAAsBU,YAAtB,CAAmCP,MAAnC,EAA2C1E,QAA3C,CAAoD,EAApD,CAAuD,EAAlF,EAAsFmD,SAAtF,EAHsB;AAI5Bb;AAJ4B,GAA9B;AAMA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,CAAnD;AACD,CArBM;;AAAMlB,+CAAoC6E,oCAApC;AAuBb;;;;;;;AAMO,MAAME,kCAAkC,GAAG,OAAO5C,IAAP,EAA4BjC,QAA5B,KAAiD;AACjG,QAAMZ,qBAAa6C,IAAb,EAAmBf,qBAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJ8B,MAFI;AAGJe,UAHI;AAIJiB,YAJI;AAKJlC,OALI;AAMJ3D,QANI;AAOJ2C,SAPI;AAQJe;AARI,MASFV,IATJ;AAWA,QAAMZ,MAAM,GAAGvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAAf;AAEA,MAAID,EAAJ;;AACA,MAAI+D,QAAQ,KAAK5D,iBAASC,GAA1B,EAA+B;AAC7BJ,MAAE,GAAG;AACHyB,UAAI,EAAE,CADH;AAEHM,QAAE,EAAEA,EAAE,CAACW,IAAH,EAFD;AAGHC,WAAK,EAAErC,MAAM,CAACzB,KAAP,CAAaC,KAAb,CAAmB,GAAGgE,MAAM,EAA5B,EAAgC,OAAhC,CAHJ;AAIH5E,UAAI,EAAEA,IAAI,GAAIoC,MAAM,CAACzB,KAAP,CAAaqD,KAAb,CAAmBhE,IAAnB,IAA2BoC,MAAM,CAACzB,KAAP,CAAasD,WAAb,CAAyBjE,IAAzB,CAA3B,GAA4DoC,MAAM,CAACzB,KAAP,CAAauD,KAAb,CAAmBlE,IAAnB,CAAhE,GAA4FwF,SAJnG;AAKH7C;AALG,KAAL;AAOD,GARD,MAQO;AACL;AACA,UAAMS,QAAQ,GAAG,IAAIhB,MAAM,CAACb,GAAP,CAAW8B,QAAf,CAAwB,CAAClC,+BAAD,CAAxB,EAA+CA,+BAAmB0E,QAAnB,CAA/C,CAAjB;AACA,UAAMd,MAAM,GAAG,IAAIC,wBAAJ,CAAc,EAAd,EAAkBC,GAAlB,CAAsB9D,8BAAkB0E,QAAlB,CAAtB,CAAf;AACA/D,MAAE,GAAG;AACHyB,UAAI,EAAE,CADH;AAEHM,QAAE,EAAE1C,+BAAmB0E,QAAnB,CAFD;AAGH7F,UAAI,EAAEoD,QAAQ,CAAC8B,OAAT,CAAiBY,QAAjB,CAA0BjC,EAAE,CAACW,IAAH,EAA1B,EAAqC,KAAK,IAAIQ,wBAAJ,CAAcJ,MAAd,EAAsBU,YAAtB,CAAmCP,MAAnC,EAA2C1E,QAA3C,CAAoD,EAApD,CAAuD,EAAjG,EAAqGmD,SAArG,EAHH;AAIHb;AAJG,KAAL;AAMD;;AAED,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD,CArCM;;AAAM9C,6CAAkC+E,kCAAlC;AAuCb;;;;;;;AAMO,MAAMG,mCAAmC,GAAG,OAAO/C,IAAP,EAA4BjC,QAA5B,KAAiD;AAClG,QAAMZ,qBAAa6C,IAAb,EAAmBf,qBAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJ8B,MAFI;AAGJe,UAHI;AAIJC,mBAJI;AAKJE,UALI;AAMJpB,OANI;AAOJhB,SAPI;AAQJe;AARI,MASFV,IATJ;AAWA,QAAMZ,MAAM,GAAGvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAAf,CAbkG,CAelG;;AACA,QAAMqB,QAAQ,GAAG,IAAIhB,MAAM,CAACb,GAAP,CAAW8B,QAAf,CAAwB,CAAClC,+BAAD,CAAxB,EAA+C0D,eAA/C,CAAjB;AACA,QAAMM,QAAQ,GAAG,IAAIH,wBAAJ,CAAc,EAAd,EAAkBC,GAAlB,CAAsBF,MAAtB,CAAjB;AACA,QAAMjD,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BM,MAAE,EAAEgB,eAFwB;AAG5B7E,QAAI,EAAEoD,QAAQ,CAAC8B,OAAT,CAAiBY,QAAjB,CAA0BjC,EAAE,CAACW,IAAH,EAA1B,EAAqC,KAAK,IAAIQ,wBAAJ,CAAcJ,MAAd,EAAsBU,YAAtB,CAAmCH,QAAnC,EAA6C9E,QAA7C,CAAsD,EAAtD,CAAyD,EAAnG,EAAuGmD,SAAvG,EAHsB;AAI5Bb;AAJ4B,GAA9B;AAOA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD,CA1BM;;AAAM9C,8CAAmCkF,mCAAnC;AA4Bb;;;;;;;AAMO,MAAMC,mCAAmC,GAAG,OAAOhD,IAAP,EAA0BjC,QAA1B,KAA+C;AAChG,QAAMZ,qBAAa6C,IAAb,EAAmBf,mBAAnB,CAAN;AACA,QAAM;AACJgE,QADI;AAEJrE,WAFI;AAGJsE,UAHI;AAIJC,UAJI;AAKJpB,UALI;AAMJhD,kBANI;AAOJY,SAPI;AAQJgB,OARI;AASJD,eATI;AAUJ0C;AAVI,MAWFpD,IAXJ;AAaA,QAAMZ,MAAM,GAAGvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAAf,CAfgG,CAgBhG;;AACA,QAAMqB,QAAQ,GAAG,IAAIhB,MAAM,CAACb,GAAP,CAAW8B,QAAf,CAAwByB,mBAAxB,CAAjB;AACA,QAAMxB,MAAM,GAAGF,QAAQ,CAACE,MAAT,CAAgB;AAC7BtD,QAAI,EAAEqG,wBADuB;AAE7BC,aAAS,EAAE,CACTL,IADS,EAETC,MAFS,EAGTtE,OAHS,EAITmD,MAJS,EAKT,KAAK,IAAIC,wBAAJ,CAAcoB,QAAQ,IAAID,MAA1B,EAAkCb,YAAlC,CAA+C,IAAIN,wBAAJ,CAAc,EAAd,EAAkBC,GAAlB,CAAsBF,MAAtB,CAA/C,EAA8E1E,QAA9E,CAAuF,EAAvF,CAA0F,EALtF,EAMT,KAAK,IAAI2E,wBAAJ,CAAcmB,MAAd,EAAsBb,YAAtB,CAAmC,IAAIN,wBAAJ,CAAc,EAAd,EAAkBC,GAAlB,CAAsBF,MAAtB,CAAnC,EAAkE1E,QAAlE,CAA2E,EAA3E,CAA8E,EAN1E;AAFkB,GAAhB,CAAf;AAWA,QAAMyB,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BvD,QAAI,EAAEsD,MAAM,CAACE,SAAP,EAFsB;AAG5Bb;AAH4B,GAA9B;AAKA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD,CAnCM;;AAAM9C,8CAAmCmF,mCAAnC;AAqCb;;;;;;;AAMO,MAAMO,yCAAyC,GAAG,OAAOvD,IAAP,EAA4CjC,QAA5C,KAAiE;AACxH,QAAMZ,qBAAa6C,IAAb,EAAmBf,qCAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJ4B,OAFI;AAGJ6C,UAHI;AAIJC,cAJI;AAKJC,aALI;AAMJ9B,UANI;AAOJC,mBAPI;AAQJlC,SARI;AASJe;AATI,MAUFV,IAVJ;AAWA,QAAMZ,MAAM,GAAGvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAAf;AAEA,QAAMqB,QAAQ,GAAG,IAAIhB,MAAM,CAACb,GAAP,CAAW8B,QAAf,CAAwB,CAACqD,SAAD,CAAxB,CAAjB;AACA,QAAM5E,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BM,MAAE,EAAEgB,eAAe,CAACL,IAAhB,EAFwB;AAG5BC,SAAK,EAAEG,MAAM,GAAG,KAAK,IAAII,wBAAJ,CAAc2B,mBAAM/B,MAAN,EAAc,OAAd,CAAd,EAAsCvE,QAAtC,CAA+C,EAA/C,CAAkD,EAA1D,GAA+DmF,SAHhD;AAI5BxF,QAAI,EAAEoD,QAAQ,CAAC8B,OAAT,CAAiBuB,UAAjB,EAAuC,GAAGD,MAA1C,EAAkDhD,SAAlD,EAJsB;AAK5Bb;AAL4B,GAA9B;AAOA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD,CAxBM;;AAAM9C,oDAAyC0F,yCAAzC;;AA0Bb,MAAMK,cAAc,GAAG,OAAO3D,GAAP,EAAmB4D,QAAnB,EAAqCC,IAArC,EAAkD/E,cAAlD,EAA2E4B,GAA3E,EACOhB,KADP,EACuBe,WADvB,EAC6C3C,QAD7C,KACkE;AACvF,QAAMqB,MAAM,GAAG,MAAMvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAArB,CADuF,CAEvF;;AACA,QAAMqB,QAAQ,GAAG,IAAIhB,MAAM,CAACb,GAAP,CAAW8B,QAAf,CAAwBJ,GAAxB,EAA6B,IAA7B,EAAmC;AAClDjD,QAAI,EAAE6G;AAD4C,GAAnC,CAAjB,CAHuF,CAMvF;;AACA,QAAMvD,MAAM,GAAGF,QAAQ,CAACE,MAAT,CAAgB;AAC7BgD,aAAS,EAAEQ;AADkB,GAAhB,CAAf;AAIA,QAAMhF,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BvD,QAAI,EAAEsD,MAAM,CAACE,SAAP,EAFsB;AAG5Bb;AAH4B,GAA9B;AAKA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD,CAlBD;AAoBA;;;;;;;;AAMO,MAAMoD,mDAAmD,GAAG,OAAO/D,IAAP,EAAuCjC,QAAvC,KAA4D;AAC7H,QAAMZ,qBAAa6C,IAAb,EAAmBf,gCAAnB,CAAN;AACA,SAAO2E,cAAc,CAACI,sBAAQ/D,GAAT,EAAc+D,sBAAQhH,IAAtB,EAA4B,CAACgD,IAAI,CAACiE,cAAN,EAAsBjE,IAAI,CAACkE,YAA3B,CAA5B,EACnBlE,IAAI,CAACjB,cADc,EACEiB,IAAI,CAACW,GADP,EACYX,IAAI,CAACL,KADjB,EACwBK,IAAI,CAACU,WAD7B,EAC0C3C,QAD1C,CAArB;AAED,CAJM;;AAAMF,8DAAmDkG,mDAAnD;AAMb;;;;;;;AAMO,MAAMI,wCAAwC,GAAG,OAAOnE,IAAP,EAA+BjC,QAA/B,KAAoD;AAC1G,QAAMZ,qBAAa6C,IAAb,EAAmBf,wBAAnB,CAAN;AACA,SAAO2E,cAAc,CAACI,sBAAQ/D,GAAT,EAAc+D,sBAAQhH,IAAtB,EAA4B,CAACgD,IAAI,CAACoE,UAAN,EAAkBpE,IAAI,CAACkE,YAAvB,CAA5B,EACnBlE,IAAI,CAACjB,cADc,EACEiB,IAAI,CAACW,GADP,EACYX,IAAI,CAACL,KADjB,EACwBK,IAAI,CAACU,WAD7B,EAC0C3C,QAD1C,CAArB;AAED,CAJM;;AAAMF,mDAAwCsG,wCAAxC;AAKb;;;;;;;AAMO,MAAME,+CAA+C,GAAG,OAAOrE,IAAP,EAA4BjC,QAA5B,KAAiD;AAC9G,QAAMZ,qBAAa6C,IAAb,EAAmBf,qBAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJ8B,MAFI;AAGJyD,WAHI;AAIJzC,mBAJI;AAKJlC,SALI;AAMJgB,OANI;AAOJ1C,OAPI;AAQJyC,eARI;AASJ6D,mBATI;AAUJC,kBAVI;AAWJC,eAXI;AAYJC;AAZI,MAaF1E,IAbJ;AAeA,QAAMZ,MAAM,GAAGvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAAf,CAjB8G,CAmB9G;;AACA,QAAMqB,QAAQ,GAAG,IAAKhB,MAAD,CAASb,GAAT,CAAa8B,QAAjB,CAA0BsE,8BAA1B,EAAgD9C,eAAhD,CAAjB;AACA,QAAM+C,EAAE,GAAa,EAArB;AACA,QAAMC,EAAE,GAAa,EAArB;;AACA,MAAIL,cAAc,IAAIC,WAAlB,IAAiCF,eAArC,EAAsD;AACpDC,kBAAc,CAACM,GAAf,CAAmBC,CAAC,IAAIH,EAAE,CAACI,IAAH,CAAQ,KAAK,IAAIhD,wBAAJ,CAAc+C,CAAd,EAAiBzC,YAAjB,CAA8B,GAA9B,EAAmCjF,QAAnC,CAA4C,EAA5C,CAA+C,EAA5D,CAAxB;AACAoH,eAAW,CAACK,GAAZ,CAAgBC,CAAC,IAAIF,EAAE,CAACG,IAAH,CAAQ,KAAK,IAAIhD,wBAAJ,CAAc2B,mBAAMoB,CAAN,EAAS,OAAT,CAAd,EAAiC1H,QAAjC,CAA0C,EAA1C,CAA6C,EAA1D,CAArB;AACD;;AACD,QAAML,IAAI,GAAG0H,KAAK,GAAGtE,QAAQ,CAAC8B,OAAT,CAAiB+C,gBAAjB,CAAkCpE,EAAE,CAACW,IAAH,EAAlC,EAA6C8C,OAA7C,EAAsDrG,GAAtD,EAA2DsG,eAAe,GAAGA,eAAH,GAAqB,EAA/F,EAAmGK,EAAnG,EAAuGC,EAAvG,EAA2GH,KAA3G,EAAkHlE,SAAlH,EAAH,GAAmIJ,QAAQ,CAAC8B,OAAT,CAAiB+C,gBAAjB,CAAkCpE,EAAE,CAACW,IAAH,EAAlC,EAA6C8C,OAA7C,EAAsDrG,GAAtD,EAA2DsG,eAAe,GAAGA,eAAH,GAAqB,EAA/F,EAAmGK,EAAnG,EAAuGC,EAAvG,EAA2GrE,SAA3G,EAArJ;;AACA,MAAIqB,eAAJ,EAAqB;AACnB,UAAM/C,EAAE,GAAsB;AAC5ByB,UAAI,EAAE,CADsB;AAE5BM,QAAE,EAAEgB,eAAe,CAACL,IAAhB,EAFwB;AAG5BxE,UAAI,EAAEA,IAHsB;AAI5B2C;AAJ4B,KAA9B;AAMA,WAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD;;AACD,QAAM,IAAIxB,KAAJ,CAAU,uCAAV,CAAN;AACD,CAtCM;;AAAMtB,0DAA+CwG,+CAA/C;AAuCb;;;;;;;AAMO,MAAMa,uDAAuD,GAAG,OAAOlF,IAAP,EAAoCjC,QAApC,KAAyD;AAC9H,QAAMZ,qBAAa6C,IAAb,EAAmBf,6BAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJ8B,MAFI;AAGJyD,WAHI;AAIJzC,mBAJI;AAKJ5D,OALI;AAMJ0B,SANI;AAOJe,eAPI;AAQJ6D,mBARI;AASJC,kBATI;AAUJC,eAVI;AAWJ9D,OAXI;AAYJ+D;AAZI,MAaF1E,IAbJ;AAeA,QAAMZ,MAAM,GAAG,MAAMvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAArB,CAjB8H,CAmB9H;;AACA,QAAMqB,QAAQ,GAAG,IAAKhB,MAAD,CAASb,GAAT,CAAa8B,QAAjB,CAA0BsE,8BAA1B,EAAgD9C,eAAhD,CAAjB;AACA,QAAM+C,EAAE,GAAe,EAAvB;AACA,QAAMC,EAAE,GAAe,EAAvB;;AACA,MAAIL,cAAc,IAAIC,WAAlB,IAAiCF,eAArC,EAAsD;AACpD,SAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,cAAc,CAACjD,MAAnC,EAA2C4D,CAAC,EAA5C,EAAgD;AAC9C,YAAMC,GAAG,GAAa,EAAtB;AACA,YAAMC,GAAG,GAAa,EAAtB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,cAAc,CAACW,CAAD,CAAd,CAAkB5D,MAAtC,EAA8C+D,CAAC,EAA/C,EAAmD;AACjDF,WAAG,CAACJ,IAAJ,CAAS,KAAK,IAAIhD,wBAAJ,CAAcwC,cAAc,CAACW,CAAD,CAAd,CAAkBG,CAAlB,CAAd,EAAoChD,YAApC,CAAiD,GAAjD,EAAsDjF,QAAtD,CAA+D,EAA/D,CAAkE,EAAhF;AACAgI,WAAG,CAACL,IAAJ,CAAS,KAAK,IAAIhD,wBAAJ,CAAc2B,mBAAMc,WAAW,CAACU,CAAD,CAAX,CAAeG,CAAf,CAAN,EAAyB,OAAzB,CAAd,EAAiDjI,QAAjD,CAA0D,EAA1D,CAA6D,EAA3E;AACD;;AACDuH,QAAE,CAACI,IAAH,CAAQI,GAAR;AACAP,QAAE,CAACG,IAAH,CAAQK,GAAR;AACD;AACF;;AACD,QAAMrI,IAAI,GAAG0H,KAAK,GAAGtE,QAAQ,CAAC8B,OAAT,CAAiBqD,YAAjB,CAA8B1E,EAAE,CAACiE,GAAH,CAAOU,CAAC,IAAIA,CAAC,CAAChE,IAAF,EAAZ,CAA9B,EAAqD8C,OAArD,EAA8DrG,GAA9D,EAAmEsG,eAAe,GAAGA,eAAH,GAAqB,EAAvG,EAA2GK,EAA3G,EAA+GC,EAA/G,EAAmHH,KAAnH,EAA0HlE,SAA1H,EAAH,GAA2IJ,QAAQ,CAAC8B,OAAT,CAAiBqD,YAAjB,CAA8B1E,EAAE,CAACiE,GAAH,CAAOU,CAAC,IAAIA,CAAC,CAAChE,IAAF,EAAZ,CAA9B,EAAqD8C,OAArD,EAA8DrG,GAA9D,EAAmEsG,eAAe,GAAGA,eAAH,GAAqB,EAAvG,EAA2GK,EAA3G,EAA+GC,EAA/G,EAAmHrE,SAAnH,EAA7J;AACA,QAAM1B,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BM,MAAE,EAAEgB,eAAe,CAACL,IAAhB,EAFwB;AAG5BxE,QAAI,EAAEA,IAHsB;AAI5B2C;AAJ4B,GAA9B;AAMA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD,CA3CM;;AAAM9C,kEAAuDqH,uDAAvD;AA4Cb;;;;;;;AAMO,MAAMO,qCAAqC,GAAG,OAAOzF,IAAP,EAA4BjC,QAA5B,KAAiD;AACpG,QAAMZ,qBAAa6C,IAAb,EAAmBf,qBAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJ8B,MAFI;AAGJyD,WAHI;AAIJzC,mBAJI;AAKJlC,SALI;AAMJgB,OANI;AAOJ1C,OAPI;AAQJyC;AARI,MASFV,IATJ;AAWA,QAAMZ,MAAM,GAAGvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAAf,CAboG,CAepG;;AACA,QAAMqB,QAAQ,GAAG,IAAKhB,MAAD,CAASb,GAAT,CAAa8B,QAAjB,CAA0BqF,oBAA1B,EAAkD7D,eAAlD,CAAjB;;AACA,MAAIA,eAAJ,EAAqB;AACnB,UAAM/C,EAAE,GAAsB;AAC5ByB,UAAI,EAAE,CADsB;AAE5BM,QAAE,EAAEgB,eAAe,CAACL,IAAhB,EAFwB;AAG5BxE,UAAI,EAAEoD,QAAQ,CAAC8B,OAAT,CAAiB+C,gBAAjB,CAAkCpE,EAAE,CAACW,IAAH,EAAlC,EAA6C8C,OAA7C,EAAsDrG,GAAtD,EAA2DuC,SAA3D,EAHsB;AAI5Bb;AAJ4B,KAA9B;AAMA,WAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD;;AACD,QAAM,IAAIxB,KAAJ,CAAU,uCAAV,CAAN;AACD,CA3BM;;AAAMtB,gDAAqC4H,qCAArC;AA4Bb;;;;;;;AAMO,MAAME,6CAA6C,GAAG,OAAO3F,IAAP,EAA4BjC,QAA5B,KAAiD;AAC5G,QAAMZ,qBAAa6C,IAAb,EAAmBf,qBAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJ8B,MAFI;AAGJyD,WAHI;AAIJzC,mBAJI;AAKJ0C,mBALI;AAMJC,kBANI;AAOJvG,OAPI;AAQJ0B,SARI;AASJe,eATI;AAUJC,OAVI;AAWJ+D;AAXI,MAYF1E,IAZJ;AAcA,QAAMZ,MAAM,GAAG,MAAMvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAArB,CAhB4G,CAkB5G;;AACA,QAAMqB,QAAQ,GAAG,IAAKhB,MAAD,CAASb,GAAT,CAAa8B,QAAjB,CAA0BqF,oBAA1B,EAAkD7D,eAAlD,CAAjB;AACA,QAAM+D,SAAS,GAAapB,cAA5B,CApB4G,CAqB5G;;AACA,QAAMI,EAAE,GAAGgB,SAAS,CAACd,GAAV,CAAcC,CAAC,IAAI,KAAK,IAAI/C,wBAAJ,CAAc5C,MAAM,CAACzB,KAAP,CAAaC,KAAb,CAAmBmH,CAAnB,EAAsB,OAAtB,CAAd,EAA8C1H,QAA9C,CAAuD,EAAvD,CAA0D,EAAlF,CAAX;;AACA,MAAIwE,eAAJ,EAAqB;AACnB,UAAM/C,EAAE,GAAsB;AAC5ByB,UAAI,EAAE,CADsB;AAE5BM,QAAE,EAAEgB,eAAe,CAACL,IAAhB,EAFwB;AAG5BxE,UAAI,EAAE0H,KAAK,GAAGtE,QAAQ,CAAC8B,OAAT,CAAiB2D,gBAAjB,CAAkChF,EAAE,CAACW,IAAH,EAAlC,EAA6C8C,OAA7C,EAAsDrG,GAAtD,EAA2DsG,eAA3D,EAA4EK,EAA5E,EAAgFF,KAAhF,EAAuFlE,SAAvF,EAAH,GAAwGJ,QAAQ,CAAC8B,OAAT,CAAiB2D,gBAAjB,CAAkChF,EAAE,CAACW,IAAH,EAAlC,EAA6C8C,OAA7C,EAAsDrG,GAAtD,EAA2DsG,eAA3D,EAA4EK,EAA5E,EAAgFpE,SAAhF,EAHvF;AAI5Bb;AAJ4B,KAA9B;AAMA,WAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD;;AACD,QAAM,IAAIxB,KAAJ,CAAU,uCAAV,CAAN;AACD,CAjCM;;AAAMtB,wDAA6C8H,6CAA7C;AAkCb;;;;;;;AAMO,MAAMG,qDAAqD,GAAG,OAAO9F,IAAP,EAAoCjC,QAApC,KAAyD;AAC5H,QAAMZ,qBAAa6C,IAAb,EAAmBf,6BAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJ8B,MAFI;AAGJyD,WAHI;AAIJzC,mBAJI;AAKJ5D,OALI;AAMJ0B,SANI;AAOJe,eAPI;AAQJ6D,mBARI;AASJC,kBATI;AAUJ7D,OAVI;AAWJ+D;AAXI,MAYF1E,IAZJ;AAcA,QAAMZ,MAAM,GAAG,MAAMvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAArB,CAhB4H,CAkB5H;;AACA,QAAMqB,QAAQ,GAAG,IAAKhB,MAAD,CAASb,GAAT,CAAa8B,QAAjB,CAA0BqF,oBAA1B,EAAkD7D,eAAlD,CAAjB;AACA,QAAM+D,SAAS,GAAepB,cAA9B;AACA,QAAMI,EAAE,GAAGgB,SAAS,CAACd,GAAV,CAAciB,QAAQ,IAAIA,QAAQ,CAACjB,GAAT,CAAaC,CAAC,IAAI,KAAK,IAAI/C,wBAAJ,CAAc5C,MAAM,CAACzB,KAAP,CAAaC,KAAb,CAAmBmH,CAAnB,EAAsB,OAAtB,CAAd,EAA8C1H,QAA9C,CAAuD,EAAvD,CAA0D,EAAjF,CAA1B,CAAX;AACA,QAAMyB,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BM,MAAE,EAAEgB,eAAe,CAACL,IAAhB,EAFwB;AAG5BxE,QAAI,EAAE0H,KAAK,GAAGtE,QAAQ,CAAC8B,OAAT,CAAiB8D,oBAAjB,CAAsCnF,EAAE,CAACiE,GAAH,CAAOU,CAAC,IAAIA,CAAC,CAAChE,IAAF,EAAZ,CAAtC,EAA6D8C,OAA7D,EAAsErG,GAAtE,EAA2EsG,eAA3E,EAA4FK,EAA5F,EAAgGF,KAAhG,EAAuGlE,SAAvG,EAAH,GAAwHJ,QAAQ,CAAC8B,OAAT,CAAiB8D,oBAAjB,CAAsCnF,EAAE,CAACiE,GAAH,CAAOU,CAAC,IAAIA,CAAC,CAAChE,IAAF,EAAZ,CAAtC,EAA6D8C,OAA7D,EAAsErG,GAAtE,EAA2EsG,eAA3E,EAA4FK,EAA5F,EAAgGpE,SAAhG,EAHvG;AAI5Bb;AAJ4B,GAA9B;AAMA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD,CA7BM;;AAAM9C,gEAAqDiI,qDAArD;AA8Bb;;;;;;;AAMO,MAAMG,6CAA6C,GAAG,OAAOjG,IAAP,EAAoCjC,QAApC,KAAyD;AACpH,QAAMZ,qBAAa6C,IAAb,EAAmBf,6BAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJ8B,MAFI;AAGJyD,WAHI;AAIJzC,mBAJI;AAKJ5D,OALI;AAMJ0B,SANI;AAOJe,eAPI;AAQJC;AARI,MASFX,IATJ;AAWA,QAAMZ,MAAM,GAAG,MAAMvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAArB,CAboH,CAepH;;AACA,QAAMqB,QAAQ,GAAG,IAAKhB,MAAD,CAASb,GAAT,CAAa8B,QAAjB,CAA0BqF,oBAA1B,EAAkD7D,eAAlD,CAAjB;AACA,QAAM/C,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BM,MAAE,EAAEgB,eAAe,CAACL,IAAhB,EAFwB;AAG5BxE,QAAI,EAAEoD,QAAQ,CAAC8B,OAAT,CAAiBqD,YAAjB,CAA8B1E,EAAE,CAACiE,GAAH,CAAOU,CAAC,IAAIA,CAAC,CAAChE,IAAF,EAAZ,CAA9B,EAAqD8C,OAArD,EAA8DrG,GAA9D,EAAmEuC,SAAnE,EAHsB;AAI5Bb;AAJ4B,GAA9B;AAMA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD,CAxBM;;AAAM9C,wDAA6CoI,6CAA7C;AA0Bb;;;;;;;AAMO,MAAMC,qCAAqC,GAAG,OAAOlG,IAAP,EAA4BjC,QAA5B,KAAiD;AACpG,QAAMZ,qBAAa6C,IAAb,EAAmBf,qBAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJuF,WAFI;AAGJ3D,OAHI;AAIJkB,mBAJI;AAKJlC,SALI;AAMJe;AANI,MAOFV,IAPJ;AASA,QAAMZ,MAAM,GAAGvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAAf,CAXoG,CAapG;;AACA,QAAMqB,QAAQ,GAAG,IAAKhB,MAAD,CAASb,GAAT,CAAa8B,QAAjB,CAA0BqF,oBAA1B,EAAkD7D,eAAlD,CAAjB;AACA,QAAM/C,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BM,MAAE,EAAEgB,eAAe,CAACL,IAAhB,EAFwB;AAG5BxE,QAAI,EAAEoD,QAAQ,CAAC8B,OAAT,CAAiBS,IAAjB,CAAsB2B,OAAtB,EAA+B9D,SAA/B,EAHsB;AAI5Bb;AAJ4B,GAA9B;AAMA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD,CAtBM;;AAAM9C,gDAAqCqI,qCAArC;AAwBb;;;;;;;AAMO,MAAMC,wDAAwD,GAAG,OAAOnG,IAAP,EAAmCjC,QAAnC,KAAwD;AAC9H,QAAMZ,qBAAa6C,IAAb,EAAmBf,qBAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJqH,iBAFI;AAGJ9B,WAHI;AAIJ3D,OAJI;AAKJkB,mBALI;AAMJlC,SANI;AAOJe;AAPI,MAQFV,IARJ;AAUA,QAAMZ,MAAM,GAAGvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAAf,CAZ8H,CAc9H;;AACA,QAAMqB,QAAQ,GAAG,IAAKhB,MAAD,CAASb,GAAT,CAAa8B,QAAjB,CAA0BqF,oBAA1B,EAAkD7D,eAAlD,CAAjB;AACA,QAAM/C,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BM,MAAE,EAAEgB,eAAe,CAACL,IAAhB,EAFwB;AAG5BxE,QAAI,EAAEoD,QAAQ,CAAC8B,OAAT,CAAiBmE,uBAAjB,CAAyC/B,OAAzC,EAAkD,KAAK,IAAItC,wBAAJ,CAAc2B,mBAAMyC,aAAN,EAAqB,OAArB,CAAd,EAA6C/I,QAA7C,CAAsD,EAAtD,CAAyD,EAAhH,EAAoHmD,SAApH,EAHsB;AAI5Bb;AAJ4B,GAA9B;AAMA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD,CAvBM;;AAAM9C,mEAAwDsI,wDAAxD;AAyBb;;;;;;;AAMO,MAAMG,yCAAyC,GAAG,OAAOtG,IAAP,EAAgCjC,QAAhC,KAAqD;AAC5G,QAAMZ,qBAAa6C,IAAb,EAAmBf,yBAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJ8B,MAFI;AAGJyD,WAHI;AAIJ3D,OAJI;AAKJkB,mBALI;AAMJlC,SANI;AAOJe,eAPI;AAQJe,SARI;AASJ8E,kBATI;AAUJC,cAVI;AAWJC;AAXI,MAYFzG,IAZJ;AAcA,QAAMZ,MAAM,GAAG,MAAMvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAArB,CAhB4G,CAkB5G;;AACA,QAAMqB,QAAQ,GAAG,IAAKhB,MAAD,CAASb,GAAT,CAAa8B,QAAjB,CAA0BoG,UAAU,GAAG9B,8BAAH,GAA0Be,oBAA9D,EAAsF7D,eAAtF,CAAjB;AACA,QAAM6E,SAAS,GAAGD,UAAU,GAAGE,MAAM,CAACpG,IAAP,CAAYgG,cAAc,GAAG,iBAAjB,GAAqC5C,mBAAM6C,UAAN,EAAmB,OAAnB,CAAjD,EAA8E,MAA9E,CAAH,GAA2F,EAAvH;AACA,QAAMI,SAAS,GAAGH,UAAU,GAAGrG,QAAQ,CAAC8B,OAAT,CAAiB2E,YAAjB,CAA8BhG,EAAE,CAACW,IAAH,EAA9B,EAAyC8C,OAAzC,EAAkD,KAAKoC,SAAS,CAACrJ,QAAV,CAAmB,KAAnB,CAAyB,EAAhF,EAAoFmD,SAApF,EAAH,GAAqGJ,QAAQ,CAAC8B,OAAT,CAAiB2E,YAAjB,CAA8BhG,EAAE,CAACW,IAAH,EAA9B,EAAyC8C,OAAzC,EAAkD9D,SAAlD,EAAjI;AACA,QAAM1B,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BM,MAAE,EAAEgB,eAAe,CAACL,IAAhB,EAFwB;AAG5BxE,QAAI,EAAE4J,SAHsB;AAI5BjH,SAJ4B;AAK5B8B,SAAK,EAAEA,KAAK,GAAG,KAAK,IAAIO,wBAAJ,CAAcP,KAAd,EAAqBa,YAArB,CAAkC,IAAlC,EAAwCjF,QAAxC,CAAiD,EAAjD,CAAoD,EAA5D,GAAiEmF;AALjD,GAA9B;AAOA,SAAO,MAAM/B,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD,CA9BM;;AAAM9C,oDAAyCyI,yCAAzC;AA+Bb;;;;;;;AAMO,MAAMQ,8CAA8C,GAAG,OAAO9G,IAAP,EAAkCjC,QAAlC,KAAuD;AACnH,QAAMZ,qBAAa6C,IAAb,EAAmBf,2BAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJ8B,MAFI;AAGJyD,WAHI;AAIJzC,mBAJI;AAKJlC,SALI;AAMJ3C,QANI;AAOJ2D,OAPI;AAQJoG,WARI;AASJrG;AATI,MAUFV,IAVJ;AAYA,QAAMZ,MAAM,GAAGvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAAf,CAdmH,CAgBnH;;AACA,QAAMqB,QAAQ,GAAG,IAAKhB,MAAD,CAASb,GAAT,CAAa8B,QAAjB,CAA0B2G,qBAA1B,EAA2CnF,eAA3C,CAAjB;AACA,QAAMoF,IAAI,GAAGF,OAAO,CAACjC,GAAR,CAAYmC,IAAI,IAAIA,IAAI,CAACnC,GAAL,CAASoC,GAAG,IAAI,KAAK,IAAIlF,wBAAJ,CAAckF,GAAd,EAAmB7J,QAAnB,CAA4B,EAA5B,CAA+B,EAApD,CAApB,CAAb;AACA,QAAMyB,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BM,MAAE,EAAEgB,eAAe,CAACL,IAAhB,EAFwB;AAG5BxE,QAAI,EAAEoD,QAAQ,CAAC8B,OAAT,CAAiBiF,SAAjB,CAA2BtG,EAA3B,EAA+ByD,OAA/B,EAAwC2C,IAAxC,EAA8CjK,IAAI,GAAGA,IAAH,GAAU,KAA5D,EAAmEwD,SAAnE,EAHsB;AAI5Bb;AAJ4B,GAA9B;AAOA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD,CA3BM;;AAAM9C,yDAA8CiJ,8CAA9C;AA4Bb;;;;;;;AAMO,MAAMM,yCAAyC,GAAG,OAAOpH,IAAP,EAA6BjC,QAA7B,KAAkD;AACzG,QAAMZ,qBAAa6C,IAAb,EAAmBf,sBAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJ8B,MAFI;AAGJyD,WAHI;AAIJzC,mBAJI;AAKJlC,SALI;AAMJ3C,QANI;AAOJ2D,OAPI;AAQJiB,UARI;AASJlB;AATI,MAUFV,IAVJ;AAYA,QAAMZ,MAAM,GAAGvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAAf,CAdyG,CAgBzG;;AACA,QAAMqB,QAAQ,GAAG,IAAKhB,MAAD,CAASb,GAAT,CAAa8B,QAAjB,CAA0B2G,qBAA1B,EAA2CnF,eAA3C,CAAjB;AACA,QAAM/C,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BM,MAAE,EAAEgB,eAAe,CAACL,IAAhB,EAFwB;AAG5BxE,QAAI,EAAEoD,QAAQ,CAAC8B,OAAT,CAAiBG,IAAjB,CAAsBxB,EAAE,CAACW,IAAH,EAAtB,EAAiC8C,OAAjC,EAA0C,KAAK,IAAItC,wBAAJ,CAAcJ,MAAd,EAAsBvE,QAAtB,CAA+B,EAA/B,CAAkC,EAAjF,EAAqFL,IAAI,GAAGA,IAAH,GAAU,KAAnG,EAA0GwD,SAA1G,EAHsB;AAI5Bb;AAJ4B,GAA9B;AAMA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD,CAzBM;;AAAM9C,oDAAyCuJ,yCAAzC;AA2Bb;;;;;;;AAMO,MAAMC,8CAA8C,GAAG,OAAOrH,IAAP,EAAqCjC,QAArC,KAA0D;AACtH,QAAMZ,qBAAa6C,IAAb,EAAmBf,8BAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJuI,WAFI;AAGJhD,WAHI;AAIJyC,WAJI;AAKJpG,OALI;AAMJkB,mBANI;AAOJlC,SAPI;AAQJe;AARI,MASFV,IATJ;AAWA,QAAMZ,MAAM,GAAGvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAAf,CAbsH,CAetH;;AACA,QAAMqB,QAAQ,GAAG,IAAKhB,MAAD,CAASb,GAAT,CAAa8B,QAAjB,CAA0B2G,qBAA1B,EAA2CnF,eAA3C,CAAjB;AACA,QAAM/C,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BM,MAAE,EAAEgB,eAAe,CAACL,IAAhB,EAFwB;AAG5BxE,QAAI,EAAEoD,QAAQ,CAAC8B,OAAT,CAAiBqF,SAAjB,CAA2BD,OAA3B,EAAoChD,OAApC,EAA6CyC,OAA7C,EAAsDvG,SAAtD,EAHsB;AAI5Bb;AAJ4B,GAA9B;AAMA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD,CAxBM;;AAAM9C,yDAA8CwJ,8CAA9C;AAyBb;;;;;;;AAMO,MAAMG,yCAAyC,GAAG,OAAOxH,IAAP,EAAgCjC,QAAhC,KAAqD;AAC5G,QAAMZ,qBAAa6C,IAAb,EAAmBf,yBAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJuI,WAFI;AAGJhD,WAHI;AAIJ1C,UAJI;AAKJjB,OALI;AAMJkB,mBANI;AAOJlC,SAPI;AAQJe;AARI,MASFV,IATJ;AAWA,QAAMZ,MAAM,GAAGvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAAf,CAb4G,CAe5G;;AACA,QAAMqB,QAAQ,GAAG,IAAKhB,MAAD,CAASb,GAAT,CAAa8B,QAAjB,CAA0B2G,qBAA1B,EAA2CnF,eAA3C,CAAjB;AACA,QAAM/C,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BM,MAAE,EAAEgB,eAAe,CAACL,IAAhB,EAFwB;AAG5BxE,QAAI,EAAEoD,QAAQ,CAAC8B,OAAT,CAAiBS,IAAjB,CAAsB2E,OAAtB,EAA+BhD,OAA/B,EAAwC1C,MAAxC,EAAgDpB,SAAhD,EAHsB;AAI5Bb;AAJ4B,GAA9B;AAMA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD,CAxBM;;AAAM9C,oDAAyC2J,yCAAzC;AA0Bb;;;;;;;AAMO,MAAMC,kDAAkD,GAAG,OAAOzH,IAAP,EAAsCjC,QAAtC,KAA2D;AAC3H,QAAMZ,qBAAa6C,IAAb,EAAmBf,+BAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJ8B,MAFI;AAGJyD,WAHI;AAIJ3D,OAJI;AAKJkB,mBALI;AAMJlC,SANI;AAOJe,eAPI;AAQJqG,WARI;AASJ/J;AATI,MAUFgD,IAVJ;AAYA,QAAMZ,MAAM,GAAG,MAAMvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAArB,CAd2H,CAgB3H;;AACA,QAAMqB,QAAQ,GAAG,IAAKhB,MAAD,CAASb,GAAT,CAAa8B,QAAjB,CAA0B2G,qBAA1B,EAA2CnF,eAA3C,CAAjB;AACA,QAAMoF,IAAI,GAAGF,OAAO,CAACjC,GAAR,CAAYoC,GAAG,IAAI,KAAK,IAAIlF,wBAAJ,CAAckF,GAAd,EAAmB7J,QAAnB,CAA4B,EAA5B,CAA+B,EAAvD,CAAb;AAEA,QAAMyB,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BM,MAAE,EAAEgB,eAAe,CAACL,IAAhB,EAFwB;AAG5BxE,QAAI,EAAEoD,QAAQ,CAAC8B,OAAT,CAAiBwF,iBAAjB,CAAmC7G,EAAE,CAACW,IAAH,EAAnC,EAA8C8C,OAAO,CAACQ,GAAR,CAAY6C,KAAK,IAAIA,KAAK,CAACnG,IAAN,EAArB,CAA9C,EAAkFyF,IAAlF,EAAwFjK,IAAI,GAAGA,IAAH,GAAU,KAAtG,EAA6GwD,SAA7G,EAHsB;AAI5Bb;AAJ4B,GAA9B;AAOA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD,CA5BM;;AAAM9C,6DAAkD4J,kDAAlD;AA6Bb;;;;;;;AAMO,MAAMG,6CAA6C,GAAG,OAAO5H,IAAP,EAAiCjC,QAAjC,KAAsD;AACjH,QAAMZ,qBAAa6C,IAAb,EAAmBf,yBAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJ8B,MAFI;AAGJyD,WAHI;AAIJ3D,OAJI;AAKJkB,mBALI;AAMJlC,SANI;AAOJe,eAPI;AAQJkB,UARI;AASJ5E;AATI,MAUFgD,IAVJ;AAYA,QAAMZ,MAAM,GAAG,MAAMvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAArB,CAdiH,CAgBjH;;AACA,QAAMqB,QAAQ,GAAG,IAAKhB,MAAD,CAASb,GAAT,CAAa8B,QAAjB,CAA0B2G,qBAA1B,EAA2CnF,eAA3C,CAAjB;AACA,QAAM/C,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BM,MAAE,EAAEgB,eAAe,CAACL,IAAhB,EAFwB;AAG5BxE,QAAI,EAAEoD,QAAQ,CAAC8B,OAAT,CAAiB2E,YAAjB,CAA8BhG,EAAE,CAACW,IAAH,EAA9B,EAAyC8C,OAAzC,EAAkD,KAAK,IAAItC,wBAAJ,CAAcJ,MAAd,EAAsBvE,QAAtB,CAA+B,EAA/B,CAAkC,EAAzF,EAA6FL,IAAI,GAAGA,IAAH,GAAU,KAA3G,EAAkHwD,SAAlH,EAHsB;AAI5Bb;AAJ4B,GAA9B;AAMA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD,CAzBM;;AAAM9C,wDAA6C+J,6CAA7C;AA0Bb;;;;;;;AAMO,MAAMC,2CAA2C,GAAG,OAAO7H,IAAP,EAAkCjC,QAAlC,KAAuD;AAChH,QAAMZ,qBAAa6C,IAAb,EAAmBf,2BAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJ4B,OAFI;AAGJmH,OAHI;AAIJnI,SAJI;AAKJe,eALI;AAMJqH;AANI,MAOF/H,IAPJ;AASA,QAAMZ,MAAM,GAAG,MAAMvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAArB,CAXgH,CAahH;;AACA,QAAMqB,QAAQ,GAAG,IAAIhB,MAAM,CAACb,GAAP,CAAW8B,QAAf,CAAwB2G,qBAAxB,EAAyC,IAAzC,EAA+C;AAC9DhK,QAAI,EAAEgL;AADwD,GAA/C,CAAjB,CAdgH,CAkBhH;;AACA,QAAM1H,MAAM,GAAGF,QAAQ,CAACE,MAAT,CAAgB;AAC7BgD,aAAS,EAAE,CAACwE,GAAD,EAAMC,UAAU,GAAGA,UAAH,GAAgB,KAAhC;AADkB,GAAhB,CAAf;AAIA,QAAMjJ,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BvD,QAAI,EAAEsD,MAAM,CAACE,SAAP,EAFsB;AAG5Bb;AAH4B,GAA9B;AAKA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD,CA7BM;;AAAM9C,sDAA2CgK,2CAA3C;AA8Bb;;;;;;;AAMO,MAAMI,uCAAuC,GAAG,OAAOjI,IAAP,EAA8BjC,QAA9B,KAAmD;AACxG,QAAMZ,qBAAa6C,IAAb,EAAmBf,uBAAnB,CAAN;AACA,QAAM;AACJF,kBADI;AAEJ4B,OAFI;AAGJsC,QAHI;AAIJC,UAJI;AAKJvD,SALI;AAMJe,eANI;AAOJ+F,cAPI;AAQJV,YARI;AASJgC;AATI,MAUF/H,IAVJ;AAYA,QAAMZ,MAAM,GAAG,MAAMvB,kBAAUE,QAAV,EAAoBgB,cAApB,CAArB;;AACA,MAAI0H,UAAU,IAAIV,QAAlB,EAA4B;AAC1B,UAAM,IAAI5G,KAAJ,CAAU,8DAAV,CAAN;AACD;;AACD,MAAIc,GAAG,GAAGiI,oBAAV;AACA,MAAIlL,IAAI,GAAGmL,yBAAX;;AACA,MAAI1B,UAAJ,EAAgB;AACdxG,OAAG,GAAG0E,8BAAN;AACA3H,QAAI,GAAGoL,mCAAP;AACD,GAHD,MAGO,IAAIrC,QAAJ,EAAc;AACnB9F,OAAG,GAAGyF,oBAAN;AACA1I,QAAI,GAAGqL,yBAAP;AACD,GA1BuG,CA2BxG;;;AACA,QAAMjI,QAAQ,GAAG,IAAIhB,MAAM,CAACb,GAAP,CAAW8B,QAAf,CAAwBJ,GAAxB,EAA6B,IAA7B,EAAmC;AAClDjD;AADkD,GAAnC,CAAjB,CA5BwG,CAgCxG;;AACA,QAAMsD,MAAM,GAAGF,QAAQ,CAACE,MAAT,CAAgB;AAC7BgD,aAAS,EAAE,CAACL,IAAD,EAAOC,MAAP,EAAe6E,UAAU,GAAGA,UAAH,GAAgB,KAAzC;AADkB,GAAhB,CAAf;AAIA,QAAMjJ,EAAE,GAAsB;AAC5ByB,QAAI,EAAE,CADsB;AAE5BvD,QAAI,EAAEsD,MAAM,CAACE,SAAP,EAFsB;AAG5Bb;AAH4B,GAA9B;AAMA,SAAO,MAAMc,sCAAsC,CAACrB,MAAD,EAASN,EAAT,EAAa4B,WAAb,EAA0B3B,cAA1B,EAA0C4B,GAA1C,CAAnD;AACD,CA5CM;;AAAM9C,kDAAuCoK,uCAAvC;;AA8CN,MAAMK,2BAA2B,GAAG,OAAOC,OAAP,EAAyB1G,eAAzB,EAAkD9D,QAAlD,KAAuE;AAChH,MAAI,CAAC8D,eAAL,EAAsB;AACpB,UAAM,IAAI1C,KAAJ,CAAU,2BAAV,CAAN;AACD;;AACD,QAAMC,MAAM,GAAG,MAAMvB,kBAAUE,QAAV,CAArB,CAJgH,CAKhH;;AACA,QAAMqC,QAAQ,GAAG,IAAIhB,MAAM,CAACb,GAAP,CAAW8B,QAAf,CAAwBmI,mBAAxB,EAAmC3G,eAAe,CAACL,IAAhB,EAAnC,CAAjB;AACA,SAAO,MAAMpB,QAAQ,CAAC8B,OAAT,CAAiBC,QAAjB,GAA4BC,IAA5B,EAAb;AACD,CARM;;AAAMvE,sCAA2ByK,2BAA3B;AAUb;;;;;;;;AAOO,MAAMG,gDAAgD,GAAG,OAAOzI,IAAP,EAAgDjC,QAAhD,KAAqE;AACnI,QAAMZ,qBAAa6C,IAAb,EAAmBf,yCAAnB,CAAN;AACA,QAAM;AACJuE,UADI;AAEJC,cAFI;AAGJC,aAHI;AAIJ7B;AAJI,MAKF7B,IALJ;AAMA,QAAMZ,MAAM,GAAGvB,kBAAUE,QAAV,CAAf;AACA,QAAMqC,QAAQ,GAAG,IAAIhB,MAAM,CAACb,GAAP,CAAW8B,QAAf,CAAwB,CAACqD,SAAD,CAAxB,EAAqC7B,eAArC,CAAjB;AACA,SAAO;AAAE7E,QAAI,EAAE,MAAMoD,QAAQ,CAAC8B,OAAT,CAAiBuB,UAAjB,EAAuC,GAAGD,MAA1C,EAAkDpB,IAAlD;AAAd,GAAP;AACD,CAXM;;AAAMvE,2DAAgD4K,gDAAhD;AAab;;;;;;;;AAOO,MAAMC,wBAAwB,GAAG,OAAO1I,IAAP,EAA2BjC,QAA3B,KACtC6B,0BAAa,MAAM/B,oCAA4BmC,IAA5B,EAAkCjC,QAAlC,CAAnB,EAAgEiC,IAAI,CAACU,WAArE,CADK;;AAAM7C,mCAAwB6K,wBAAxB;AAGb;;;;;;;;AAOO,MAAMC,yBAAyB,GAAG,OAAO3I,IAAP,EAA4BjC,QAA5B,KACvC6B,0BAAa,MAAM/B,2CAAmCmC,IAAnC,EAAyCjC,QAAzC,CAAnB,EAAuEiC,IAAI,CAACU,WAA5E,CADK;;AAAM7C,oCAAyB8K,yBAAzB;AAGb;;;;;;;;AAOO,MAAMC,0BAA0B,GAAG,OAAO5I,IAAP,EAA4BjC,QAA5B,KACxC6B,0BAAa,MAAM/B,4CAAoCmC,IAApC,EAA0CjC,QAA1C,CAAnB,EAAwEiC,IAAI,CAACU,WAA7E,CADK;;AAAM7C,qCAA0B+K,0BAA1B;AAGb;;;;;;;;AAOO,MAAMC,0BAA0B,GAAG,OAAO7I,IAAP,EAA0BjC,QAA1B,KACxC6B,0BAAa,MAAM/B,4CAAoCmC,IAApC,EAA0CjC,QAA1C,CAAnB,EAAwEiC,IAAI,CAACU,WAA7E,CADK;;AAAM7C,qCAA0BgL,0BAA1B;AAGb;;;;;;;;AAOO,MAAMC,4CAA4C,GAAG,OAAO9I,IAAP,EAAgFjC,QAAhF,KAAqG;AAC/J,MAAIiC,IAAI,CAAC0D,SAAL,CAAeqF,eAAf,KAAmC,MAAvC,EAA+C;AAC7C,WAAOlL,yDAAiDmC,IAAjD,EAAuDjC,QAAvD,CAAP;AACD;;AACD,SAAO6B,0BAAa,MAAM/B,kDAA0CmC,IAA1C,EAAgDjC,QAAhD,CAAnB,EAA+EiC,IAAsC,CAACU,WAAtH,CAAP;AACD,CALM;;AAAM7C,uDAA4CiL,4CAA5C;AAOb;;;;;;;;AAOO,MAAME,yBAAyB,GAAG,OAAOhJ,IAAP,EAA4BjC,QAA5B,KAAiD;AACxF,MAAI,CAACiC,IAAI,CAACjB,cAAV,EAA0B;AACxB,WAAOkK,cAAQjJ,IAAR,CAAP;AACD;;AACD,SAAOJ,0BAAa,MAAM/B,8CAAsCmC,IAAtC,EAA4CjC,QAA5C,CAAnB,EAA0EiC,IAAI,CAACU,WAA/E,CAAP;AACD,CALM;;AAAM7C,oCAAyBmL,yBAAzB;AAOb;;;;;;;;AAOO,MAAME,iCAAiC,GAAG,OAAOlJ,IAAP,EAA4BjC,QAA5B,KAC/C6B,0BAAa,MAAM/B,sDAA8CmC,IAA9C,EAAoDjC,QAApD,CAAnB,EAAkFiC,IAAI,CAACU,WAAvF,CADK;;AAAM7C,4CAAiCqL,iCAAjC;AAEb;;;;;;;;AAOO,MAAMC,mCAAmC,GAAG,OAAOnJ,IAAP,EAA4BjC,QAA5B,KACjD6B,0BAAa,MAAM/B,wDAAgDmC,IAAhD,EAAsDjC,QAAtD,CAAnB,EAAoFiC,IAAI,CAACU,WAAzF,CADK;;AAAM7C,8CAAmCsL,mCAAnC;AAEb;;;;;;;;AAOO,MAAMC,kDAAkD,GAAG,OAAOpJ,IAAP,EAAoCjC,QAApC,KAChE6B,0BAAa,MAAM/B,8DAAsDmC,IAAtD,EAA4DjC,QAA5D,CAAnB,EAA0FiC,IAAI,CAACU,WAA/F,CADK;;AAAM7C,6DAAkDuL,kDAAlD;AAGb;;;;;;;;AAOO,MAAMC,2CAA2C,GAAG,OAAOrJ,IAAP,EAAoCjC,QAApC,KACzD6B,0BAAa,MAAM/B,gEAAwDmC,IAAxD,EAA8DjC,QAA9D,CAAnB,EAA4FiC,IAAI,CAACU,WAAjG,CADK;;AAAM7C,sDAA2CwL,2CAA3C;AAEb;;;;;;;;AAOO,MAAMC,iCAAiC,GAAG,OAAOtJ,IAAP,EAAoCjC,QAApC,KAC/C6B,0BAAa,MAAM/B,sDAA8CmC,IAA9C,EAAoDjC,QAApD,CAAnB,EAAkFiC,IAAI,CAACU,WAAvF,CADK;;AAAM7C,4CAAiCyL,iCAAjC;AAEb;;;;;;;;AAOO,MAAMC,yBAAyB,GAAG,OAAOvJ,IAAP,EAA4BjC,QAA5B,KACvC6B,0BAAa,MAAM/B,8CAAsCmC,IAAtC,EAA4CjC,QAA5C,CAAnB,EAA0EiC,IAAI,CAACU,WAA/E,CADK;;AAAM7C,oCAAyB0L,yBAAzB;AAGb;;;;;;;;AAOO,MAAMC,4CAA4C,GAAG,OAAOxJ,IAAP,EAAmCjC,QAAnC,KAC1D6B,0BAAa,MAAM/B,iEAAyDmC,IAAzD,EAA+DjC,QAA/D,CAAnB,EAA6FiC,IAAI,CAACU,WAAlG,CADK;;AAAM7C,uDAA4C2L,4CAA5C;AAGb;;;;;;;;AAOO,MAAMC,qBAAqB,GAAG,OAAOzJ,IAAP,EAAgCjC,QAAhC,KACnC6B,0BAAa,MAAM/B,kDAA0CmC,IAA1C,EAAgDjC,QAAhD,CAAnB,EAA8EiC,IAAI,CAACU,WAAnF,CADK;;AAAM7C,gCAAqB4L,qBAArB;AAGb;;;;;;;;AAOO,MAAMC,2BAA2B,GAAG,OAAO1J,IAAP,EAA8BjC,QAA9B,KACzC6B,0BAAa,MAAM/B,gDAAwCmC,IAAxC,EAA8CjC,QAA9C,CAAnB,EAA4EiC,IAAI,CAACU,WAAjF,CADK;;AAAM7C,sCAA2B6L,2BAA3B;AAGb;;;;;;;;AAOO,MAAMC,4BAA4B,GAAG,OAAO3J,IAAP,EAAiCjC,QAAjC,KAC1C6B,0BAAa,MAAM/B,sDAA8CmC,IAA9C,EAAoDjC,QAApD,CAAnB,EAAkFiC,IAAI,CAACU,WAAvF,CADK;;AAAM7C,uCAA4B8L,4BAA5B;AAGb;;;;;;;;AAOO,MAAMC,iCAAiC,GAAG,OAAO5J,IAAP,EAAsCjC,QAAtC,KAC/C6B,0BAAa,MAAM/B,2DAAmDmC,IAAnD,EAAyDjC,QAAzD,CAAnB,EAAuFiC,IAAI,CAACU,WAA5F,CADK;;AAAM7C,4CAAiC+L,iCAAjC;AAEb;;;;;;;;AAOO,MAAMC,kCAAkC,GAAG,OAAO7J,IAAP,EAAkCjC,QAAlC,KAChD6B,0BAAa,MAAM/B,oDAA4CmC,IAA5C,EAAkDjC,QAAlD,CAAnB,EAAgFiC,IAAI,CAACU,WAArF,CADK;;AAAM7C,6CAAkCgM,kCAAlC;AAGb;;;;;;;;AAOO,MAAMC,gCAAgC,GAAG,OAAO9J,IAAP,EAA6BjC,QAA7B,KAC9C6B,0BAAa,MAAM/B,kDAA0CmC,IAA1C,EAAgDjC,QAAhD,CAAnB,EAA8EiC,IAAI,CAACU,WAAnF,CADK;;AAAM7C,2CAAgCiM,gCAAhC;AAGb;;;;;;;;AAOO,MAAMC,qCAAqC,GAAG,OAAO/J,IAAP,EAAkCjC,QAAlC,KACnD6B,0BAAa,MAAM/B,uDAA+CmC,IAA/C,EAAqDjC,QAArD,CAAnB,EAAmFiC,IAAI,CAACU,WAAxF,CADK;;AAAM7C,gDAAqCkM,qCAArC;AAGb;;;;;;;;AAOO,MAAMC,gCAAgC,GAAG,OAAOhK,IAAP,EAAgCjC,QAAhC,KAC9C6B,0BAAa,MAAM/B,kDAA0CmC,IAA1C,EAAgDjC,QAAhD,CAAnB,EAA8EiC,IAAI,CAACU,WAAnF,CADK;;AAAM7C,2CAAgCmM,gCAAhC;AAGb;;;;;;;;AAOO,MAAMC,qCAAqC,GAAG,OAAOjK,IAAP,EAAqCjC,QAArC,KACnD6B,0BAAa,MAAM/B,uDAA+CmC,IAA/C,EAAqDjC,QAArD,CAAnB,EAAmFiC,IAAI,CAACU,WAAxF,CADK;;AAAM7C,gDAAqCoM,qCAArC;AAGb;;;;;;;;AAOO,MAAMC,+CAA+C,GAAG,OAAOlK,IAAP,EAAuCjC,QAAvC,KAC7D6B,0BAAa,MAAM/B,2DAAmDmC,IAAnD,EAAyDjC,QAAzD,CAAnB,EAAuFiC,IAAI,CAACU,WAA5F,CADK;;AAAM7C,0DAA+CqM,+CAA/C;AAGb;;;;;;;AAMO,MAAMC,gDAAgD,GAAG,OAAOnK,IAAP,EAAuCjC,QAAvC,KAC9D6B,0BAAa,MAAM/B,4DAAoDmC,IAApD,EAA0DjC,QAA1D,CAAnB,EAAwFiC,IAAI,CAACU,WAA7F,CADK;;AAAM7C,2DAAgDsM,gDAAhD","names":["ethGetGasPriceInWei","gasStationUrl","process","env","TATUM_GAS_STATION_API_KEY","data","Promise","all","tatum_1","get","toString","then","response","fastest","gasPrice","web3_1","utils","toWei","exports","getClient","provider","privateKey","url","TATUM_API_URL","constants_1","TATUM_API_KEY","TESTNET_TYPE","web3","eth","accounts","wallet","add","defaultAccount","address","signEthKMSTransaction","tx","fromPrivateKey","chain","model_1","ETH","Error","client","transactionConfig","JSON","parse","serializedTransaction","gas","estimateGas","nonce","blockchain_1","signTransaction","rawTransaction","prepareEthGenerateCustodialWalletSignedTransaction","body","abi","code","wallet_1","contract","Contract","deploy","from","encodeABI","prepareEthSignedTransactionAbstraction","signatureId","fee","prepareStoreDataTransaction","to","ethFee","hexData","isHex","stringToHex","toHex","addressNonce","customFee","Object","gasLimit","length","trim","value","stringify","prepareEthMintErc20SignedTransaction","amount","contractAddress","token_abi_2","digits","bignumber_js_1","pow","methods","decimals","call","mint","multipliedBy","transaction","undefined","_a","prepareEthBurnErc20SignedTransaction","burn","prepareEthOrErc20SignedTransaction","currency","transfer","prepareCustomErc20SignedTransaction","prepareDeployErc20SignedTransaction","name","symbol","supply","totalCap","token_bytecode_1","arguments","prepareSmartContractWriteMethodInvocation","params","methodName","methodABI","web3_utils_1","deployContract","bytecode","args","prepareEthDeployMarketplaceListingSignedTransaction","marketplace_1","marketplaceFee","feeRecipient","prepareEthDeployAuctionSignedTransaction","auctionFee","prepareEthMintErc721ProvenanceSignedTransaction","tokenId","authorAddresses","cashbackValues","fixedValues","erc20","erc721Provenance_abi_1","cb","fv","map","c","push","mintWithTokenURI","prepareEthMintMultipleErc721ProvenanceSignedTransaction","i","cb2","fv2","j","mintMultiple","t","prepareEthMintErc721SignedTransaction","erc721_abi_1","prepareEthMintCashbackErc721SignedTransaction","cashbacks","mintWithCashback","prepareEthMintMultipleCashbackErc721SignedTransaction","cashback","mintMultipleCashback","prepareEthMintMultipleErc721SignedTransaction","prepareEthBurnErc721SignedTransaction","prepareEthUpdateCashbackForAuthorErc721SignedTransaction","cashbackValue","updateCashbackForAuthor","prepareEthTransferErc721SignedTransaction","provenanceData","tokenPrice","provenance","dataBytes","Buffer","tokenData","safeTransfer","prepareEthMintMultiTokenBatchSignedTransaction","amounts","erc1155_abi_1","amts","amt","mintBatch","prepareEthMintMultiTokenSignedTransaction","prepareEthBurnBatchMultiTokenSignedTransaction","account","burnBatch","prepareEthBurnMultiTokenSignedTransaction","prepareEthBatchTransferMultiTokenSignedTransaction","safeBatchTransfer","token","prepareEthTransferMultiTokenSignedTransaction","prepareEthDeployMultiTokenSignedTransaction","uri","publicMint","erc1155_bytecode_1","prepareEthDeployErc721SignedTransaction","erc721_abi_2","erc721_bytecode_2","erc721Provenance_bytecode_1","erc721_bytecode_1","getEthErc20ContractDecimals","testnet","token_abi_1","sendSmartContractReadMethodInvocationTransaction","sendStoreDataTransaction","sendEthOrErc20Transaction","sendCustomErc20Transaction","sendDeployErc20Transaction","sendSmartContractMethodInvocationTransaction","stateMutability","sendMintErc721Transaction","nft_1","sendMintCashbackErc721Transaction","sendMintErc721ProvenanceTransaction","sendEthMintMultipleCashbackErc721SignedTransaction","sendMintMultipleErc721ProvenanceTransaction","sendMintMultipleErc721Transaction","sendBurnErc721Transaction","sendUpdateCashbackForAuthorErc721Transaction","sendErc721Transaction","sendDeployErc721Transaction","sendEthMultiTokenTransaction","sendEthMultiTokenBatchTransaction","sendEthDeployMultiTokenTransaction","sendEthMintMultiTokenTransaction","sendEthMintMultiTokenBatchTransaction","sendEthBurnMultiTokenTransaction","sendEthBurnBatchMultiTokenTransaction","sendEthGenerateCustodialWalletSignedTransaction","sendEthDeployMarketplaceListingSignedTransaction"],"sourceRoot":"","sources":["../../../src/transaction/eth.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}