{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst assert = __importStar(require(\"assert\"));\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst utils = __importStar(require(\"./utils\"));\n\nconst validate = utils.common.validate;\nconst AccountSetFlags = utils.common.constants.AccountSetFlags;\nconst AccountFields = utils.common.constants.AccountFields;\n\nfunction setTransactionFlags(txJSON, values) {\n  const keys = Object.keys(values).filter(key => AccountSetFlags[key] != null);\n  assert.ok(keys.length <= 1, 'ERROR: can only set one setting per transaction');\n  const flagName = keys[0];\n  const value = values[flagName];\n  const index = AccountSetFlags[flagName];\n\n  if (index != null) {\n    if (value) {\n      txJSON.SetFlag = index;\n    } else {\n      txJSON.ClearFlag = index;\n    }\n  }\n}\n\nfunction setTransactionFields(txJSON, input) {\n  const fieldSchema = AccountFields;\n\n  for (const fieldName in fieldSchema) {\n    const field = fieldSchema[fieldName];\n    let value = input[field.name];\n\n    if (value === undefined) {\n      continue;\n    }\n\n    if (value === null && field.hasOwnProperty('defaults')) {\n      value = field.defaults;\n    }\n\n    if (field.encoding === 'hex' && !field.length) {\n      value = Buffer.from(value, 'ascii').toString('hex').toUpperCase();\n    }\n\n    txJSON[fieldName] = value;\n  }\n}\n\nfunction convertTransferRate(transferRate) {\n  return new bignumber_js_1.default(transferRate).shiftedBy(9).toNumber();\n}\n\nfunction formatSignerEntry(signer) {\n  return {\n    SignerEntry: {\n      Account: signer.address,\n      SignerWeight: signer.weight\n    }\n  };\n}\n\nfunction createSettingsTransactionWithoutMemos(account, settings) {\n  if (settings.regularKey !== undefined) {\n    const removeRegularKey = {\n      TransactionType: 'SetRegularKey',\n      Account: account\n    };\n\n    if (settings.regularKey === null) {\n      return removeRegularKey;\n    }\n\n    return Object.assign({}, removeRegularKey, {\n      RegularKey: settings.regularKey\n    });\n  }\n\n  if (settings.signers != null) {\n    const setSignerList = {\n      TransactionType: 'SignerListSet',\n      Account: account,\n      SignerEntries: [],\n      SignerQuorum: settings.signers.threshold\n    };\n\n    if (settings.signers.weights != null) {\n      setSignerList.SignerEntries = settings.signers.weights.map(formatSignerEntry);\n    }\n\n    return setSignerList;\n  }\n\n  const txJSON = {\n    TransactionType: 'AccountSet',\n    Account: account\n  };\n  const settingsWithoutMemos = Object.assign({}, settings);\n  delete settingsWithoutMemos.memos;\n  setTransactionFlags(txJSON, settingsWithoutMemos);\n  setTransactionFields(txJSON, settings);\n\n  if (txJSON.TransferRate != null) {\n    txJSON.TransferRate = convertTransferRate(txJSON.TransferRate);\n  }\n\n  return txJSON;\n}\n\nfunction createSettingsTransaction(account, settings) {\n  const txJSON = createSettingsTransactionWithoutMemos(account, settings);\n\n  if (settings.memos != null) {\n    txJSON.Memos = settings.memos.map(utils.convertMemo);\n  }\n\n  return txJSON;\n}\n\nfunction prepareSettings(address, settings) {\n  let instructions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  try {\n    validate.prepareSettings({\n      address,\n      settings,\n      instructions\n    });\n    const txJSON = createSettingsTransaction(address, settings);\n    return utils.prepareTransaction(txJSON, this, instructions);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n\nexports.default = prepareSettings;","map":{"version":3,"mappings":"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","names":["validate","utils","common","AccountSetFlags","constants","AccountFields","setTransactionFlags","txJSON","values","keys","Object","filter","key","assert","ok","length","flagName","value","index","SetFlag","ClearFlag","setTransactionFields","input","fieldSchema","fieldName","field","name","undefined","hasOwnProperty","defaults","encoding","Buffer","from","toString","toUpperCase","convertTransferRate","transferRate","bignumber_js_1","shiftedBy","toNumber","formatSignerEntry","signer","SignerEntry","Account","address","SignerWeight","weight","createSettingsTransactionWithoutMemos","account","settings","regularKey","removeRegularKey","TransactionType","assign","RegularKey","signers","setSignerList","SignerEntries","SignerQuorum","threshold","weights","map","settingsWithoutMemos","memos","TransferRate","createSettingsTransaction","Memos","convertMemo","prepareSettings","instructions","prepareTransaction","e","Promise","reject","exports"],"sourceRoot":"","sources":["../../../src/transaction/settings.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}