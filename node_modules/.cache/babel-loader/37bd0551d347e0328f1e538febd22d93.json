{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spreadArray } from \"tslib\";\nimport { fromHex, toHex } from \"../util/hex\";\nimport { throwIfCancelled } from \"../util/promises\";\n/**\n * The maximum number of blocks to backfill. If more than this many blocks have\n * been missed, then we'll sadly miss data, but we want to make sure we don't\n * end up requesting thousands of blocks if somebody left their laptop closed\n * for a week.\n */\n\nvar MAX_BACKFILL_BLOCKS = 120;\nexport function makeBackfiller(jsonRpcSenders) {\n  return {\n    getNewHeadsBackfill: getNewHeadsBackfill,\n    getLogsBackfill: getLogsBackfill\n  };\n\n  function getNewHeadsBackfill(isCancelled, previousHeads, fromBlockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var toBlockNumber, lastSeenBlockNumber, minBlockNumber, reorgHeads, intermediateHeads;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            throwIfCancelled(isCancelled);\n            return [4\n            /*yield*/\n            , getBlockNumber()];\n\n          case 1:\n            toBlockNumber = _a.sent();\n            throwIfCancelled(isCancelled);\n\n            if (previousHeads.length === 0) {\n              return [2\n              /*return*/\n              , getHeadEventsInRange(Math.max(fromBlockNumber, toBlockNumber - MAX_BACKFILL_BLOCKS) + 1, toBlockNumber + 1)];\n            }\n\n            lastSeenBlockNumber = fromHex(previousHeads[previousHeads.length - 1].number);\n            minBlockNumber = Math.max(0, lastSeenBlockNumber - MAX_BACKFILL_BLOCKS);\n\n            if (lastSeenBlockNumber < minBlockNumber) {\n              return [2\n              /*return*/\n              , getHeadEventsInRange(minBlockNumber, toBlockNumber + 1)];\n            }\n\n            return [4\n            /*yield*/\n            , getReorgHeads(isCancelled, previousHeads)];\n\n          case 2:\n            reorgHeads = _a.sent();\n            throwIfCancelled(isCancelled);\n            return [4\n            /*yield*/\n            , getHeadEventsInRange(lastSeenBlockNumber + 1, toBlockNumber + 1)];\n\n          case 3:\n            intermediateHeads = _a.sent();\n            throwIfCancelled(isCancelled);\n            return [2\n            /*return*/\n            , __spreadArray(__spreadArray([], __read(reorgHeads)), __read(intermediateHeads))];\n        }\n      });\n    });\n  }\n\n  function getReorgHeads(isCancelled, previousHeads) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, i, oldEvent, blockHead;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            result = [];\n            i = previousHeads.length - 1;\n            _a.label = 1;\n\n          case 1:\n            if (!(i >= 0)) return [3\n            /*break*/\n            , 4];\n            oldEvent = previousHeads[i];\n            return [4\n            /*yield*/\n            , getBlockByNumber(fromHex(oldEvent.number))];\n\n          case 2:\n            blockHead = _a.sent();\n            throwIfCancelled(isCancelled);\n\n            if (oldEvent.hash === blockHead.hash) {\n              return [3\n              /*break*/\n              , 4];\n            }\n\n            result.push(toNewHeadsEvent(blockHead));\n            _a.label = 3;\n\n          case 3:\n            i--;\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [2\n            /*return*/\n            , result.reverse()];\n        }\n      });\n    });\n  }\n\n  function getHeadEventsInRange(fromBlockInclusive, toBlockExclusive) {\n    return __awaiter(this, void 0, void 0, function () {\n      var batchParts, i, heads;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (fromBlockInclusive >= toBlockExclusive) {\n              return [2\n              /*return*/\n              , []];\n            }\n\n            batchParts = [];\n\n            for (i = fromBlockInclusive; i < toBlockExclusive; i++) {\n              batchParts.push({\n                method: \"eth_getBlockByNumber\",\n                params: [toHex(i), false]\n              });\n            }\n\n            return [4\n            /*yield*/\n            , jsonRpcSenders.sendBatch(batchParts)];\n\n          case 1:\n            heads = _a.sent();\n            return [2\n            /*return*/\n            , heads.map(toNewHeadsEvent)];\n        }\n      });\n    });\n  }\n\n  function getBlockByNumber(blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , jsonRpcSenders.send(\"eth_getBlockByNumber\", [toHex(blockNumber), false])];\n      });\n    });\n  }\n\n  function getLogsBackfill(isCancelled, filter, previousLogs, fromBlockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var toBlockNumber, lastSeenBlockNumber, minBlockNumber, commonAncestorNumber, removedLogs, addedLogs;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            throwIfCancelled(isCancelled);\n            return [4\n            /*yield*/\n            , getBlockNumber()];\n\n          case 1:\n            toBlockNumber = _a.sent();\n            throwIfCancelled(isCancelled);\n\n            if (previousLogs.length === 0) {\n              return [2\n              /*return*/\n              , getLogsInRange(filter, Math.max(fromBlockNumber, toBlockNumber - MAX_BACKFILL_BLOCKS) + 1, toBlockNumber + 1)];\n            }\n\n            lastSeenBlockNumber = fromHex(previousLogs[previousLogs.length - 1].blockNumber);\n            minBlockNumber = Math.max(0, lastSeenBlockNumber - MAX_BACKFILL_BLOCKS);\n\n            if (lastSeenBlockNumber < minBlockNumber) {\n              return [2\n              /*return*/\n              , getLogsInRange(filter, minBlockNumber, toBlockNumber + 1)];\n            }\n\n            return [4\n            /*yield*/\n            , getCommonAncestorNumber(isCancelled, previousLogs)];\n\n          case 2:\n            commonAncestorNumber = _a.sent();\n            throwIfCancelled(isCancelled);\n            removedLogs = previousLogs.filter(function (log) {\n              return fromHex(log.blockNumber) > commonAncestorNumber;\n            }).map(function (log) {\n              return __assign(__assign({}, log), {\n                removed: true\n              });\n            });\n            return [4\n            /*yield*/\n            , getLogsInRange(filter, commonAncestorNumber + 1, toBlockNumber + 1)];\n\n          case 3:\n            addedLogs = _a.sent();\n            throwIfCancelled(isCancelled);\n            return [2\n            /*return*/\n            , __spreadArray(__spreadArray([], __read(removedLogs)), __read(addedLogs))];\n        }\n      });\n    });\n  }\n\n  function getCommonAncestorNumber(isCancelled, previousLogs) {\n    return __awaiter(this, void 0, void 0, function () {\n      var i, _a, blockHash, blockNumber, hash;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            i = previousLogs.length - 1;\n            _b.label = 1;\n\n          case 1:\n            if (!(i >= 0)) return [3\n            /*break*/\n            , 4];\n            _a = previousLogs[i], blockHash = _a.blockHash, blockNumber = _a.blockNumber;\n            return [4\n            /*yield*/\n            , getBlockByNumber(fromHex(blockNumber))];\n\n          case 2:\n            hash = _b.sent().hash;\n            throwIfCancelled(isCancelled);\n\n            if (blockHash === hash) {\n              return [2\n              /*return*/\n              , fromHex(blockNumber)];\n            }\n\n            _b.label = 3;\n\n          case 3:\n            i--;\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [2\n            /*return*/\n            , Number.NEGATIVE_INFINITY];\n        }\n      });\n    });\n  }\n\n  function getLogsInRange(filter, fromBlockInclusive, toBlockExclusive) {\n    return __awaiter(this, void 0, void 0, function () {\n      var rangeFilter;\n      return __generator(this, function (_a) {\n        if (fromBlockInclusive >= toBlockExclusive) {\n          return [2\n          /*return*/\n          , []];\n        }\n\n        rangeFilter = __assign(__assign({}, filter), {\n          fromBlock: toHex(fromBlockInclusive),\n          toBlock: toHex(toBlockExclusive - 1)\n        });\n        return [2\n        /*return*/\n        , jsonRpcSenders.send(\"eth_getLogs\", [rangeFilter])];\n      });\n    });\n  }\n\n  function getBlockNumber() {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockNumberHex;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , jsonRpcSenders.send(\"eth_blockNumber\")];\n\n          case 1:\n            blockNumberHex = _a.sent();\n            return [2\n            /*return*/\n            , fromHex(blockNumberHex)];\n        }\n      });\n    });\n  }\n}\n\nfunction toNewHeadsEvent(head) {\n  var result = __assign({}, head);\n\n  delete result.totalDifficulty;\n  delete result.transactions;\n  delete result.uncles;\n  return result;\n}\n\nexport function dedupeNewHeads(events) {\n  return dedupe(events, function (event) {\n    return event.hash;\n  });\n}\nexport function dedupeLogs(events) {\n  return dedupe(events, function (event) {\n    return event.blockHash + \"/\" + event.logIndex;\n  });\n}\n\nfunction dedupe(items, getKey) {\n  var keysSeen = new Set();\n  var result = [];\n  items.forEach(function (item) {\n    var key = getKey(item);\n\n    if (!keysSeen.has(key)) {\n      keysSeen.add(key);\n      result.push(item);\n    }\n  });\n  return result;\n}","map":{"version":3,"mappings":"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","names":["fromHex","toHex","throwIfCancelled","MAX_BACKFILL_BLOCKS","makeBackfiller","jsonRpcSenders","getNewHeadsBackfill","getLogsBackfill","isCancelled","previousHeads","fromBlockNumber","getBlockNumber","toBlockNumber","_a","length","getHeadEventsInRange","Math","max","lastSeenBlockNumber","number","minBlockNumber","getReorgHeads","reorgHeads","intermediateHeads","__read","result","i","oldEvent","getBlockByNumber","blockHead","hash","push","toNewHeadsEvent","reverse","fromBlockInclusive","toBlockExclusive","batchParts","method","params","sendBatch","heads","map","blockNumber","send","filter","previousLogs","getLogsInRange","getCommonAncestorNumber","commonAncestorNumber","removedLogs","log","removed","addedLogs","blockHash","_b","Number","NEGATIVE_INFINITY","rangeFilter","fromBlock","toBlock","blockNumberHex","head","totalDifficulty","transactions","uncles","dedupeNewHeads","events","dedupe","event","dedupeLogs","logIndex","items","getKey","keysSeen","Set","forEach","item","key","has","add"],"sourceRoot":"","sources":["../../../src/subscriptions/subscriptionBackfill.ts"],"sourcesContent":["import { fromHex, toHex } from \"../util/hex\";\nimport { BatchPart, JsonRpcSenders } from \"../util/jsonRpc\";\nimport { throwIfCancelled } from \"../util/promises\";\n\nexport interface NewHeadsEvent {\n  author: string;\n  difficulty: string;\n  extraData: string;\n  gasLimit: string;\n  gasUsed: string;\n  hash: string;\n  logsBloom: string;\n  miner: string;\n  mixHash: string;\n  nonce: string;\n  number: string;\n  parentHash: string;\n  receiptsRoot: string;\n  sealFields: string[];\n  sha3Uncles: string;\n  size: string;\n  stateRoot: string;\n  timestamp: string;\n  transactionsRoot: string;\n}\n\n/**\n * The return type of eth_getBlocksByHash.\n */\nexport interface BlockHead extends NewHeadsEvent {\n  totalDifficulty: string;\n  transactions: any[];\n  uncles: string[];\n}\n\nexport interface LogsEvent {\n  address: string;\n  blockHash: string;\n  blockNumber: string;\n  data: string;\n  logIndex: string;\n  topics: string[];\n  transactionHash: string;\n  transactionIndex: string;\n  removed?: boolean;\n}\n\nexport interface LogsSubscriptionFilter {\n  address?: string | string[];\n  topics?: Array<string | string[] | null>;\n}\n\ninterface GetLogsOptions extends LogsSubscriptionFilter {\n  fromBlock?: string;\n  toBlock?: string;\n}\n\nexport type Backfiller = ReturnType<typeof makeBackfiller>;\n\n/**\n * The maximum number of blocks to backfill. If more than this many blocks have\n * been missed, then we'll sadly miss data, but we want to make sure we don't\n * end up requesting thousands of blocks if somebody left their laptop closed\n * for a week.\n */\nconst MAX_BACKFILL_BLOCKS = 120;\n\nexport function makeBackfiller(jsonRpcSenders: JsonRpcSenders) {\n  return { getNewHeadsBackfill, getLogsBackfill };\n\n  async function getNewHeadsBackfill(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[],\n    fromBlockNumber: number,\n  ): Promise<NewHeadsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await getBlockNumber();\n    throwIfCancelled(isCancelled);\n    if (previousHeads.length === 0) {\n      return getHeadEventsInRange(\n        Math.max(fromBlockNumber, toBlockNumber - MAX_BACKFILL_BLOCKS) + 1,\n        toBlockNumber + 1,\n      );\n    }\n    const lastSeenBlockNumber = fromHex(\n      previousHeads[previousHeads.length - 1].number,\n    );\n    const minBlockNumber = Math.max(\n      0,\n      lastSeenBlockNumber - MAX_BACKFILL_BLOCKS,\n    );\n    if (lastSeenBlockNumber < minBlockNumber) {\n      return getHeadEventsInRange(minBlockNumber, toBlockNumber + 1);\n    }\n    const reorgHeads: NewHeadsEvent[] = await getReorgHeads(\n      isCancelled,\n      previousHeads,\n    );\n    throwIfCancelled(isCancelled);\n    const intermediateHeads: NewHeadsEvent[] = await getHeadEventsInRange(\n      lastSeenBlockNumber + 1,\n      toBlockNumber + 1,\n    );\n    throwIfCancelled(isCancelled);\n    return [...reorgHeads, ...intermediateHeads];\n  }\n\n  async function getReorgHeads(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[],\n  ): Promise<NewHeadsEvent[]> {\n    const result: NewHeadsEvent[] = [];\n    for (let i = previousHeads.length - 1; i >= 0; i--) {\n      const oldEvent = previousHeads[i];\n      const blockHead = await getBlockByNumber(fromHex(oldEvent.number));\n      throwIfCancelled(isCancelled);\n      if (oldEvent.hash === blockHead.hash) {\n        break;\n      }\n      result.push(toNewHeadsEvent(blockHead));\n    }\n    return result.reverse();\n  }\n\n  async function getHeadEventsInRange(\n    fromBlockInclusive: number,\n    toBlockExclusive: number,\n  ): Promise<NewHeadsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const batchParts: BatchPart[] = [];\n    for (let i = fromBlockInclusive; i < toBlockExclusive; i++) {\n      batchParts.push({\n        method: \"eth_getBlockByNumber\",\n        params: [toHex(i), false],\n      });\n    }\n    const heads = await jsonRpcSenders.sendBatch(batchParts);\n    return heads.map(toNewHeadsEvent);\n  }\n\n  async function getBlockByNumber(blockNumber: number): Promise<BlockHead> {\n    return jsonRpcSenders.send(\"eth_getBlockByNumber\", [\n      toHex(blockNumber),\n      false,\n    ]);\n  }\n\n  async function getLogsBackfill(\n    isCancelled: () => boolean,\n    filter: LogsSubscriptionFilter,\n    previousLogs: LogsEvent[],\n    fromBlockNumber: number,\n  ): Promise<LogsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await getBlockNumber();\n    throwIfCancelled(isCancelled);\n    if (previousLogs.length === 0) {\n      return getLogsInRange(\n        filter,\n        Math.max(fromBlockNumber, toBlockNumber - MAX_BACKFILL_BLOCKS) + 1,\n        toBlockNumber + 1,\n      );\n    }\n    const lastSeenBlockNumber = fromHex(\n      previousLogs[previousLogs.length - 1].blockNumber,\n    );\n    const minBlockNumber = Math.max(\n      0,\n      lastSeenBlockNumber - MAX_BACKFILL_BLOCKS,\n    );\n    if (lastSeenBlockNumber < minBlockNumber) {\n      return getLogsInRange(filter, minBlockNumber, toBlockNumber + 1);\n    }\n    const commonAncestorNumber = await getCommonAncestorNumber(\n      isCancelled,\n      previousLogs,\n    );\n    throwIfCancelled(isCancelled);\n    const removedLogs = previousLogs\n      .filter((log) => fromHex(log.blockNumber) > commonAncestorNumber)\n      .map((log) => ({ ...log, removed: true }));\n    const addedLogs = await getLogsInRange(\n      filter,\n      commonAncestorNumber + 1,\n      toBlockNumber + 1,\n    );\n    throwIfCancelled(isCancelled);\n    return [...removedLogs, ...addedLogs];\n  }\n\n  async function getCommonAncestorNumber(\n    isCancelled: () => boolean,\n    previousLogs: LogsEvent[],\n  ): Promise<number> {\n    for (let i = previousLogs.length - 1; i >= 0; i--) {\n      const { blockHash, blockNumber } = previousLogs[i];\n      const { hash } = await getBlockByNumber(fromHex(blockNumber));\n      throwIfCancelled(isCancelled);\n      if (blockHash === hash) {\n        return fromHex(blockNumber);\n      }\n    }\n    return Number.NEGATIVE_INFINITY;\n  }\n\n  async function getLogsInRange(\n    filter: LogsSubscriptionFilter,\n    fromBlockInclusive: number,\n    toBlockExclusive: number,\n  ): Promise<LogsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const rangeFilter: GetLogsOptions = {\n      ...filter,\n      fromBlock: toHex(fromBlockInclusive),\n      toBlock: toHex(toBlockExclusive - 1),\n    };\n    return jsonRpcSenders.send(\"eth_getLogs\", [rangeFilter]);\n  }\n\n  async function getBlockNumber(): Promise<number> {\n    const blockNumberHex: string = await jsonRpcSenders.send(\"eth_blockNumber\");\n    return fromHex(blockNumberHex);\n  }\n}\n\nfunction toNewHeadsEvent(head: BlockHead): NewHeadsEvent {\n  const result: NewHeadsEvent & Partial<BlockHead> = { ...head };\n  delete result.totalDifficulty;\n  delete result.transactions;\n  delete result.uncles;\n  return result;\n}\n\nexport function dedupeNewHeads(events: NewHeadsEvent[]): NewHeadsEvent[] {\n  return dedupe(events, (event) => event.hash);\n}\n\nexport function dedupeLogs(events: LogsEvent[]): LogsEvent[] {\n  return dedupe(events, (event) => `${event.blockHash}/${event.logIndex}`);\n}\n\nfunction dedupe<T>(items: T[], getKey: (item: T) => any): T[] {\n  const keysSeen: Set<any> = new Set();\n  const result: T[] = [];\n  items.forEach((item) => {\n    const key = getKey(item);\n    if (!keysSeen.has(key)) {\n      keysSeen.add(key);\n      result.push(item);\n    }\n  });\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}