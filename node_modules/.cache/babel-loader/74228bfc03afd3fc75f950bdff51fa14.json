{"ast":null,"code":"const bip39 = require('bip39');\n\nfunction validateBuffer(input, expectedLength) {\n  if (!Buffer.isBuffer(input)) {\n    throw new Error('not buffer!');\n  }\n\n  if (expectedLength && input.length !== expectedLength) {\n    throw new Error('Invalid buffer length');\n  }\n}\n\nfunction validateArray(input) {\n  if (typeof input !== typeof []) {\n    throw new Error('not an array!');\n  }\n}\n\nfunction validateDerivationIndex(input) {\n  if (!Number.isInteger(input)) {\n    throw new Error('invalid derivation index!');\n  }\n}\n\nfunction validateString(input) {\n  if (typeof input !== typeof 'aa') {\n    throw new Error('not a string!');\n  }\n}\n\nfunction validateDerivationScheme(input) {\n  if (input !== 1 && input !== 2) {\n    throw new Error('invalid derivation scheme!');\n  }\n}\n\nfunction validateMnemonic(input) {\n  if (!bip39.validateMnemonic(input)) {\n    const e = new Error('Invalid or unsupported mnemonic format:');\n    e.name = 'InvalidArgumentException';\n    throw e;\n  }\n}\n\nfunction validateMnemonicWords(input) {\n  const wordlist = bip39.wordlists.EN;\n  const words = input.split(' ');\n  const valid = words.reduce((result, word) => {\n    return result && wordlist.indexOf(word) !== -1;\n  }, true);\n\n  if (!valid) {\n    throw new Error('Invalid mnemonic words');\n  }\n}\n\nfunction validatePaperWalletMnemonic(input) {\n  validateMnemonicWords(input);\n  const mnemonicLength = input.split(' ').length;\n\n  if (mnemonicLength !== 27) {\n    throw Error(`Paper Wallet Mnemonic must be 27 words, got ${mnemonicLength} instead`);\n  }\n}\n\nfunction validateNetworkId(input) {\n  if (!Number.isInteger(input) || input < 0 || input > 15) {\n    throw Error('Network id must be an integer between 0 and 15');\n  }\n}\n\nfunction validateUint32(input) {\n  if (!Number.isInteger(input) || input < 0 || input >= Math.pow(2, 32)) {\n    throw Error('Value must be uint32');\n  }\n}\n\nmodule.exports = {\n  validateBuffer,\n  validateArray,\n  validateString,\n  validateDerivationIndex,\n  validateDerivationScheme,\n  validateMnemonic,\n  validateMnemonicWords,\n  validatePaperWalletMnemonic,\n  validateNetworkId,\n  validateUint32\n};","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/NFT_minter/node_modules/cardano-crypto.js/utils/validation.js"],"names":["bip39","require","validateBuffer","input","expectedLength","Buffer","isBuffer","Error","length","validateArray","validateDerivationIndex","Number","isInteger","validateString","validateDerivationScheme","validateMnemonic","e","name","validateMnemonicWords","wordlist","wordlists","EN","words","split","valid","reduce","result","word","indexOf","validatePaperWalletMnemonic","mnemonicLength","validateNetworkId","validateUint32","Math","pow","module","exports"],"mappings":"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","sourcesContent":["const bip39 = require('bip39')\n\nfunction validateBuffer(input, expectedLength) {\n  if (!Buffer.isBuffer(input)) {\n    throw new Error('not buffer!')\n  }\n\n  if (expectedLength && input.length !== expectedLength) {\n    throw new Error('Invalid buffer length')\n  }\n}\n\nfunction validateArray(input) {\n  if (typeof input !== typeof []) {\n    throw new Error('not an array!')\n  }\n}\n\nfunction validateDerivationIndex(input) {\n  if (!Number.isInteger(input)) {\n    throw new Error('invalid derivation index!')\n  }\n}\n\nfunction validateString(input) {\n  if (typeof input !== typeof 'aa') {\n    throw new Error('not a string!')\n  }\n}\n\nfunction validateDerivationScheme(input) {\n  if (input !== 1 && input !== 2) {\n    throw new Error('invalid derivation scheme!')\n  }\n}\n\nfunction validateMnemonic(input) {\n  if (!bip39.validateMnemonic(input)) {\n    const e = new Error('Invalid or unsupported mnemonic format:')\n    e.name = 'InvalidArgumentException'\n    throw e\n  }\n}\n\nfunction validateMnemonicWords(input) {\n  const wordlist = bip39.wordlists.EN\n  const words = input.split(' ')\n\n  const valid = words.reduce((result, word) => {\n    return result && wordlist.indexOf(word) !== -1\n  }, true)\n\n  if (!valid) {\n    throw new Error('Invalid mnemonic words')\n  }\n}\n\nfunction validatePaperWalletMnemonic(input) {\n  validateMnemonicWords(input)\n\n  const mnemonicLength = input.split(' ').length\n\n  if (mnemonicLength !== 27) {\n    throw Error(\n      `Paper Wallet Mnemonic must be 27 words, got ${mnemonicLength} instead`\n    )\n  }\n}\n\nfunction validateNetworkId(input) {\n  if (!Number.isInteger(input) || input < 0 || input > 15) {\n    throw Error(\n      'Network id must be an integer between 0 and 15'\n    )\n  }\n}\n\nfunction validateUint32(input) {\n  if (!Number.isInteger(input) || input < 0 || input >= Math.pow(2, 32)) {\n    throw Error(\n      'Value must be uint32'\n    )\n  }\n}\n\nmodule.exports = {\n  validateBuffer,\n  validateArray,\n  validateString,\n  validateDerivationIndex,\n  validateDerivationScheme,\n  validateMnemonic,\n  validateMnemonicWords,\n  validatePaperWalletMnemonic,\n  validateNetworkId,\n  validateUint32\n}\n"]},"metadata":{},"sourceType":"script"}