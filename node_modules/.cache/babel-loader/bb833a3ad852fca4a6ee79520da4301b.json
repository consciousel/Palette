{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Interaction = void 0;\n\nconst balance_1 = require(\"../balance\");\n\nconst networkParams_1 = require(\"../networkParams\");\n\nconst query_1 = require(\"./query\");\n\nconst address_1 = require(\"../address\");\n\nconst nonce_1 = require(\"../nonce\");\n/**\n * Interactions can be seen as mutable transaction & query builders.\n *\n * Aside from building transactions and queries, the interactors are also responsible for interpreting\n * the execution outcome for the objects they've built.\n */\n\n\nclass Interaction {\n  constructor(contract, executingFunction, interpretingFunction, args, receiver) {\n    this.nonce = new nonce_1.Nonce(0);\n    this.value = balance_1.Balance.Zero();\n    this.gasLimit = networkParams_1.GasLimit.min();\n    this.contract = contract;\n    this.executingFunction = executingFunction;\n    this.interpretingFunction = interpretingFunction;\n    this.args = args;\n    this.receiver = receiver;\n  }\n\n  getContract() {\n    return this.contract;\n  }\n\n  getInterpretingFunction() {\n    return this.interpretingFunction;\n  }\n\n  getExecutingFunction() {\n    return this.executingFunction;\n  }\n\n  getArguments() {\n    return this.args;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  getGasLimit() {\n    return this.gasLimit;\n  }\n\n  buildTransaction() {\n    // TODO: create as \"deploy\" transaction if the function is \"init\" (or find a better pattern for deployments).\n    let transaction = this.contract.call({\n      func: this.executingFunction,\n      // GasLimit will be set using \"withGasLimit()\".\n      gasLimit: this.gasLimit,\n      args: this.args,\n      // Value will be set using \"withValue()\".\n      value: this.value,\n      receiver: this.receiver\n    });\n    transaction.setNonce(this.nonce);\n    return transaction;\n  }\n\n  buildQuery() {\n    return new query_1.Query({\n      address: this.contract.getAddress(),\n      func: this.executingFunction,\n      args: this.args,\n      // Value will be set using \"withValue()\".\n      value: this.value,\n      // Caller will be set by the InteractionRunner.\n      caller: new address_1.Address()\n    });\n  }\n  /**\n   * Interprets the results of a previously broadcasted (and fully executed) smart contract transaction.\n   * The outcome is structured such that it allows quick access to each level of detail.\n   */\n\n\n  interpretExecutionResults(transactionOnNetwork) {\n    return interpretExecutionResults(this.getEndpoint(), transactionOnNetwork);\n  }\n  /**\n   * Interprets the raw outcome of a Smart Contract query.\n   * The outcome is structured such that it allows quick access to each level of detail.\n   */\n\n\n  interpretQueryResponse(queryResponse) {\n    let endpoint = this.getEndpoint();\n    queryResponse.setEndpointDefinition(endpoint);\n    let values = queryResponse.outputTyped();\n    let returnCode = queryResponse.returnCode;\n    return {\n      queryResponse: queryResponse,\n      values: values,\n      firstValue: values[0],\n      returnCode: returnCode\n    };\n  }\n\n  withValue(value) {\n    this.value = value;\n    return this;\n  }\n\n  withGasLimit(gasLimit) {\n    this.gasLimit = gasLimit;\n    return this;\n  }\n\n  withNonce(nonce) {\n    this.nonce = nonce;\n    return this;\n  }\n\n  getEndpoint() {\n    return this.getContract().getAbi().getEndpoint(this.getInterpretingFunction());\n  }\n\n}\n\nexports.Interaction = Interaction;\n\nfunction interpretExecutionResults(endpoint, transactionOnNetwork) {\n  let smartContractResults = transactionOnNetwork.getSmartContractResults();\n  let immediateResult = smartContractResults.getImmediate();\n  let resultingCalls = smartContractResults.getResultingCalls();\n  immediateResult.setEndpointDefinition(endpoint);\n  let values = immediateResult.outputTyped();\n  let returnCode = immediateResult.getReturnCode();\n  return {\n    transactionOnNetwork: transactionOnNetwork,\n    smartContractResults: smartContractResults,\n    immediateResult,\n    resultingCalls,\n    values,\n    firstValue: values[0],\n    returnCode: returnCode\n  };\n}","map":{"version":3,"mappings":"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","names":["Interaction","constructor","contract","executingFunction","interpretingFunction","args","receiver","nonce_1","balance_1","Zero","networkParams_1","min","getContract","getInterpretingFunction","getExecutingFunction","getArguments","getValue","value","getGasLimit","gasLimit","buildTransaction","transaction","call","func","setNonce","nonce","buildQuery","query_1","address","getAddress","caller","address_1","interpretExecutionResults","transactionOnNetwork","getEndpoint","interpretQueryResponse","queryResponse","endpoint","setEndpointDefinition","values","outputTyped","returnCode","firstValue","withValue","withGasLimit","withNonce","getAbi","exports","smartContractResults","getSmartContractResults","immediateResult","getImmediate","resultingCalls","getResultingCalls","getReturnCode"],"sourceRoot":"","sources":["../../src/smartcontracts/interaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}