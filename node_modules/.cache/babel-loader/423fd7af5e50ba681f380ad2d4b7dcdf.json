{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FederationServer = exports.FEDERATION_RESPONSE_MAX_SIZE = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar axios_1 = tslib_1.__importDefault(require(\"axios\"));\n\nvar stellar_base_1 = require(\"stellar-base\");\n\nvar urijs_1 = tslib_1.__importDefault(require(\"urijs\"));\n\nvar config_1 = require(\"./config\");\n\nvar errors_1 = require(\"./errors\");\n\nvar stellar_toml_resolver_1 = require(\"./stellar_toml_resolver\");\n\nexports.FEDERATION_RESPONSE_MAX_SIZE = 100 * 1024;\n\nvar FederationServer = function () {\n  function FederationServer(serverURL, domain, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    this.serverURL = urijs_1.default(serverURL);\n    this.domain = domain;\n    var allowHttp = typeof opts.allowHttp === \"undefined\" ? config_1.Config.isAllowHttp() : opts.allowHttp;\n    this.timeout = typeof opts.timeout === \"undefined\" ? config_1.Config.getTimeout() : opts.timeout;\n\n    if (this.serverURL.protocol() !== \"https\" && !allowHttp) {\n      throw new Error(\"Cannot connect to insecure federation server\");\n    }\n  }\n\n  FederationServer.resolve = function (value, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var addressParts, domain, federationServer;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (value.indexOf(\"*\") < 0) {\n              if (!stellar_base_1.StrKey.isValidEd25519PublicKey(value)) {\n                return [2, Promise.reject(new Error(\"Invalid Account ID\"))];\n              }\n\n              return [2, Promise.resolve({\n                account_id: value\n              })];\n            }\n\n            addressParts = value.split(\"*\");\n            domain = addressParts[1];\n\n            if (addressParts.length !== 2 || !domain) {\n              return [2, Promise.reject(new Error(\"Invalid Stellar address\"))];\n            }\n\n            return [4, FederationServer.createForDomain(domain, opts)];\n\n          case 1:\n            federationServer = _a.sent();\n            return [2, federationServer.resolveAddress(value)];\n        }\n      });\n    });\n  };\n\n  FederationServer.createForDomain = function (domain, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var tomlObject;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4, stellar_toml_resolver_1.StellarTomlResolver.resolve(domain, opts)];\n\n          case 1:\n            tomlObject = _a.sent();\n\n            if (!tomlObject.FEDERATION_SERVER) {\n              return [2, Promise.reject(new Error(\"stellar.toml does not contain FEDERATION_SERVER field\"))];\n            }\n\n            return [2, new FederationServer(tomlObject.FEDERATION_SERVER, domain, opts)];\n        }\n      });\n    });\n  };\n\n  FederationServer.prototype.resolveAddress = function (address) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var stellarAddress, url;\n      return tslib_1.__generator(this, function (_a) {\n        stellarAddress = address;\n\n        if (address.indexOf(\"*\") < 0) {\n          if (!this.domain) {\n            return [2, Promise.reject(new Error(\"Unknown domain. Make sure `address` contains a domain (ex. `bob*stellar.org`) or pass `domain` parameter when instantiating the server object.\"))];\n          }\n\n          stellarAddress = address + \"*\" + this.domain;\n        }\n\n        url = this.serverURL.query({\n          type: \"name\",\n          q: stellarAddress\n        });\n        return [2, this._sendRequest(url)];\n      });\n    });\n  };\n\n  FederationServer.prototype.resolveAccountId = function (accountId) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var url;\n      return tslib_1.__generator(this, function (_a) {\n        url = this.serverURL.query({\n          type: \"id\",\n          q: accountId\n        });\n        return [2, this._sendRequest(url)];\n      });\n    });\n  };\n\n  FederationServer.prototype.resolveTransactionId = function (transactionId) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var url;\n      return tslib_1.__generator(this, function (_a) {\n        url = this.serverURL.query({\n          type: \"txid\",\n          q: transactionId\n        });\n        return [2, this._sendRequest(url)];\n      });\n    });\n  };\n\n  FederationServer.prototype._sendRequest = function (url) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var timeout;\n      return tslib_1.__generator(this, function (_a) {\n        timeout = this.timeout;\n        return [2, axios_1.default.get(url.toString(), {\n          maxContentLength: exports.FEDERATION_RESPONSE_MAX_SIZE,\n          timeout: timeout\n        }).then(function (response) {\n          if (typeof response.data.memo !== \"undefined\" && typeof response.data.memo !== \"string\") {\n            throw new Error(\"memo value should be of type string\");\n          }\n\n          return response.data;\n        }).catch(function (response) {\n          if (response instanceof Error) {\n            if (response.message.match(/^maxContentLength size/)) {\n              throw new Error(\"federation response exceeds allowed size of \" + exports.FEDERATION_RESPONSE_MAX_SIZE);\n            } else {\n              return Promise.reject(response);\n            }\n          } else {\n            return Promise.reject(new errors_1.BadResponseError(\"Server query failed. Server responded: \" + response.status + \" \" + response.statusText, response.data));\n          }\n        })];\n      });\n    });\n  };\n\n  return FederationServer;\n}();\n\nexports.FederationServer = FederationServer;","map":{"version":3,"mappings":"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","names":["exports","serverURL","domain","opts","urijs_1","allowHttp","config_1","isAllowHttp","timeout","getTimeout","protocol","Error","FederationServer","value","indexOf","stellar_base_1","isValidEd25519PublicKey","Promise","reject","resolve","account_id","addressParts","split","length","createForDomain","federationServer","_a","resolveAddress","stellar_toml_resolver_1","tomlObject","FEDERATION_SERVER","address","stellarAddress","url","query","type","q","_sendRequest","accountId","transactionId","axios_1","get","toString","maxContentLength","then","response","data","memo","catch","message","match","errors_1","status","statusText"],"sourceRoot":"","sources":["../src/federation_server.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}