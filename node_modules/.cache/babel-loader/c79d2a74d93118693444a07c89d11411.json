{"ast":null,"code":"var axios = require(\"axios\").default;\n\nconst data = {};\nexport const NFTPortPinJSONToIPFS = (name, description, artist, url, collection, attributes) => {\n  /*\r\n  * Create container for attributes and append with additional attributes data from input\r\n  */\n  let _altFields = [{\n    \"trait_type\": \"Artist\",\n    \"value\": artist\n  }, {\n    \"trait_type\": \"Collection\",\n    \"value\": collection\n  }];\n  let appendAttributes = [];\n\n  if (attributes.length !== 0) {\n    appendAttributes = _altFields.concat(attributes);\n  } else {\n    appendAttributes = [{\n      \"trait_type\": \"Artist\",\n      \"value\": artist\n    }];\n  }\n  /*\r\n   * Define 'options' object that will be passed with our axios request\r\n   */\n\n\n  var options = {\n    method: 'POST',\n    url: 'https://api.nftport.xyz/v0/metadata',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: '2d0719e3-a0ba-461f-a382-a5558bd86ac2'\n    },\n    data: {\n      \"name\": name,\n      \"description\": description,\n      \"file_url\": url,\n      \"attributes\": appendAttributes\n    }\n  };\n  /*\r\n   * Make axios request to post metadata\r\n   */\n\n  return axios.request(options).then(function (response) {\n    console.log(response.data);\n    const url = response.data.metadata_uri;\n    console.log(url);\n    return {\n      success: true,\n      nftPortUrl: response.data.metadata_uri\n    };\n  }).catch(function (error) {\n    console.error(error);\n    return {\n      success: false,\n      message: error.message\n    };\n  });\n};\n_c = NFTPortPinJSONToIPFS;\n\nvar _c;\n\n$RefreshReg$(_c, \"NFTPortPinJSONToIPFS\");","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/Palette/src/utils/nftport.js"],"names":["axios","require","default","data","NFTPortPinJSONToIPFS","name","description","artist","url","collection","attributes","_altFields","appendAttributes","length","concat","options","method","headers","Authorization","request","then","response","console","log","metadata_uri","success","nftPortUrl","catch","error","message"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiBC,OAA7B;;AAEA,MAAMC,IAAI,GAAG,EAAb;AAEA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,IAAD,EAAOC,WAAP,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,UAAjC,EAA6CC,UAA7C,KAA4D;AAE9F;AACF;AACA;AAEE,MAAIC,UAAU,GAAG,CACf;AACE,kBAAa,QADf;AAEE,aAAQJ;AAFV,GADe,EAKf;AACE,kBAAa,YADf;AAEE,aAAQE;AAFV,GALe,CAAjB;AAWA,MAAIG,gBAAgB,GAAG,EAAvB;;AAEA,MAAGF,UAAU,CAACG,MAAX,KAAoB,CAAvB,EAAyB;AACvBD,IAAAA,gBAAgB,GAAGD,UAAU,CAACG,MAAX,CAAkBJ,UAAlB,CAAnB;AACD,GAFD,MAEO;AACLE,IAAAA,gBAAgB,GAAG,CACjB;AACA,oBAAa,QADb;AAEA,eAAQL;AAFR,KADiB,CAAnB;AAMD;AAED;AACF;AACA;;;AAEE,MAAIQ,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAE,MADI;AAEZR,IAAAA,GAAG,EAAE,qCAFO;AAGZS,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPC,MAAAA,aAAa,EAAE;AAFR,KAHG;AAOZf,IAAAA,IAAI,EAAE;AACJ,cAAQE,IADJ;AAEJ,qBAAcC,WAFV;AAGJ,kBAAWE,GAHP;AAIJ,oBAAaI;AAJT;AAPM,GAAd;AAeA;AACF;AACA;;AAEE,SAAOZ,KAAK,CACTmB,OADI,CACIJ,OADJ,EACaK,IADb,CACkB,UAAUC,QAAV,EAAoB;AACzCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAAClB,IAArB;AACA,UAAMK,GAAG,GAAGa,QAAQ,CAAClB,IAAT,CAAcqB,YAA1B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYf,GAAZ;AACA,WAAO;AACLiB,MAAAA,OAAO,EAAE,IADJ;AAELC,MAAAA,UAAU,EAAEL,QAAQ,CAAClB,IAAT,CAAcqB;AAFrB,KAAP;AAID,GATI,EASFG,KATE,CASI,UAAUC,KAAV,EAAiB;AAC1BN,IAAAA,OAAO,CAACM,KAAR,CAAcA,KAAd;AACA,WAAO;AACLH,MAAAA,OAAO,EAAE,KADJ;AAELI,MAAAA,OAAO,EAAED,KAAK,CAACC;AAFV,KAAP;AAID,GAfM,CAAP;AAiBD,CAtEM;KAAMzB,oB","sourcesContent":["var axios = require(\"axios\").default;\r\n\r\nconst data = {};\r\n\r\nexport const NFTPortPinJSONToIPFS = (name, description, artist, url, collection, attributes) => {\r\n\r\n  /*\r\n  * Create container for attributes and append with additional attributes data from input\r\n  */ \r\n  \r\n  let _altFields = [\r\n    {\r\n      \"trait_type\":\"Artist\",\r\n      \"value\":artist\r\n    },\r\n    {\r\n      \"trait_type\":\"Collection\",\r\n      \"value\":collection\r\n    },\r\n  ]\r\n\r\n  let appendAttributes = [];\r\n  \r\n  if(attributes.length!==0){\r\n    appendAttributes = _altFields.concat(attributes);\r\n  } else {\r\n    appendAttributes = [\r\n      {\r\n      \"trait_type\":\"Artist\",\r\n      \"value\":artist\r\n      },\r\n    ]\r\n  }\r\n  \r\n  /*\r\n   * Define 'options' object that will be passed with our axios request\r\n   */\r\n\r\n  var options = {\r\n    method: 'POST',\r\n    url: 'https://api.nftport.xyz/v0/metadata',\r\n    headers: {\r\n      'Content-Type': 'application/json', \r\n      Authorization: '2d0719e3-a0ba-461f-a382-a5558bd86ac2'\r\n    },\r\n    data: {\r\n      \"name\": name,\r\n      \"description\":description,\r\n      \"file_url\":url,\r\n      \"attributes\":appendAttributes,\r\n    }\r\n  }\r\n  \r\n  /*\r\n   * Make axios request to post metadata\r\n   */\r\n\r\n  return axios\r\n    .request(options).then(function (response) {\r\n      console.log(response.data);\r\n      const url = response.data.metadata_uri;\r\n      console.log(url);\r\n      return {\r\n        success: true,\r\n        nftPortUrl: response.data.metadata_uri,\r\n      };\r\n    }).catch(function (error) {\r\n    console.error(error);\r\n    return {\r\n      success: false,\r\n      message: error.message,\r\n    }\r\n  });\r\n\r\n};\r\n"]},"metadata":{},"sourceType":"module"}