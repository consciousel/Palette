{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst common_1 = require(\"../common\");\n\nfunction formatAccountInfo(response) {\n  const data = response.account_data;\n  return common_1.removeUndefined({\n    sequence: data.Sequence,\n    xrpBalance: common_1.dropsToXrp(data.Balance),\n    ownerCount: data.OwnerCount,\n    previousInitiatedTransactionID: data.AccountTxnID,\n    previousAffectingTransactionID: data.PreviousTxnID,\n    previousAffectingTransactionLedgerVersion: data.PreviousTxnLgrSeq\n  });\n}\n\nfunction getAccountInfo(address) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return __awaiter(this, void 0, void 0, function* () {\n    common_1.validate.getAccountInfo({\n      address,\n      options\n    });\n    address = common_1.ensureClassicAddress(address);\n    const response = yield this.request('account_info', {\n      account: address,\n      ledger_index: options.ledgerVersion || 'validated'\n    });\n    return formatAccountInfo(response);\n  });\n}\n\nexports.default = getAccountInfo;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAsBA,SAASA,iBAAT,CACEC,QADF,EAC+B;AAE7B,QAAMC,IAAI,GAAGD,QAAQ,CAACE,YAAtB;AACA,SAAOC,yBAAgB;AACrBC,YAAQ,EAAEH,IAAI,CAACI,QADM;AAErBC,cAAU,EAAEH,oBAAWF,IAAI,CAACM,OAAhB,CAFS;AAGrBC,cAAU,EAAEP,IAAI,CAACQ,UAHI;AAIrBC,kCAA8B,EAAET,IAAI,CAACU,YAJhB;AAKrBC,kCAA8B,EAAEX,IAAI,CAACY,aALhB;AAMrBC,6CAAyC,EAAEb,IAAI,CAACc;AAN3B,GAAhB,CAAP;AAQD;;AAED,SAA8BC,cAA9B,CAEEC,OAFF,EAGqC;AAAA,MAAnCC,OAAmC,uEAAF,EAAE;;AAGnCf,sBAASa,cAAT,CAAwB;AAACC,aAAD;AAAUC;AAAV,KAAxB;AAIAD,WAAO,GAAGd,8BAAqBc,OAArB,CAAV;AAGA,UAAMjB,QAAQ,GAAG,MAAM,KAAKmB,OAAL,CAAa,cAAb,EAA6B;AAClDC,aAAO,EAAEH,OADyC;AAElDI,kBAAY,EAAEH,OAAO,CAACI,aAAR,IAAyB;AAFW,KAA7B,CAAvB;AAKA,WAAOvB,iBAAiB,CAACC,QAAD,CAAxB;AACD;AAAA;;AAnBDuB","names":["formatAccountInfo","response","data","account_data","common_1","sequence","Sequence","xrpBalance","Balance","ownerCount","OwnerCount","previousInitiatedTransactionID","AccountTxnID","previousAffectingTransactionID","PreviousTxnID","previousAffectingTransactionLedgerVersion","PreviousTxnLgrSeq","getAccountInfo","address","options","request","account","ledger_index","ledgerVersion","exports"],"sourceRoot":"","sources":["../../../src/ledger/accountinfo.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}