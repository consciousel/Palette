{"ast":null,"code":"/* eslint-disable prefer-template */\nimport Transport from \"@ledgerhq/hw-transport\";\nimport { DisconnectedDevice, TransportOpenUserCancelled } from \"@ledgerhq/errors\";\nimport { getBluetoothServiceUuids, getInfosForServiceUuid } from \"@ledgerhq/devices\";\nimport { sendAPDU } from \"@ledgerhq/devices/lib/ble/sendAPDU\";\nimport { receiveAPDU } from \"@ledgerhq/devices/lib/ble/receiveAPDU\";\nimport { log } from \"@ledgerhq/logs\";\nimport { Observable, defer, merge, from } from \"rxjs\";\nimport { share, ignoreElements, first, map, tap } from \"rxjs/operators\";\nimport { monitorCharacteristic } from \"./monitorCharacteristic\";\n\nconst requiresBluetooth = () => {\n  // $FlowFixMe\n  const {\n    bluetooth\n  } = navigator;\n\n  if (typeof bluetooth === \"undefined\") {\n    throw new Error(\"web bluetooth not supported\");\n  }\n\n  return bluetooth;\n};\n\nconst availability = () => Observable.create(observer => {\n  const bluetooth = requiresBluetooth();\n\n  const onAvailabilityChanged = e => {\n    observer.next(e.value);\n  };\n\n  bluetooth.addEventListener(\"availabilitychanged\", onAvailabilityChanged);\n  let unsubscribed = false;\n  bluetooth.getAvailability().then(available => {\n    if (!unsubscribed) {\n      observer.next(available);\n    }\n  });\n  return () => {\n    unsubscribed = true;\n    bluetooth.removeEventListener(\"availabilitychanged\", onAvailabilityChanged);\n  };\n});\n\nconst transportsCache = {};\n\nconst requestDeviceParam = () => ({\n  filters: getBluetoothServiceUuids().map(uuid => ({\n    services: [uuid]\n  }))\n});\n\nconst retrieveService = async device => {\n  if (!device.gatt) throw new Error(\"bluetooth gatt not found\");\n  const [service] = await device.gatt.getPrimaryServices();\n  if (!service) throw new Error(\"bluetooth service not found\");\n  const infos = getInfosForServiceUuid(service.uuid);\n  if (!infos) throw new Error(\"bluetooth service infos not found\");\n  return [service, infos];\n};\n\nasync function open(deviceOrId, needsReconnect) {\n  let device;\n\n  if (typeof deviceOrId === \"string\") {\n    if (transportsCache[deviceOrId]) {\n      log(\"ble-verbose\", \"Transport in cache, using that.\");\n      return transportsCache[deviceOrId];\n    }\n\n    const bluetooth = requiresBluetooth(); // TODO instead we should \"query\" the device by its ID\n\n    device = await bluetooth.requestDevice(requestDeviceParam());\n  } else {\n    device = deviceOrId;\n  }\n\n  if (!device.gatt.connected) {\n    log(\"ble-verbose\", \"not connected. connecting...\");\n    await device.gatt.connect();\n  }\n\n  const [service, infos] = await retrieveService(device);\n  const {\n    deviceModel,\n    writeUuid,\n    notifyUuid\n  } = infos;\n  const [writeC, notifyC] = await Promise.all([service.getCharacteristic(writeUuid), service.getCharacteristic(notifyUuid)]);\n  const notifyObservable = monitorCharacteristic(notifyC).pipe(tap(value => {\n    log(\"ble-frame\", \"<= \" + value.toString(\"hex\"));\n  }), share());\n  const notif = notifyObservable.subscribe();\n  const transport = new BluetoothTransport(device, writeC, notifyObservable, deviceModel);\n\n  if (!device.gatt.connected) {\n    throw new DisconnectedDevice();\n  } // eslint-disable-next-line require-atomic-updates\n\n\n  transportsCache[transport.id] = transport;\n\n  const onDisconnect = e => {\n    console.log(\"onDisconnect!\", e);\n    delete transportsCache[transport.id];\n    transport.notYetDisconnected = false;\n    notif.unsubscribe();\n    device.removeEventListener(\"gattserverdisconnected\", onDisconnect);\n    log(\"ble-verbose\", `BleTransport(${transport.id}) disconnected`);\n    transport.emit(\"disconnect\", e);\n  };\n\n  device.addEventListener(\"gattserverdisconnected\", onDisconnect);\n  let beforeMTUTime = Date.now();\n\n  try {\n    await transport.inferMTU();\n  } finally {\n    let afterMTUTime = Date.now(); // workaround for #279: we need to open() again if we come the first time here,\n    // to make sure we do a disconnect() after the first pairing time\n    // because of a firmware bug\n\n    if (afterMTUTime - beforeMTUTime < 1000) {\n      needsReconnect = false; // (optim) there is likely no new pairing done because mtu answer was fast.\n    }\n\n    if (needsReconnect) {\n      await device.gatt.disconnect(); // necessary time for the bonding workaround\n\n      await new Promise(s => setTimeout(s, 4000));\n    }\n  }\n\n  if (needsReconnect) {\n    return open(device, false);\n  }\n\n  return transport;\n}\n/**\n * react-native bluetooth BLE implementation\n * @example\n * import BluetoothTransport from \"@ledgerhq/hw-transport-web-ble\";\n */\n\n\nexport default class BluetoothTransport extends Transport {\n  /**\n   * observe event with { available: bool, type: string }\n   * (available is generic, type is specific)\n   * an event is emit once and then each time it changes\n   */\n\n  /**\n   * Scan for Ledger Bluetooth devices.\n   * On this web implementation, it only emits ONE device, the one that was selected in the UI (if any).\n   */\n  static listen(observer) {\n    log(\"ble-verbose\", \"listen...\");\n    let unsubscribed;\n    const bluetooth = requiresBluetooth();\n    bluetooth.requestDevice(requestDeviceParam()).then(async device => {\n      if (!unsubscribed) {\n        observer.next({\n          type: \"add\",\n          descriptor: device\n        });\n        observer.complete();\n      }\n    }, error => {\n      observer.error(new TransportOpenUserCancelled(error.message));\n    });\n\n    function unsubscribe() {\n      unsubscribed = true;\n    }\n\n    return {\n      unsubscribe\n    };\n  }\n  /**\n   * open a bluetooth device.\n   */\n\n\n  static async open(deviceOrId) {\n    return open(deviceOrId, true);\n  }\n  /**\n   * globally disconnect a bluetooth device by its id.\n   */\n\n\n  constructor(device, writeCharacteristic, notifyObservable, deviceModel) {\n    super();\n    this.id = void 0;\n    this.device = void 0;\n    this.mtuSize = 20;\n    this.writeCharacteristic = void 0;\n    this.notifyObservable = void 0;\n    this.notYetDisconnected = true;\n    this.deviceModel = void 0;\n\n    this.exchange = apdu => this.exchangeAtomicImpl(async () => {\n      try {\n        const msgIn = apdu.toString(\"hex\");\n        log(\"apdu\", `=> ${msgIn}`);\n        const data = await merge(this.notifyObservable.pipe(receiveAPDU), sendAPDU(this.write, apdu, this.mtuSize)).toPromise();\n        const msgOut = data.toString(\"hex\");\n        log(\"apdu\", `<= ${msgOut}`);\n        return data;\n      } catch (e) {\n        log(\"ble-error\", \"exchange got \" + String(e));\n\n        if (this.notYetDisconnected) {\n          // in such case we will always disconnect because something is bad.\n          this.device.gatt.disconnect();\n        }\n\n        throw e;\n      }\n    });\n\n    this.write = async buffer => {\n      log(\"ble-frame\", \"=> \" + buffer.toString(\"hex\"));\n      await this.writeCharacteristic.writeValue(buffer);\n    };\n\n    this.id = device.id;\n    this.device = device;\n    this.writeCharacteristic = writeCharacteristic;\n    this.notifyObservable = notifyObservable;\n    this.deviceModel = deviceModel;\n    log(\"ble-verbose\", `BleTransport(${String(this.id)}) new instance`);\n  }\n\n  async inferMTU() {\n    let mtu = 23;\n    await this.exchangeAtomicImpl(async () => {\n      try {\n        mtu = (await merge(this.notifyObservable.pipe(first(buffer => buffer.readUInt8(0) === 0x08), map(buffer => buffer.readUInt8(5))), defer(() => from(this.write(Buffer.from([0x08, 0, 0, 0, 0])))).pipe(ignoreElements())).toPromise()) + 3;\n      } catch (e) {\n        log(\"ble-error\", \"inferMTU got \" + String(e));\n        this.device.gatt.disconnect();\n        throw e;\n      }\n    });\n\n    if (mtu > 23) {\n      const mtuSize = mtu - 3;\n      log(\"ble-verbose\", `BleTransport(${String(this.id)}) mtu set to ${String(mtuSize)}`);\n      this.mtuSize = mtuSize;\n    }\n\n    return this.mtuSize;\n  }\n  /**\n   * Exchange with the device using APDU protocol.\n   * @param apdu\n   * @returns a promise of apdu response\n   */\n\n\n  setScrambleKey() {}\n\n  async close() {\n    if (this.exchangeBusyPromise) {\n      await this.exchangeBusyPromise;\n    }\n  }\n\n}\n\nBluetoothTransport.isSupported = () => Promise.resolve().then(requiresBluetooth).then(() => true, () => false);\n\nBluetoothTransport.observeAvailability = observer => availability.subscribe(observer);\n\nBluetoothTransport.list = () => Promise.resolve([]);\n\nBluetoothTransport.disconnect = async id => {\n  log(\"ble-verbose\", `user disconnect(${id})`);\n  const transport = transportsCache[id];\n\n  if (transport) {\n    transport.device.gatt.disconnect();\n  }\n};","map":{"version":3,"mappings":"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","names":["Transport","DisconnectedDevice","TransportOpenUserCancelled","getBluetoothServiceUuids","getInfosForServiceUuid","sendAPDU","receiveAPDU","log","Observable","defer","merge","from","share","ignoreElements","first","map","tap","monitorCharacteristic","requiresBluetooth","bluetooth","navigator","Error","availability","create","observer","onAvailabilityChanged","e","next","value","addEventListener","unsubscribed","getAvailability","then","available","removeEventListener","transportsCache","requestDeviceParam","filters","uuid","services","retrieveService","device","gatt","service","getPrimaryServices","infos","open","deviceOrId","needsReconnect","requestDevice","connected","connect","deviceModel","writeUuid","notifyUuid","writeC","notifyC","Promise","all","getCharacteristic","notifyObservable","pipe","toString","notif","subscribe","transport","BluetoothTransport","id","onDisconnect","console","notYetDisconnected","unsubscribe","emit","beforeMTUTime","Date","now","inferMTU","afterMTUTime","disconnect","s","setTimeout","listen","type","descriptor","complete","error","message","constructor","writeCharacteristic","mtuSize","exchange","apdu","exchangeAtomicImpl","msgIn","data","write","toPromise","msgOut","String","buffer","writeValue","mtu","readUInt8","Buffer","setScrambleKey","close","exchangeBusyPromise","isSupported","resolve","observeAvailability","list"],"sources":["../src/TransportWebBLE.js"],"sourcesContent":["// @flow\n/* eslint-disable prefer-template */\n\nimport Transport from \"@ledgerhq/hw-transport\";\nimport {\n  DisconnectedDevice,\n  TransportOpenUserCancelled,\n} from \"@ledgerhq/errors\";\nimport {\n  getBluetoothServiceUuids,\n  getInfosForServiceUuid,\n} from \"@ledgerhq/devices\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\nimport { sendAPDU } from \"@ledgerhq/devices/lib/ble/sendAPDU\";\nimport { receiveAPDU } from \"@ledgerhq/devices/lib/ble/receiveAPDU\";\nimport { log } from \"@ledgerhq/logs\";\nimport { Observable, defer, merge, from } from \"rxjs\";\nimport { share, ignoreElements, first, map, tap } from \"rxjs/operators\";\nimport type { Device, Characteristic } from \"./types\";\nimport { monitorCharacteristic } from \"./monitorCharacteristic\";\n\nconst requiresBluetooth = () => {\n  // $FlowFixMe\n  const { bluetooth } = navigator;\n  if (typeof bluetooth === \"undefined\") {\n    throw new Error(\"web bluetooth not supported\");\n  }\n  return bluetooth;\n};\n\nconst availability = (): Observable<boolean> =>\n  Observable.create((observer) => {\n    const bluetooth = requiresBluetooth();\n    const onAvailabilityChanged = (e) => {\n      observer.next(e.value);\n    };\n    bluetooth.addEventListener(\"availabilitychanged\", onAvailabilityChanged);\n    let unsubscribed = false;\n    bluetooth.getAvailability().then((available) => {\n      if (!unsubscribed) {\n        observer.next(available);\n      }\n    });\n    return () => {\n      unsubscribed = true;\n      bluetooth.removeEventListener(\n        \"availabilitychanged\",\n        onAvailabilityChanged\n      );\n    };\n  });\n\nconst transportsCache = {};\n\nconst requestDeviceParam = () => ({\n  filters: getBluetoothServiceUuids().map((uuid) => ({\n    services: [uuid],\n  })),\n});\n\nconst retrieveService = async (device) => {\n  if (!device.gatt) throw new Error(\"bluetooth gatt not found\");\n  const [service] = await device.gatt.getPrimaryServices();\n  if (!service) throw new Error(\"bluetooth service not found\");\n  const infos = getInfosForServiceUuid(service.uuid);\n  if (!infos) throw new Error(\"bluetooth service infos not found\");\n  return [service, infos];\n};\n\nasync function open(deviceOrId: Device | string, needsReconnect: boolean) {\n  let device;\n  if (typeof deviceOrId === \"string\") {\n    if (transportsCache[deviceOrId]) {\n      log(\"ble-verbose\", \"Transport in cache, using that.\");\n      return transportsCache[deviceOrId];\n    }\n\n    const bluetooth = requiresBluetooth();\n\n    // TODO instead we should \"query\" the device by its ID\n    device = await bluetooth.requestDevice(requestDeviceParam());\n  } else {\n    device = deviceOrId;\n  }\n\n  if (!device.gatt.connected) {\n    log(\"ble-verbose\", \"not connected. connecting...\");\n    await device.gatt.connect();\n  }\n\n  const [service, infos] = await retrieveService(device);\n  const { deviceModel, writeUuid, notifyUuid } = infos;\n  const [writeC, notifyC] = await Promise.all([\n    service.getCharacteristic(writeUuid),\n    service.getCharacteristic(notifyUuid),\n  ]);\n\n  const notifyObservable = monitorCharacteristic(notifyC).pipe(\n    tap((value) => {\n      log(\"ble-frame\", \"<= \" + value.toString(\"hex\"));\n    }),\n    share()\n  );\n\n  const notif = notifyObservable.subscribe();\n\n  const transport = new BluetoothTransport(\n    device,\n    writeC,\n    notifyObservable,\n    deviceModel\n  );\n\n  if (!device.gatt.connected) {\n    throw new DisconnectedDevice();\n  }\n\n  // eslint-disable-next-line require-atomic-updates\n  transportsCache[transport.id] = transport;\n  const onDisconnect = (e) => {\n    console.log(\"onDisconnect!\", e);\n    delete transportsCache[transport.id];\n    transport.notYetDisconnected = false;\n    notif.unsubscribe();\n    device.removeEventListener(\"gattserverdisconnected\", onDisconnect);\n    log(\"ble-verbose\", `BleTransport(${transport.id}) disconnected`);\n    transport.emit(\"disconnect\", e);\n  };\n  device.addEventListener(\"gattserverdisconnected\", onDisconnect);\n\n  let beforeMTUTime = Date.now();\n  try {\n    await transport.inferMTU();\n  } finally {\n    let afterMTUTime = Date.now();\n\n    // workaround for #279: we need to open() again if we come the first time here,\n    // to make sure we do a disconnect() after the first pairing time\n    // because of a firmware bug\n\n    if (afterMTUTime - beforeMTUTime < 1000) {\n      needsReconnect = false; // (optim) there is likely no new pairing done because mtu answer was fast.\n    }\n\n    if (needsReconnect) {\n      await device.gatt.disconnect();\n      // necessary time for the bonding workaround\n      await new Promise((s) => setTimeout(s, 4000));\n    }\n  }\n\n  if (needsReconnect) {\n    return open(device, false);\n  }\n\n  return transport;\n}\n\n/**\n * react-native bluetooth BLE implementation\n * @example\n * import BluetoothTransport from \"@ledgerhq/hw-transport-web-ble\";\n */\nexport default class BluetoothTransport extends Transport<Device | string> {\n  static isSupported = (): Promise<boolean> =>\n    Promise.resolve()\n      .then(requiresBluetooth)\n      .then(\n        () => true,\n        () => false\n      );\n\n  /**\n   * observe event with { available: bool, type: string }\n   * (available is generic, type is specific)\n   * an event is emit once and then each time it changes\n   */\n  static observeAvailability = (observer: *) =>\n    availability.subscribe(observer);\n\n  static list = (): * => Promise.resolve([]);\n\n  /**\n   * Scan for Ledger Bluetooth devices.\n   * On this web implementation, it only emits ONE device, the one that was selected in the UI (if any).\n   */\n  static listen(observer: *) {\n    log(\"ble-verbose\", \"listen...\");\n    let unsubscribed;\n\n    const bluetooth = requiresBluetooth();\n\n    bluetooth.requestDevice(requestDeviceParam()).then(\n      async (device) => {\n        if (!unsubscribed) {\n          observer.next({\n            type: \"add\",\n            descriptor: device,\n          });\n          observer.complete();\n        }\n      },\n      (error) => {\n        observer.error(new TransportOpenUserCancelled(error.message));\n      }\n    );\n    function unsubscribe() {\n      unsubscribed = true;\n    }\n    return { unsubscribe };\n  }\n\n  /**\n   * open a bluetooth device.\n   */\n  static async open(deviceOrId: Device | string) {\n    return open(deviceOrId, true);\n  }\n\n  /**\n   * globally disconnect a bluetooth device by its id.\n   */\n  static disconnect = async (id: *) => {\n    log(\"ble-verbose\", `user disconnect(${id})`);\n    const transport = transportsCache[id];\n    if (transport) {\n      transport.device.gatt.disconnect();\n    }\n  };\n\n  id: string;\n\n  device: Device;\n\n  mtuSize: number = 20;\n\n  writeCharacteristic: Characteristic;\n\n  notifyObservable: Observable<Buffer>;\n\n  notYetDisconnected = true;\n\n  deviceModel: DeviceModel;\n\n  constructor(\n    device: Device,\n    writeCharacteristic: Characteristic,\n    notifyObservable: Observable<*>,\n    deviceModel: DeviceModel\n  ) {\n    super();\n    this.id = device.id;\n    this.device = device;\n    this.writeCharacteristic = writeCharacteristic;\n    this.notifyObservable = notifyObservable;\n    this.deviceModel = deviceModel;\n\n    log(\"ble-verbose\", `BleTransport(${String(this.id)}) new instance`);\n  }\n\n  async inferMTU() {\n    let mtu = 23;\n\n    await this.exchangeAtomicImpl(async () => {\n      try {\n        mtu =\n          (await merge(\n            this.notifyObservable.pipe(\n              first((buffer) => buffer.readUInt8(0) === 0x08),\n              map((buffer) => buffer.readUInt8(5))\n            ),\n            defer(() => from(this.write(Buffer.from([0x08, 0, 0, 0, 0])))).pipe(\n              ignoreElements()\n            )\n          ).toPromise()) + 3;\n      } catch (e) {\n        log(\"ble-error\", \"inferMTU got \" + String(e));\n        this.device.gatt.disconnect();\n        throw e;\n      }\n    });\n\n    if (mtu > 23) {\n      const mtuSize = mtu - 3;\n      log(\n        \"ble-verbose\",\n        `BleTransport(${String(this.id)}) mtu set to ${String(mtuSize)}`\n      );\n      this.mtuSize = mtuSize;\n    }\n\n    return this.mtuSize;\n  }\n\n  /**\n   * Exchange with the device using APDU protocol.\n   * @param apdu\n   * @returns a promise of apdu response\n   */\n  exchange = (apdu: Buffer): Promise<Buffer> =>\n    this.exchangeAtomicImpl(async () => {\n      try {\n        const msgIn = apdu.toString(\"hex\");\n        log(\"apdu\", `=> ${msgIn}`);\n\n        const data = await merge(\n          this.notifyObservable.pipe(receiveAPDU),\n          sendAPDU(this.write, apdu, this.mtuSize)\n        ).toPromise();\n\n        const msgOut = data.toString(\"hex\");\n        log(\"apdu\", `<= ${msgOut}`);\n\n        return data;\n      } catch (e) {\n        log(\"ble-error\", \"exchange got \" + String(e));\n        if (this.notYetDisconnected) {\n          // in such case we will always disconnect because something is bad.\n          this.device.gatt.disconnect();\n        }\n        throw e;\n      }\n    });\n\n  setScrambleKey() {}\n\n  write = async (buffer: Buffer) => {\n    log(\"ble-frame\", \"=> \" + buffer.toString(\"hex\"));\n    await this.writeCharacteristic.writeValue(buffer);\n  };\n\n  async close() {\n    if (this.exchangeBusyPromise) {\n      await this.exchangeBusyPromise;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}