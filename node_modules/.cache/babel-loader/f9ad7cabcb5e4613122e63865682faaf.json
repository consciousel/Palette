{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\masho\\\\OneDrive\\\\Desktop\\\\Blockchain\\\\Biconomy\\\\Projects\\\\Palette\\\\src\\\\utils\\\\interact.js\";\nimport { NFTPortPinJSONToIPFS } from './nftport.js';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\n\nconst web3 = createAlchemyWeb3(\"https://polygon-mumbai.g.alchemy.com/v2/pTB9jj_kefkrh3BSy6T-lOxFpLVS0mye\");\n\nconst ipfsClient = require(\"ipfs-http-client\");\n\nconst contractABI = require('../contract-abi.json');\n\nconst contractAddress = \"0x825387120171F22D5240c26D877Eb21D0a548E52\"; // Smart contract address for the Palette NFT Dapp on Polygon mainnet \n\nvar tokenURI = \"\";\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"üëÜüèΩ Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"üò• \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              href: `https://metamask.io/download.html`,\n              children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }, this)\n      }, void 0, false)\n    };\n  }\n};\nexport const uploadMetadata = async (name, description, artist, urlOfLastUpload, collection, attributes) => {\n  //error handling\n  if (urlOfLastUpload === \"\" || name.trim() === \"\" || description.trim() === \"\") {\n    return {\n      success: false,\n      status: \"‚ùóPlease make sure all fields are completed before minting.\"\n    };\n  } // Make call to NFT Port \n\n\n  const nftPortResponse = await NFTPortPinJSONToIPFS(name, description, artist, urlOfLastUpload, collection, attributes);\n\n  if (!nftPortResponse.success) {\n    return {\n      success: false,\n      status: \"üò¢ Something went wrong while retrieving your tokenURI.\"\n    };\n  } else {\n    return {\n      success: nftPortResponse.nftPortUrl,\n      status: \"‚úÖ Metadata pinned to IPFS successfully. Proceed with mint!\"\n    };\n  }\n};\nexport const mintNFT = async tokenUrl => {\n  // pin data and get asset url\n  tokenURI = tokenUrl.toString();\n  tokenURI = tokenURI.replace(\"ipfs://\", \"https://gateway.pinata.cloud/ipfs/\");\n  console.log(tokenURI); //load the smart contract\n\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress); //set up your Ethereum transaction\n\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: window.ethereum.selectedAddress,\n    // must match user's active address.\n    'data': window.contract.methods.mint(tokenURI).encodeABI() //make call to NFT smart contract \n\n  };\n  var txnHash = \"\"; //sign the transaction via Metamask\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters]\n    });\n    txnHash = txHash;\n    return {\n      success: true,\n      status: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"success\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Congrats, your NFT is being minted. It will be available to view and trade on \", /*#__PURE__*/_jsxDEV(\"a\", {\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              href: 'https://testnets.opensea.io/accounts/',\n              children: \"OpenSea\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 92\n            }, this), \" shortly.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u2705 Check out your transaction on Polygonscan: https://mumbai.polygonscan.com//tx/\", txnHash]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this)\n      }, void 0, false)\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"üò• Something went wrong: \" + error.message\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"üëÜüèΩ Write a message in the text-field above.\" // success: false\n\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"ü¶ä Connect to Metamask using the top right button.\" // success: false\n\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"üò• \" + err.message // success: false\n\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/Palette/src/utils/interact.js"],"names":["NFTPortPinJSONToIPFS","React","useState","require","config","createAlchemyWeb3","web3","ipfsClient","contractABI","contractAddress","tokenURI","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err","message","uploadMetadata","name","description","artist","urlOfLastUpload","collection","attributes","trim","success","nftPortResponse","nftPortUrl","mintNFT","tokenUrl","toString","replace","console","log","contract","eth","Contract","transactionParameters","to","from","selectedAddress","methods","mint","encodeABI","txnHash","txHash","params","error","getCurrentWalletConnected","length"],"mappings":"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","sourcesContent":["import { NFTPortPinJSONToIPFS } from './nftport.js'\r\nimport React, { useState } from 'react';\r\n\r\nrequire('dotenv').config();\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(\"https://polygon-mumbai.g.alchemy.com/v2/pTB9jj_kefkrh3BSy6T-lOxFpLVS0mye\");\r\nconst ipfsClient = require(\"ipfs-http-client\");\r\n\r\nconst contractABI = require('../contract-abi.json');\r\nconst contractAddress = \"0x825387120171F22D5240c26D877Eb21D0a548E52\"; // Smart contract address for the Palette NFT Dapp on Polygon mainnet \r\n\r\nvar tokenURI = \"\";\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"üëÜüèΩ Write a message in the text-field above.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"üò• \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <>\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            ü¶ä{\" \"}\r\n            <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n        </>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const uploadMetadata = async(name, description, artist, urlOfLastUpload, collection, attributes) => {\r\n  //error handling\r\n  if (urlOfLastUpload === \"\" || (name.trim() === \"\" || description.trim() === \"\")) { \r\n    return {\r\n      success: false,\r\n      status: \"‚ùóPlease make sure all fields are completed before minting.\",\r\n    }\r\n  }\r\n  \r\n  // Make call to NFT Port \r\n  const nftPortResponse = await NFTPortPinJSONToIPFS(name, description, artist, urlOfLastUpload, collection, attributes); \r\n  if (!nftPortResponse.success) {\r\n    return {\r\n      success: false,\r\n      status: \"üò¢ Something went wrong while retrieving your tokenURI.\",\r\n    }\r\n  } else {\r\n    return {\r\n      success: nftPortResponse.nftPortUrl,\r\n      status: \"‚úÖ Metadata pinned to IPFS successfully. Proceed with mint!\"\r\n    }\r\n  }\r\n}\r\n\r\nexport const mintNFT = async(tokenUrl) => {\r\n  // pin data and get asset url\r\n  tokenURI = tokenUrl.toString();\r\n  tokenURI = tokenURI.replace(\"ipfs://\",\"https://gateway.pinata.cloud/ipfs/\");\r\n  console.log(tokenURI);\r\n\r\n  //load the smart contract\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);  \r\n\r\n  //set up your Ethereum transaction\r\n  const transactionParameters = {\r\n    to: contractAddress, // Required except during contract publications.\r\n    from: window.ethereum.selectedAddress, // must match user's active address.\r\n    'data': window.contract.methods.mint(tokenURI).encodeABI()//make call to NFT smart contract \r\n  };\r\n\r\n  var txnHash = \"\";\r\n\r\n  //sign the transaction via Metamask\r\n  try {\r\n    const txHash = await window.ethereum\r\n      .request({\r\n        method: 'eth_sendTransaction',\r\n        params: [transactionParameters],\r\n      });\r\n      txnHash = txHash;\r\n    return {\r\n      success: true,\r\n      status: (\r\n        <>\r\n        <div className=\"success\">\r\n          <p>Congrats, your NFT is being minted. It will be available to view and trade on <a target=\"_blank\" rel=\"noreferrer\" href={'https://testnets.opensea.io/accounts/'}>OpenSea</a> shortly.</p>\r\n          <p>‚úÖ Check out your transaction on Polygonscan: https://mumbai.polygonscan.com//tx/{txnHash}</p>\r\n        </div>\r\n        </>\r\n      )\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      status: \"üò• Something went wrong: \" + error.message\r\n    }\r\n  }\r\n}\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \"üëÜüèΩ Write a message in the text-field above.\",\r\n          // success: false\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"ü¶ä Connect to Metamask using the top right button.\",\r\n          // success: false\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"üò• \" + err.message,\r\n        // success: false\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            ü¶ä{\" \"}\r\n            <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}