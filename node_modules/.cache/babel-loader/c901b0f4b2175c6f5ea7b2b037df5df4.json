{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiquidityPoolFeeV18 = undefined;\nexports.getLiquidityPoolId = getLiquidityPoolId;\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _asset = require('./asset');\n\nvar _hashing = require('./hashing');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // LiquidityPoolFeeV18 is the default liquidity pool fee in protocol v18. It defaults to 30 base points (0.3%).\n\n\nvar LiquidityPoolFeeV18 = exports.LiquidityPoolFeeV18 = 30;\n/**\n * getLiquidityPoolId computes the Pool ID for the given assets, fee and pool type.\n *\n * @see [stellar-core getPoolID](https://github.com/stellar/stellar-core/blob/9f3a48c6a8f1aa77b6043a055d0638661f718080/src/ledger/test/LedgerTxnTests.cpp#L3746-L3751)\n *\n * @export\n * @param {string} liquidityPoolType – A string representing the liquidity pool type.\n * @param {object} liquidityPoolParameters        – The liquidity pool parameters.\n * @param {Asset}  liquidityPoolParameters.assetA – The first asset in the Pool, it must respect the rule assetA < assetB.\n * @param {Asset}  liquidityPoolParameters.assetB – The second asset in the Pool, it must respect the rule assetA < assetB.\n * @param {number} liquidityPoolParameters.fee    – The liquidity pool fee. For now the only fee supported is `30`.\n *\n * @return {Buffer} the raw Pool ID buffer, which can be stringfied with `toString('hex')`\n */\n\nfunction getLiquidityPoolId(liquidityPoolType) {\n  var liquidityPoolParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (liquidityPoolType !== 'constant_product') {\n    throw new Error('liquidityPoolType is invalid');\n  }\n\n  var assetA = liquidityPoolParameters.assetA,\n      assetB = liquidityPoolParameters.assetB,\n      fee = liquidityPoolParameters.fee;\n\n  if (!assetA || !(assetA instanceof _asset.Asset)) {\n    throw new Error('assetA is invalid');\n  }\n\n  if (!assetB || !(assetB instanceof _asset.Asset)) {\n    throw new Error('assetB is invalid');\n  }\n\n  if (!fee || fee !== LiquidityPoolFeeV18) {\n    throw new Error('fee is invalid');\n  }\n\n  if (_asset.Asset.compare(assetA, assetB) !== -1) {\n    throw new Error('Assets are not in lexicographic order');\n  }\n\n  var lpTypeData = _stellarXdr_generated2.default.LiquidityPoolType.liquidityPoolConstantProduct().toXDR();\n\n  var lpParamsData = new _stellarXdr_generated2.default.LiquidityPoolConstantProductParameters({\n    assetA: assetA.toXDRObject(),\n    assetB: assetB.toXDRObject(),\n    fee: fee\n  }).toXDR();\n  var payload = Buffer.concat([lpTypeData, lpParamsData]);\n  return (0, _hashing.hash)(payload);\n}","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/NFT_minter/node_modules/stellar-base/lib/get_liquidity_pool_id.js"],"names":["Object","defineProperty","exports","value","LiquidityPoolFeeV18","undefined","getLiquidityPoolId","_stellarXdr_generated","require","_stellarXdr_generated2","_interopRequireDefault","_asset","_hashing","obj","__esModule","default","liquidityPoolType","liquidityPoolParameters","arguments","length","Error","assetA","assetB","fee","Asset","compare","lpTypeData","LiquidityPoolType","liquidityPoolConstantProduct","toXDR","lpParamsData","LiquidityPoolConstantProductParameters","toXDRObject","payload","Buffer","concat","hash"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,mBAAR,GAA8BC,SAA9B;AACAH,OAAO,CAACI,kBAAR,GAA6BA,kBAA7B;;AAEA,IAAIC,qBAAqB,GAAGC,OAAO,CAAC,mCAAD,CAAnC;;AAEA,IAAIC,sBAAsB,GAAGC,sBAAsB,CAACH,qBAAD,CAAnD;;AAEA,IAAII,MAAM,GAAGH,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAII,QAAQ,GAAGJ,OAAO,CAAC,WAAD,CAAtB;;AAEA,SAASE,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD,C,CAE/F;;;AACA,IAAIT,mBAAmB,GAAGF,OAAO,CAACE,mBAAR,GAA8B,EAAxD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,kBAAT,CAA4BU,iBAA5B,EAA+C;AAC7C,MAAIC,uBAAuB,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBb,SAAzC,GAAqDa,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlG;;AAEA,MAAIF,iBAAiB,KAAK,kBAA1B,EAA8C;AAC5C,UAAM,IAAII,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAED,MAAIC,MAAM,GAAGJ,uBAAuB,CAACI,MAArC;AAAA,MACIC,MAAM,GAAGL,uBAAuB,CAACK,MADrC;AAAA,MAEIC,GAAG,GAAGN,uBAAuB,CAACM,GAFlC;;AAIA,MAAI,CAACF,MAAD,IAAW,EAAEA,MAAM,YAAYV,MAAM,CAACa,KAA3B,CAAf,EAAkD;AAChD,UAAM,IAAIJ,KAAJ,CAAU,mBAAV,CAAN;AACD;;AACD,MAAI,CAACE,MAAD,IAAW,EAAEA,MAAM,YAAYX,MAAM,CAACa,KAA3B,CAAf,EAAkD;AAChD,UAAM,IAAIJ,KAAJ,CAAU,mBAAV,CAAN;AACD;;AACD,MAAI,CAACG,GAAD,IAAQA,GAAG,KAAKnB,mBAApB,EAAyC;AACvC,UAAM,IAAIgB,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAED,MAAIT,MAAM,CAACa,KAAP,CAAaC,OAAb,CAAqBJ,MAArB,EAA6BC,MAA7B,MAAyC,CAAC,CAA9C,EAAiD;AAC/C,UAAM,IAAIF,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,MAAIM,UAAU,GAAGjB,sBAAsB,CAACM,OAAvB,CAA+BY,iBAA/B,CAAiDC,4BAAjD,GAAgFC,KAAhF,EAAjB;;AACA,MAAIC,YAAY,GAAG,IAAIrB,sBAAsB,CAACM,OAAvB,CAA+BgB,sCAAnC,CAA0E;AAC3FV,IAAAA,MAAM,EAAEA,MAAM,CAACW,WAAP,EADmF;AAE3FV,IAAAA,MAAM,EAAEA,MAAM,CAACU,WAAP,EAFmF;AAG3FT,IAAAA,GAAG,EAAEA;AAHsF,GAA1E,EAIhBM,KAJgB,EAAnB;AAKA,MAAII,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,CAACT,UAAD,EAAaI,YAAb,CAAd,CAAd;AACA,SAAO,CAAC,GAAGlB,QAAQ,CAACwB,IAAb,EAAmBH,OAAnB,CAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiquidityPoolFeeV18 = undefined;\nexports.getLiquidityPoolId = getLiquidityPoolId;\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _asset = require('./asset');\n\nvar _hashing = require('./hashing');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// LiquidityPoolFeeV18 is the default liquidity pool fee in protocol v18. It defaults to 30 base points (0.3%).\nvar LiquidityPoolFeeV18 = exports.LiquidityPoolFeeV18 = 30;\n\n/**\n * getLiquidityPoolId computes the Pool ID for the given assets, fee and pool type.\n *\n * @see [stellar-core getPoolID](https://github.com/stellar/stellar-core/blob/9f3a48c6a8f1aa77b6043a055d0638661f718080/src/ledger/test/LedgerTxnTests.cpp#L3746-L3751)\n *\n * @export\n * @param {string} liquidityPoolType – A string representing the liquidity pool type.\n * @param {object} liquidityPoolParameters        – The liquidity pool parameters.\n * @param {Asset}  liquidityPoolParameters.assetA – The first asset in the Pool, it must respect the rule assetA < assetB.\n * @param {Asset}  liquidityPoolParameters.assetB – The second asset in the Pool, it must respect the rule assetA < assetB.\n * @param {number} liquidityPoolParameters.fee    – The liquidity pool fee. For now the only fee supported is `30`.\n *\n * @return {Buffer} the raw Pool ID buffer, which can be stringfied with `toString('hex')`\n */\nfunction getLiquidityPoolId(liquidityPoolType) {\n  var liquidityPoolParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (liquidityPoolType !== 'constant_product') {\n    throw new Error('liquidityPoolType is invalid');\n  }\n\n  var assetA = liquidityPoolParameters.assetA,\n      assetB = liquidityPoolParameters.assetB,\n      fee = liquidityPoolParameters.fee;\n\n  if (!assetA || !(assetA instanceof _asset.Asset)) {\n    throw new Error('assetA is invalid');\n  }\n  if (!assetB || !(assetB instanceof _asset.Asset)) {\n    throw new Error('assetB is invalid');\n  }\n  if (!fee || fee !== LiquidityPoolFeeV18) {\n    throw new Error('fee is invalid');\n  }\n\n  if (_asset.Asset.compare(assetA, assetB) !== -1) {\n    throw new Error('Assets are not in lexicographic order');\n  }\n\n  var lpTypeData = _stellarXdr_generated2.default.LiquidityPoolType.liquidityPoolConstantProduct().toXDR();\n  var lpParamsData = new _stellarXdr_generated2.default.LiquidityPoolConstantProductParameters({\n    assetA: assetA.toXDRObject(),\n    assetB: assetB.toXDRObject(),\n    fee: fee\n  }).toXDR();\n  var payload = Buffer.concat([lpTypeData, lpParamsData]);\n  return (0, _hashing.hash)(payload);\n}"]},"metadata":{},"sourceType":"script"}