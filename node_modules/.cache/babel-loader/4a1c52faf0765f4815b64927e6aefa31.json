{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProtoSerializer = void 0;\n\nconst errors = __importStar(require(\"../errors\"));\n\nconst utils_1 = require(\"../smartcontracts/codec/utils\");\n\nconst compiled_1 = require(\"./compiled\");\n\nconst constants_1 = require(\"../constants\");\n/**\n * Hides away the serialization complexity, for each type of object (e.g. transactions).\n \n * The implementation is non-generic, but practical: there's a pair of `serialize` / `deserialize` method for each type of object.\n */\n\n\nclass ProtoSerializer {\n  /**\n   * Serializes a Transaction object to a Buffer. Handles low-level conversion logic and field-mappings as well.\n   */\n  serializeTransaction(transaction) {\n    let protoTransaction = new compiled_1.proto.Transaction({\n      // elrond-go's serializer handles nonce == 0 differently, thus we treat 0 as \"undefined\".\n      Nonce: transaction.getNonce().valueOf() ? transaction.getNonce().valueOf() : undefined,\n      Value: this.serializeBalance(transaction.getValue()),\n      RcvAddr: transaction.getReceiver().pubkey(),\n      RcvUserName: null,\n      SndAddr: transaction.getSender().pubkey(),\n      SndUserName: null,\n      GasPrice: transaction.getGasPrice().valueOf(),\n      GasLimit: transaction.getGasLimit().valueOf(),\n      Data: transaction.getData().isEmpty() ? null : transaction.getData().valueOf(),\n      ChainID: Buffer.from(transaction.getChainID().valueOf()),\n      Version: transaction.getVersion().valueOf(),\n      Signature: Buffer.from(transaction.getSignature().hex(), \"hex\")\n    });\n\n    if (transaction.getOptions().valueOf() !== constants_1.TRANSACTION_OPTIONS_DEFAULT) {\n      protoTransaction.Options = transaction.getOptions().valueOf();\n    }\n\n    let encoded = compiled_1.proto.Transaction.encode(protoTransaction).finish();\n    let buffer = Buffer.from(encoded);\n    return buffer;\n  }\n  /**\n   * Custom serialization, compatible with elrond-go.\n   */\n\n\n  serializeBalance(balance) {\n    let value = balance.valueOf();\n\n    if (value.isZero()) {\n      return Buffer.from([0, 0]);\n    } // Will retain the magnitude, as a buffer.\n\n\n    let buffer = utils_1.bigIntToBuffer(value); // We prepend the \"positive\" sign marker, in order to be compatible with Elrond Go's \"sign & magnitude\" proto-representation (a custom one).\n\n    buffer = Buffer.concat([Buffer.from([0x00]), buffer]);\n    return buffer;\n  }\n\n  deserializeTransaction(_buffer) {\n    // Not needed (yet).\n    throw new errors.ErrUnsupportedOperation(\"deserializeTransaction\");\n  }\n\n}\n\nexports.ProtoSerializer = ProtoSerializer;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;AAEA;;;;;;;AAKA,MAAaA,eAAb,CAA4B;AACxB;;;AAGAC,sBAAoB,CAACC,WAAD,EAAyB;AACzC,QAAIC,gBAAgB,GAAG,IAAIC,iBAAMC,WAAV,CAAsB;AACzC;AACAC,WAAK,EAAEJ,WAAW,CAACK,QAAZ,GAAuBC,OAAvB,KAAmCN,WAAW,CAACK,QAAZ,GAAuBC,OAAvB,EAAnC,GAAsEC,SAFpC;AAGzCC,WAAK,EAAE,KAAKC,gBAAL,CAAsBT,WAAW,CAACU,QAAZ,EAAtB,CAHkC;AAIzCC,aAAO,EAAEX,WAAW,CAACY,WAAZ,GAA0BC,MAA1B,EAJgC;AAKzCC,iBAAW,EAAE,IAL4B;AAMzCC,aAAO,EAAEf,WAAW,CAACgB,SAAZ,GAAwBH,MAAxB,EANgC;AAOzCI,iBAAW,EAAE,IAP4B;AAQzCC,cAAQ,EAAElB,WAAW,CAACmB,WAAZ,GAA0Bb,OAA1B,EAR+B;AASzCc,cAAQ,EAAEpB,WAAW,CAACqB,WAAZ,GAA0Bf,OAA1B,EAT+B;AAUzCgB,UAAI,EAAEtB,WAAW,CAACuB,OAAZ,GAAsBC,OAAtB,KAAkC,IAAlC,GAAyCxB,WAAW,CAACuB,OAAZ,GAAsBjB,OAAtB,EAVN;AAWzCmB,aAAO,EAAEC,MAAM,CAACC,IAAP,CAAY3B,WAAW,CAAC4B,UAAZ,GAAyBtB,OAAzB,EAAZ,CAXgC;AAYzCuB,aAAO,EAAE7B,WAAW,CAAC8B,UAAZ,GAAyBxB,OAAzB,EAZgC;AAazCyB,eAAS,EAAEL,MAAM,CAACC,IAAP,CAAY3B,WAAW,CAACgC,YAAZ,GAA2BC,GAA3B,EAAZ,EAA8C,KAA9C;AAb8B,KAAtB,CAAvB;;AAgBA,QAAKjC,WAAW,CAACkC,UAAZ,GAAyB5B,OAAzB,OAAuC6B,uCAA5C,EAA0E;AACtElC,sBAAgB,CAACmC,OAAjB,GAA2BpC,WAAW,CAACkC,UAAZ,GAAyB5B,OAAzB,EAA3B;AACH;;AAED,QAAI+B,OAAO,GAAGnC,iBAAMC,WAAN,CAAkBmC,MAAlB,CAAyBrC,gBAAzB,EAA2CsC,MAA3C,EAAd;AACA,QAAIC,MAAM,GAAGd,MAAM,CAACC,IAAP,CAAYU,OAAZ,CAAb;AACA,WAAOG,MAAP;AACH;AAED;;;;;AAGQ/B,kBAAgB,CAACgC,OAAD,EAAiB;AACrC,QAAIC,KAAK,GAAGD,OAAO,CAACnC,OAAR,EAAZ;;AACA,QAAIoC,KAAK,CAACC,MAAN,EAAJ,EAAoB;AAChB,aAAOjB,MAAM,CAACC,IAAP,CAAY,CAAC,CAAD,EAAI,CAAJ,CAAZ,CAAP;AACH,KAJoC,CAMrC;;;AACA,QAAIa,MAAM,GAAGI,uBAAeF,KAAf,CAAb,CAPqC,CAQrC;;AACAF,UAAM,GAAGd,MAAM,CAACmB,MAAP,CAAc,CAACnB,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,CAAZ,CAAD,EAAsBa,MAAtB,CAAd,CAAT;AACA,WAAOA,MAAP;AACH;;AAEDM,wBAAsB,CAACC,OAAD,EAAgB;AAClC;AACA,UAAM,IAAIC,MAAM,CAACC,uBAAX,CAAmC,wBAAnC,CAAN;AACH;;AAjDuB;;AAA5BC","names":["ProtoSerializer","serializeTransaction","transaction","protoTransaction","compiled_1","Transaction","Nonce","getNonce","valueOf","undefined","Value","serializeBalance","getValue","RcvAddr","getReceiver","pubkey","RcvUserName","SndAddr","getSender","SndUserName","GasPrice","getGasPrice","GasLimit","getGasLimit","Data","getData","isEmpty","ChainID","Buffer","from","getChainID","Version","getVersion","Signature","getSignature","hex","getOptions","constants_1","Options","encoded","encode","finish","buffer","balance","value","isZero","utils_1","concat","deserializeTransaction","_buffer","errors","ErrUnsupportedOperation","exports"],"sourceRoot":"","sources":["../../src/proto/serializer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}