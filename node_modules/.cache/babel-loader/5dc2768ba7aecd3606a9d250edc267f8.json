{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateWallet = exports.generateAlgoWallet = exports.generateAdaWallet = exports.generateXlmWallet = exports.generateXrpWallet = exports.generateNeoWallet = exports.generateLtcWallet = exports.generateTronWallet = exports.generateDogeWallet = exports.generateQtumWallet = exports.generateBtcWallet = exports.generateBchWallet = exports.generateCeloWallet = exports.generateXdcWallet = exports.generateBscWallet = exports.generateFlowWallet = exports.generateEgldWallet = exports.generateOneWallet = exports.generateKlaytnWallet = exports.generatePolygonWallet = exports.generateEthWallet = exports.generateVetWallet = exports.generateBnbWallet = void 0;\n\nconst crypto_1 = require(\"@binance-chain/javascript-sdk/lib/crypto\");\n\nconst neon_js_1 = __importStar(require(\"@cityofzion/neon-js\"));\n\nconst bip39_1 = require(\"bip39\");\n\nconst bitcoinjs_lib_1 = require(\"bitcoinjs-lib\");\n\nconst ethereumjs_wallet_1 = require(\"ethereumjs-wallet\"); // @ts-ignore\n\n\nconst hdkey_1 = __importDefault(require(\"hdkey\"));\n\nconst ripple_lib_1 = require(\"ripple-lib\");\n\nconst stellar_sdk_1 = require(\"stellar-sdk\");\n\nconst constants_1 = require(\"../constants\");\n\nconst model_1 = require(\"../model\");\n\nconst cardano_crypto_1 = __importDefault(require(\"./cardano.crypto\"));\n\nconst algosdk = require('algosdk');\n\nconst base32 = require('base32.js');\n/**\n * Generate BnB wallet\n * @param testnet testnet or mainnet version of address\n * @returns wallet\n */\n\n\nconst generateBnbWallet = async testnet => {\n  const privateKey = crypto_1.generatePrivateKey();\n  const prefix = testnet ? 'tbnb' : 'bnb';\n  return {\n    address: crypto_1.getAddressFromPrivateKey(privateKey, prefix),\n    privateKey\n  };\n};\n\nexports.generateBnbWallet = generateBnbWallet;\n/**\n * Generate VeChain wallet\n * @param testnet testnet or mainnet version of address\n * @param mnem mnemonic seed to use\n * @returns wallet\n */\n\nconst generateVetWallet = async (testnet, mnem) => {\n  const path = testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.VET_DERIVATION_PATH;\n  const hdwallet = ethereumjs_wallet_1.hdkey.fromMasterSeed(await bip39_1.mnemonicToSeed(mnem));\n  const derivePath = hdwallet.derivePath(path);\n  return {\n    xpub: derivePath.publicExtendedKey().toString(),\n    mnemonic: mnem\n  };\n};\n\nexports.generateVetWallet = generateVetWallet;\n/**\n * Generate Ethereum or any other ERC20 wallet\n * @param testnet testnet or mainnet version of address\n * @param mnem mnemonic seed to use\n * @returns wallet\n */\n\nconst generateEthWallet = async (testnet, mnem) => {\n  const path = testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.ETH_DERIVATION_PATH;\n  const hdwallet = ethereumjs_wallet_1.hdkey.fromMasterSeed(await bip39_1.mnemonicToSeed(mnem));\n  const derivePath = hdwallet.derivePath(path);\n  return {\n    xpub: derivePath.publicExtendedKey().toString(),\n    mnemonic: mnem\n  };\n};\n\nexports.generateEthWallet = generateEthWallet;\n/**\n * Generate Polygon or any other ERC20 wallet\n * @param testnet testnet or mainnet version of address\n * @param mnem mnemonic seed to use\n * @returns wallet\n */\n\nconst generatePolygonWallet = async (testnet, mnem) => {\n  const path = testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.MATIC_DERIVATION_PATH;\n  const hdwallet = ethereumjs_wallet_1.hdkey.fromMasterSeed(await bip39_1.mnemonicToSeed(mnem));\n  const derivePath = hdwallet.derivePath(path);\n  return {\n    xpub: derivePath.publicExtendedKey().toString(),\n    mnemonic: mnem\n  };\n};\n\nexports.generatePolygonWallet = generatePolygonWallet;\n/**\n * Generate Polygon or any other ERC20 wallet\n * @param testnet testnet or mainnet version of address\n * @param mnem mnemonic seed to use\n * @returns wallet\n */\n\nconst generateKlaytnWallet = async (testnet, mnem) => {\n  const path = testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.KLAYTN_DERIVATION_PATH;\n  const hdwallet = ethereumjs_wallet_1.hdkey.fromMasterSeed(await bip39_1.mnemonicToSeed(mnem));\n  const derivePath = hdwallet.derivePath(path);\n  return {\n    xpub: derivePath.publicExtendedKey().toString(),\n    mnemonic: mnem\n  };\n};\n\nexports.generateKlaytnWallet = generateKlaytnWallet;\n/**\n * Generate Harmony or any other ERC20 wallet\n * @param testnet testnet or mainnet version of address\n * @param mnem mnemonic seed to use\n * @returns wallet\n */\n\nconst generateOneWallet = async (testnet, mnem) => {\n  const path = testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.ONE_DERIVATION_PATH;\n  const hdwallet = ethereumjs_wallet_1.hdkey.fromMasterSeed(await bip39_1.mnemonicToSeed(mnem));\n  const derivePath = hdwallet.derivePath(path);\n  return {\n    xpub: derivePath.publicExtendedKey().toString(),\n    mnemonic: mnem\n  };\n};\n\nexports.generateOneWallet = generateOneWallet;\n/**\n * Generate EGLD wallet\n * @param testnet\n * @param mnem mnemonic seed to use\n * @returns wallet\n */\n\nconst generateEgldWallet = async mnem => {\n  return {\n    mnemonic: mnem\n  };\n};\n\nexports.generateEgldWallet = generateEgldWallet;\n/**\n * Generate Flow or FUSD wallet\n * @param mnem mnemonic seed to use\n * @returns wallet\n */\n\nconst generateFlowWallet = async mnem => {\n  const hdwallet = hdkey_1.default.fromMasterSeed(await bip39_1.mnemonicToSeed(mnem));\n  return {\n    mnemonic: mnem,\n    xpub: hdwallet.derive(constants_1.FLOW_DERIVATION_PATH).toJSON().xpub\n  };\n};\n\nexports.generateFlowWallet = generateFlowWallet;\n/**\n * Generate BSC or any other BEP-20 or BEP-721 wallet\n * @param testnet testnet or mainnet version of address\n * @param mnem mnemonic seed to use\n * @returns wallet\n */\n\nconst generateBscWallet = async (testnet, mnem) => {\n  return exports.generateEthWallet(testnet, mnem);\n};\n\nexports.generateBscWallet = generateBscWallet;\n\nconst generateXdcWallet = async (testnet, mnem) => {\n  const path = testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.XDC_DERIVATION_PATH;\n  const hdwallet = ethereumjs_wallet_1.hdkey.fromMasterSeed(await bip39_1.mnemonicToSeed(mnem));\n  const derivePath = hdwallet.derivePath(path);\n  return {\n    xpub: derivePath.publicExtendedKey().toString(),\n    mnemonic: mnem\n  };\n};\n\nexports.generateXdcWallet = generateXdcWallet;\n/**\n * Generate Celo or any other ERC20 wallet\n * @param testnet testnet or mainnet version of address\n * @param mnem mnemonic seed to use\n * @returns wallet\n */\n\nconst generateCeloWallet = async (testnet, mnem) => {\n  const path = testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.CELO_DERIVATION_PATH;\n  const hdwallet = ethereumjs_wallet_1.hdkey.fromMasterSeed(await bip39_1.mnemonicToSeed(mnem));\n  const derivePath = hdwallet.derivePath(path);\n  return {\n    xpub: derivePath.publicExtendedKey().toString(),\n    mnemonic: mnem\n  };\n};\n\nexports.generateCeloWallet = generateCeloWallet;\n/**\n * Generate Bitcoin Cash wallet\n * @param testnet testnet or mainnet version of address\n * @param mnem mnemonic seed to use\n * @returns wallet\n */\n\nconst generateBchWallet = async (testnet, mnem) => {\n  const hdwallet = hdkey_1.default.fromMasterSeed(await bip39_1.mnemonicToSeed(mnem), testnet ? bitcoinjs_lib_1.networks.testnet.bip32 : bitcoinjs_lib_1.networks.bitcoin.bip32);\n  return {\n    mnemonic: mnem,\n    xpub: hdwallet.derive(constants_1.BCH_DERIVATION_PATH).toJSON().xpub\n  };\n};\n\nexports.generateBchWallet = generateBchWallet;\n/**\n * Generate Bitcoin wallet\n * @param testnet testnet or mainnet version of address\n * @param mnem mnemonic seed to use\n * @returns wallet\n */\n\nconst generateBtcWallet = async (testnet, mnem) => {\n  const hdwallet = hdkey_1.default.fromMasterSeed(await bip39_1.mnemonicToSeed(mnem), testnet ? bitcoinjs_lib_1.networks.testnet.bip32 : bitcoinjs_lib_1.networks.bitcoin.bip32);\n  return {\n    mnemonic: mnem,\n    xpub: hdwallet.derive(testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.BTC_DERIVATION_PATH).toJSON().xpub\n  };\n};\n\nexports.generateBtcWallet = generateBtcWallet;\n\nconst generateQtumWallet = async (testnet, mnem) => {\n  const hdwallet = hdkey_1.default.fromMasterSeed(await bip39_1.mnemonicToSeed(mnem), testnet ? constants_1.QTUM_NETWORK_TESTNET.bip32 : constants_1.QTUM_NETWORK_MAINNET.bip32);\n  return {\n    mnemonic: mnem,\n    xpub: hdwallet.derive(testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.QTUM_DERIVATION_PATH).toJSON().xpub\n  };\n};\n\nexports.generateQtumWallet = generateQtumWallet;\n/**\n * Generate Doge wallet\n * @param testnet testnet or mainnet version of address\n * @param mnem mnemonic seed to use\n * @returns wallet\n */\n\nconst generateDogeWallet = async (testnet, mnem) => {\n  const hdwallet = hdkey_1.default.fromMasterSeed(await bip39_1.mnemonicToSeed(mnem), testnet ? constants_1.DOGE_TEST_NETWORK.bip32 : constants_1.DOGE_NETWORK.bip32);\n  return {\n    mnemonic: mnem,\n    xpub: hdwallet.derive(testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.DOGE_DERIVATION_PATH).toJSON().xpub\n  };\n};\n\nexports.generateDogeWallet = generateDogeWallet;\n/**\n * Generate Tron wallet\n * @returns mnemonic for the wallet\n */\n\nconst generateTronWallet = async mnem => {\n  const w = bitcoinjs_lib_1.bip32.fromSeed(await bip39_1.mnemonicToSeed(mnem));\n  const bip32Interface = w.derivePath(constants_1.TRON_DERIVATION_PATH);\n  return {\n    mnemonic: mnem,\n    xpub: bip32Interface.publicKey.toString('hex') + bip32Interface.chainCode.toString('hex')\n  };\n};\n\nexports.generateTronWallet = generateTronWallet;\n/**\n * Generate Litecoin wallet\n * @param testnet testnet or mainnet version of address\n * @param mnem mnemonic seed to use\n * @returns wallet\n */\n\nconst generateLtcWallet = async (testnet, mnem) => {\n  const hdwallet = hdkey_1.default.fromMasterSeed(await bip39_1.mnemonicToSeed(mnem), testnet ? constants_1.LTC_TEST_NETWORK.bip32 : constants_1.LTC_NETWORK.bip32);\n  return {\n    mnemonic: mnem,\n    xpub: hdwallet.derive(testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.LTC_DERIVATION_PATH).toJSON().xpub\n  };\n};\n\nexports.generateLtcWallet = generateLtcWallet;\n/**\n * Generate Neo address and private key.\n */\n\nconst generateNeoWallet = () => {\n  const privateKey = neon_js_1.default.create.privateKey();\n  return {\n    privateKey,\n    address: new neon_js_1.wallet.Account(privateKey).address\n  };\n};\n\nexports.generateNeoWallet = generateNeoWallet;\n/**\n * Generate Xrp address and secret.\n */\n\nconst generateXrpWallet = () => {\n  const {\n    address,\n    secret\n  } = new ripple_lib_1.RippleAPI().generateAddress();\n  return {\n    address,\n    secret\n  };\n};\n\nexports.generateXrpWallet = generateXrpWallet;\n/**\n * Generate Stellar address and secret.\n * @param secret secret of the account to generate address\n */\n\nconst generateXlmWallet = secret => {\n  const keypair = secret ? stellar_sdk_1.Keypair.fromSecret(secret) : stellar_sdk_1.Keypair.random();\n  return {\n    address: keypair.publicKey(),\n    secret: keypair.secret()\n  };\n};\n\nexports.generateXlmWallet = generateXlmWallet;\n/**\n * Generate ADA wallet\n * @param mnemonic mnemonic seed to use\n * @returns wallet\n */\n\nconst generateAdaWallet = async mnemonic => {\n  return {\n    mnemonic,\n    xpub: await cardano_crypto_1.default.generateXPublicKey(mnemonic)\n  };\n};\n\nexports.generateAdaWallet = generateAdaWallet;\n/**\n * Generate Algo wallet\n * @param mnem mnemonic seed to use\n * @returns address and secret\n */\n\nconst generateAlgoWallet = async mnem => {\n  const account = mnem ? algosdk.mnemonicToSecretKey(mnem) : algosdk.generateAccount();\n  const encoder = new base32.Encoder({\n    type: 'rfc4648'\n  });\n  const secret = encoder.write(account.sk).finalize();\n  return {\n    address: account.addr,\n    secret: secret\n  };\n};\n\nexports.generateAlgoWallet = generateAlgoWallet;\n/**\n * Generate wallet\n * @param currency blockchain to generate wallet for\n * @param testnet testnet or mainnet version of address\n * @param mnemonic mnemonic seed to use. If not present, new one will be generated\n * @returns wallet or a combination of address and private key\n */\n\nconst generateWallet = (currency, testnet, mnemonic) => {\n  const mnem = mnemonic ? mnemonic : bip39_1.generateMnemonic(256);\n\n  switch (currency) {\n    case model_1.Currency.BTC:\n      return exports.generateBtcWallet(testnet, mnem);\n\n    case model_1.Currency.DOGE:\n      return exports.generateDogeWallet(testnet, mnem);\n\n    case model_1.Currency.LTC:\n      return exports.generateLtcWallet(testnet, mnem);\n\n    case model_1.Currency.BCH:\n      return exports.generateBchWallet(testnet, mnem);\n\n    case model_1.Currency.TRON:\n    case model_1.Currency.USDT_TRON:\n    case model_1.Currency.INRT_TRON:\n      return exports.generateTronWallet(mnem);\n\n    case model_1.Currency.FLOW:\n    case model_1.Currency.FUSD:\n      return exports.generateFlowWallet(mnem);\n\n    case model_1.Currency.CELO:\n    case model_1.Currency.CEUR:\n    case model_1.Currency.CUSD:\n      return exports.generateCeloWallet(testnet, mnem);\n\n    case model_1.Currency.ONE:\n      return exports.generateOneWallet(testnet, mnem);\n\n    case model_1.Currency.QTUM:\n      return exports.generateQtumWallet(testnet, mnem);\n\n    case model_1.Currency.KLAY:\n      return exports.generateKlaytnWallet(testnet, mnem);\n\n    case model_1.Currency.EGLD:\n      return exports.generateEgldWallet(mnem);\n\n    case model_1.Currency.USDT:\n    case model_1.Currency.WBTC:\n    case model_1.Currency.LEO:\n    case model_1.Currency.REVV:\n    case model_1.Currency.LATOKEN:\n    case model_1.Currency.COIIN:\n    case model_1.Currency.SAND:\n    case model_1.Currency.LINK:\n    case model_1.Currency.UNI:\n    case model_1.Currency.FREE:\n    case model_1.Currency.MKR:\n    case model_1.Currency.USDC:\n    case model_1.Currency.BAT:\n    case model_1.Currency.TUSD:\n    case model_1.Currency.BUSD:\n    case model_1.Currency.USDC_BSC:\n    case model_1.Currency.COIIN_BSC:\n    case model_1.Currency.B2U_BSC:\n    case model_1.Currency.GMC:\n    case model_1.Currency.GMC_BSC:\n    case model_1.Currency.PAX:\n    case model_1.Currency.PAXG:\n    case model_1.Currency.PLTC:\n    case model_1.Currency.XCON:\n    case model_1.Currency.ETH:\n    case model_1.Currency.BSC:\n    case model_1.Currency.BETH:\n    case model_1.Currency.GAMEE:\n    case model_1.Currency.CAKE:\n    case model_1.Currency.MATIC_ETH:\n    case model_1.Currency.HAG:\n    case model_1.Currency.BUSD_BSC:\n    case model_1.Currency.BBTC:\n    case model_1.Currency.BADA:\n    case model_1.Currency.WBNB:\n    case model_1.Currency.BDOT:\n    case model_1.Currency.BXRP:\n    case model_1.Currency.BLTC:\n    case model_1.Currency.BBCH:\n    case model_1.Currency.MMY:\n      return exports.generateEthWallet(testnet, mnem);\n\n    case model_1.Currency.MATIC:\n    case model_1.Currency.USDC_MATIC:\n    case model_1.Currency.USDT_MATIC:\n      return exports.generatePolygonWallet(testnet, mnem);\n\n    case model_1.Currency.XDC:\n      return exports.generateXdcWallet(testnet, mnem);\n\n    case model_1.Currency.XRP:\n      return exports.generateXrpWallet();\n\n    case model_1.Currency.XLM:\n      return exports.generateXlmWallet();\n\n    case model_1.Currency.VET:\n      return exports.generateVetWallet(testnet, mnem);\n\n    case model_1.Currency.NEO:\n      return exports.generateNeoWallet();\n\n    case model_1.Currency.BNB:\n      return exports.generateBnbWallet(testnet);\n\n    case model_1.Currency.ADA:\n      return exports.generateAdaWallet(mnem);\n\n    case model_1.Currency.ALGO:\n      return exports.generateAlgoWallet(mnemonic);\n\n    default:\n      throw new Error('Unsupported blockchain.');\n  }\n};\n\nexports.generateWallet = generateWallet;","map":{"version":3,"mappings":"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","names":["algosdk","require","base32","generateBnbWallet","testnet","privateKey","crypto_1","prefix","address","exports","generateVetWallet","mnem","path","constants_1","hdwallet","ethereumjs_wallet_1","fromMasterSeed","bip39_1","derivePath","xpub","publicExtendedKey","toString","mnemonic","generateEthWallet","generatePolygonWallet","generateKlaytnWallet","generateOneWallet","generateEgldWallet","generateFlowWallet","hdkey_1","derive","toJSON","generateBscWallet","generateXdcWallet","generateCeloWallet","generateBchWallet","bitcoinjs_lib_1","bip32","bitcoin","generateBtcWallet","generateQtumWallet","generateDogeWallet","generateTronWallet","w","fromSeed","bip32Interface","publicKey","chainCode","generateLtcWallet","generateNeoWallet","neon_js_1","create","Account","generateXrpWallet","secret","ripple_lib_1","generateAddress","generateXlmWallet","keypair","stellar_sdk_1","fromSecret","random","generateAdaWallet","cardano_crypto_1","generateXPublicKey","generateAlgoWallet","account","mnemonicToSecretKey","generateAccount","encoder","Encoder","type","write","sk","finalize","addr","generateWallet","currency","model_1","BTC","DOGE","LTC","BCH","TRON","USDT_TRON","INRT_TRON","FLOW","FUSD","CELO","CEUR","CUSD","ONE","QTUM","KLAY","EGLD","USDT","WBTC","LEO","REVV","LATOKEN","COIIN","SAND","LINK","UNI","FREE","MKR","USDC","BAT","TUSD","BUSD","USDC_BSC","COIIN_BSC","B2U_BSC","GMC","GMC_BSC","PAX","PAXG","PLTC","XCON","ETH","BSC","BETH","GAMEE","CAKE","MATIC_ETH","HAG","BUSD_BSC","BBTC","BADA","WBNB","BDOT","BXRP","BLTC","BBCH","MMY","MATIC","USDC_MATIC","USDT_MATIC","XDC","XRP","XLM","VET","NEO","BNB","ADA","ALGO","Error"],"sourceRoot":"","sources":["../../../src/wallet/wallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}