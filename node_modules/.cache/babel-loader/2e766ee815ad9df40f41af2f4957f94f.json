{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EncryptedData = void 0;\n\nconst derivationParams_1 = require(\"./derivationParams\");\n\nclass EncryptedData {\n  constructor(data) {\n    this.id = data.id;\n    this.version = data.version;\n    this.ciphertext = data.ciphertext;\n    this.iv = data.iv;\n    this.cipher = data.cipher;\n    this.kdf = data.kdf;\n    this.kdfparams = data.kdfparams;\n    this.mac = data.mac;\n    this.salt = data.salt;\n  }\n\n  toJSON() {\n    return {\n      version: this.version,\n      id: this.id,\n      crypto: {\n        ciphertext: this.ciphertext,\n        cipherparams: {\n          iv: this.iv\n        },\n        cipher: this.cipher,\n        kdf: this.kdf,\n        kdfparams: {\n          dklen: this.kdfparams.dklen,\n          salt: this.salt,\n          n: this.kdfparams.n,\n          r: this.kdfparams.r,\n          p: this.kdfparams.p\n        },\n        mac: this.mac\n      }\n    };\n  }\n\n  static fromJSON(data) {\n    return new EncryptedData({\n      version: data.version,\n      id: data.id,\n      ciphertext: data.crypto.ciphertext,\n      iv: data.crypto.cipherparams.iv,\n      cipher: data.crypto.cipher,\n      kdf: data.crypto.kdf,\n      kdfparams: new derivationParams_1.ScryptKeyDerivationParams(data.crypto.kdfparams.n, data.crypto.kdfparams.r, data.crypto.kdfparams.p, data.crypto.kdfparams.dklen),\n      salt: data.crypto.kdfparams.salt,\n      mac: data.crypto.mac\n    });\n  }\n\n}\n\nexports.EncryptedData = EncryptedData;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA,MAAaA,aAAb,CAA0B;AAWxBC,cAAYC,IAAZ,EAA+C;AAC7C,SAAKC,EAAL,GAAUD,IAAI,CAACC,EAAf;AACA,SAAKC,OAAL,GAAeF,IAAI,CAACE,OAApB;AACA,SAAKC,UAAL,GAAkBH,IAAI,CAACG,UAAvB;AACA,SAAKC,EAAL,GAAUJ,IAAI,CAACI,EAAf;AACA,SAAKC,MAAL,GAAcL,IAAI,CAACK,MAAnB;AACA,SAAKC,GAAL,GAAWN,IAAI,CAACM,GAAhB;AACA,SAAKC,SAAL,GAAiBP,IAAI,CAACO,SAAtB;AACA,SAAKC,GAAL,GAAWR,IAAI,CAACQ,GAAhB;AACA,SAAKC,IAAL,GAAYT,IAAI,CAACS,IAAjB;AACD;;AAEDC,QAAM;AACJ,WAAO;AACLR,aAAO,EAAE,KAAKA,OADT;AAELD,QAAE,EAAE,KAAKA,EAFJ;AAGLU,YAAM,EAAE;AACNR,kBAAU,EAAE,KAAKA,UADX;AAENS,oBAAY,EAAE;AAAER,YAAE,EAAE,KAAKA;AAAX,SAFR;AAGNC,cAAM,EAAE,KAAKA,MAHP;AAINC,WAAG,EAAE,KAAKA,GAJJ;AAKNC,iBAAS,EAAE;AACTM,eAAK,EAAE,KAAKN,SAAL,CAAeM,KADb;AAETJ,cAAI,EAAE,KAAKA,IAFF;AAGTK,WAAC,EAAE,KAAKP,SAAL,CAAeO,CAHT;AAITC,WAAC,EAAE,KAAKR,SAAL,CAAeQ,CAJT;AAKTC,WAAC,EAAE,KAAKT,SAAL,CAAeS;AALT,SALL;AAYNR,WAAG,EAAE,KAAKA;AAZJ;AAHH,KAAP;AAkBD;;AAEc,SAARS,QAAQ,CAACjB,IAAD,EAAU;AACvB,WAAO,IAAIF,aAAJ,CAAkB;AACvBI,aAAO,EAAEF,IAAI,CAACE,OADS;AAEvBD,QAAE,EAAED,IAAI,CAACC,EAFc;AAGvBE,gBAAU,EAAEH,IAAI,CAACW,MAAL,CAAYR,UAHD;AAIvBC,QAAE,EAAEJ,IAAI,CAACW,MAAL,CAAYC,YAAZ,CAAyBR,EAJN;AAKvBC,YAAM,EAAEL,IAAI,CAACW,MAAL,CAAYN,MALG;AAMvBC,SAAG,EAAEN,IAAI,CAACW,MAAL,CAAYL,GANM;AAOvBC,eAAS,EAAE,IAAIW,4CAAJ,CACTlB,IAAI,CAACW,MAAL,CAAYJ,SAAZ,CAAsBO,CADb,EAETd,IAAI,CAACW,MAAL,CAAYJ,SAAZ,CAAsBQ,CAFb,EAGTf,IAAI,CAACW,MAAL,CAAYJ,SAAZ,CAAsBS,CAHb,EAIThB,IAAI,CAACW,MAAL,CAAYJ,SAAZ,CAAsBM,KAJb,CAPY;AAavBJ,UAAI,EAAET,IAAI,CAACW,MAAL,CAAYJ,SAAZ,CAAsBE,IAbL;AAcvBD,SAAG,EAAER,IAAI,CAACW,MAAL,CAAYH;AAdM,KAAlB,CAAP;AAgBD;;AA7DuB;;AAA1BW","names":["EncryptedData","constructor","data","id","version","ciphertext","iv","cipher","kdf","kdfparams","mac","salt","toJSON","crypto","cipherparams","dklen","n","r","p","fromJSON","derivationParams_1","exports"],"sourceRoot":"","sources":["../../src/crypto/encryptedData.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}