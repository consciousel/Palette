{"ast":null,"code":"const Module = require('../lib.js');\n\nconst {\n  validateBuffer,\n  validateString,\n  validateArray\n} = require(\"../utils/validation\");\n\nfunction blake2b(input, outputLen) {\n  validateBuffer(input);\n  const inputLen = input.length;\n\n  const inputArrPtr = Module._malloc(inputLen);\n\n  const inputArr = new Uint8Array(Module.HEAPU8.buffer, inputArrPtr, inputLen);\n\n  const outputArrPtr = Module._malloc(outputLen);\n\n  const outputArr = new Uint8Array(Module.HEAPU8.buffer, outputArrPtr, outputLen);\n  inputArr.set(input);\n\n  Module._emscripten_blake2b(inputArrPtr, inputLen, outputArrPtr, outputLen);\n\n  Module._free(inputArrPtr);\n\n  Module._free(outputArrPtr);\n\n  return Buffer.from(outputArr);\n}\n\nfunction hmac_sha512(initKey, inputs) {\n  validateBuffer(initKey);\n  validateArray(inputs);\n  inputs.map(validateBuffer);\n\n  const ctxLen = Module._emscripten_size_of_hmac_sha512_ctx();\n\n  const ctxArrPtr = Module._malloc(ctxLen);\n\n  const ctxArr = new Uint8Array(Module.HEAPU8.buffer, ctxArrPtr, ctxLen);\n  const initKeyLen = initKey.length;\n\n  const initKeyArrPtr = Module._malloc(initKeyLen);\n\n  const initKeyArr = new Uint8Array(Module.HEAPU8.buffer, initKeyArrPtr, initKeyLen);\n  const outputLen = 64;\n\n  const outputArrPtr = Module._malloc(outputLen);\n\n  const outputArr = new Uint8Array(Module.HEAPU8.buffer, outputArrPtr, outputLen);\n  initKeyArr.set(initKey);\n\n  Module._emscripten_hmac_sha512_init(ctxArrPtr, initKeyArrPtr, initKeyLen);\n\n  for (let i = 0; i < inputs.length; i++) {\n    const inputLen = inputs[i].length;\n\n    const inputArrPtr = Module._malloc(inputLen);\n\n    const inputArr = new Uint8Array(Module.HEAPU8.buffer, inputArrPtr, inputLen);\n    inputArr.set(inputs[i]);\n\n    Module._emscripten_hmac_sha512_update(ctxArrPtr, inputArrPtr, inputLen);\n\n    Module._free(inputArrPtr);\n  }\n\n  Module._emscripten_hmac_sha512_final(ctxArrPtr, outputArrPtr);\n\n  Module._free(initKeyArrPtr);\n\n  Module._free(ctxArrPtr);\n\n  Module._free(outputArrPtr);\n\n  return Buffer.from(outputArr);\n}\n\nfunction chacha20poly1305Encrypt(input, key, nonce) {\n  validateBuffer(input);\n  validateBuffer(key, 32);\n  validateBuffer(nonce, 12);\n  const inputLen = input.length;\n\n  const inputArrPtr = Module._malloc(inputLen);\n\n  const inputArr = new Uint8Array(Module.HEAPU8.buffer, inputArrPtr, inputLen);\n  const keyLen = key.length;\n\n  const keyArrPtr = Module._malloc(keyLen);\n\n  const keyArr = new Uint8Array(Module.HEAPU8.buffer, keyArrPtr, keyLen);\n  const nonceLen = nonce.length;\n\n  const nonceArrPtr = Module._malloc(nonceLen);\n\n  const nonceArr = new Uint8Array(Module.HEAPU8.buffer, nonceArrPtr, nonceLen);\n  const tagLen = 16;\n  const outputLen = inputLen + tagLen;\n\n  const outputArrPtr = Module._malloc(outputLen);\n\n  const outputArr = new Uint8Array(Module.HEAPU8.buffer, outputArrPtr, outputLen);\n  inputArr.set(input);\n  keyArr.set(key);\n  nonceArr.set(nonce);\n\n  const resultCode = Module._emscripten_chacha20poly1305_enc(keyArrPtr, nonceArrPtr, inputArrPtr, inputLen, outputArrPtr, outputArrPtr + inputLen, tagLen, 1);\n\n  Module._free(inputArrPtr);\n\n  Module._free(keyArrPtr);\n\n  Module._free(nonceArrPtr);\n\n  Module._free(outputArrPtr);\n\n  if (resultCode !== 0) {\n    throw Error('chacha20poly1305 encryption has failed!');\n  }\n\n  return Buffer.from(outputArr);\n}\n\nfunction chacha20poly1305Decrypt(input, key, nonce) {\n  validateBuffer(input);\n  validateBuffer(key, 32);\n  validateBuffer(nonce, 12); // extract tag from input\n\n  const tagLen = 16;\n  const tag = input.slice(input.length - tagLen, input.length);\n  input = input.slice(0, input.length - tagLen);\n  const inputLen = input.length;\n\n  const inputArrPtr = Module._malloc(inputLen);\n\n  const inputArr = new Uint8Array(Module.HEAPU8.buffer, inputArrPtr, inputLen);\n\n  const tagArrPtr = Module._malloc(tagLen);\n\n  const tagArr = new Uint8Array(Module.HEAPU8.buffer, tagArrPtr, tagLen);\n  const keyLen = key.length;\n\n  const keyArrPtr = Module._malloc(keyLen);\n\n  const keyArr = new Uint8Array(Module.HEAPU8.buffer, keyArrPtr, keyLen);\n  const nonceLen = nonce.length;\n\n  const nonceArrPtr = Module._malloc(nonceLen);\n\n  const nonceArr = new Uint8Array(Module.HEAPU8.buffer, nonceArrPtr, nonceLen);\n  const outputLen = inputLen;\n\n  const outputArrPtr = Module._malloc(outputLen);\n\n  const outputArr = new Uint8Array(Module.HEAPU8.buffer, outputArrPtr, outputLen);\n  inputArr.set(input);\n  tagArr.set(tag);\n  keyArr.set(key);\n  nonceArr.set(nonce);\n\n  const resultCode = Module._emscripten_chacha20poly1305_enc(keyArrPtr, nonceArrPtr, inputArrPtr, inputLen, outputArrPtr, tagArrPtr, tagLen, 0);\n\n  Module._free(inputArrPtr);\n\n  Module._free(keyArrPtr);\n\n  Module._free(nonceArrPtr);\n\n  Module._free(outputArrPtr);\n\n  Module._free(tagArrPtr);\n\n  if (resultCode !== 0) {\n    throw Error('chacha20poly1305 decryption has failed!');\n  }\n\n  return Buffer.from(outputArr);\n}\n\nfunction sha3_256(input) {\n  validateBuffer(input);\n  const inputLen = input.length;\n\n  const inputArrPtr = Module._malloc(inputLen);\n\n  const inputArr = new Uint8Array(Module.HEAPU8.buffer, inputArrPtr, inputLen);\n  const outputLen = 32;\n\n  const outputArrPtr = Module._malloc(outputLen);\n\n  const outputArr = new Uint8Array(Module.HEAPU8.buffer, outputArrPtr, outputLen);\n  inputArr.set(input);\n\n  Module._emscripten_sha3_256(inputArrPtr, inputLen, outputArrPtr);\n\n  Module._free(inputArrPtr);\n\n  Module._free(outputArrPtr);\n\n  return Buffer.from(outputArr);\n} // used for encoding/decoding seeds to JSON in Daedalus\n\n\nfunction cardanoMemoryCombine(input, password) {\n  validateBuffer(input);\n  validateString(password);\n\n  if (password === '') {\n    return input;\n  }\n\n  const transformedPassword = blake2b(Buffer.from(password, 'utf-8'), 32);\n  const transformedPasswordLen = transformedPassword.length;\n\n  const transformedPasswordArrPtr = Module._malloc(transformedPasswordLen);\n\n  const transformedPasswordArr = new Uint8Array(Module.HEAPU8.buffer, transformedPasswordArrPtr, transformedPasswordLen);\n  const inputLen = input.length;\n\n  const inputArrPtr = Module._malloc(inputLen);\n\n  const inputArr = new Uint8Array(Module.HEAPU8.buffer, inputArrPtr, inputLen);\n\n  const outputArrPtr = Module._malloc(inputLen);\n\n  const outputArr = new Uint8Array(Module.HEAPU8.buffer, outputArrPtr, inputLen);\n  inputArr.set(input);\n  transformedPasswordArr.set(transformedPassword);\n\n  Module._emscripten_cardano_memory_combine(transformedPasswordArrPtr, transformedPasswordLen, inputArrPtr, outputArrPtr, inputLen);\n\n  Module._free(inputArrPtr);\n\n  Module._free(outputArrPtr);\n\n  Module._free(transformedPasswordArrPtr);\n\n  return Buffer.from(outputArr);\n}\n\nmodule.exports = {\n  blake2b,\n  chacha20poly1305Decrypt,\n  chacha20poly1305Encrypt,\n  hmac_sha512,\n  sha3_256,\n  cardanoMemoryCombine\n};","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/NFT_minter/node_modules/cardano-crypto.js/features/crypto-primitives.js"],"names":["Module","require","validateBuffer","validateString","validateArray","blake2b","input","outputLen","inputLen","length","inputArrPtr","_malloc","inputArr","Uint8Array","HEAPU8","buffer","outputArrPtr","outputArr","set","_emscripten_blake2b","_free","Buffer","from","hmac_sha512","initKey","inputs","map","ctxLen","_emscripten_size_of_hmac_sha512_ctx","ctxArrPtr","ctxArr","initKeyLen","initKeyArrPtr","initKeyArr","_emscripten_hmac_sha512_init","i","_emscripten_hmac_sha512_update","_emscripten_hmac_sha512_final","chacha20poly1305Encrypt","key","nonce","keyLen","keyArrPtr","keyArr","nonceLen","nonceArrPtr","nonceArr","tagLen","resultCode","_emscripten_chacha20poly1305_enc","Error","chacha20poly1305Decrypt","tag","slice","tagArrPtr","tagArr","sha3_256","_emscripten_sha3_256","cardanoMemoryCombine","password","transformedPassword","transformedPasswordLen","transformedPasswordArrPtr","transformedPasswordArr","_emscripten_cardano_memory_combine","module","exports"],"mappings":"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","sourcesContent":["const Module = require('../lib.js')\n\nconst {validateBuffer, validateString, validateArray} = require(\"../utils/validation\")\n\nfunction blake2b(input, outputLen) {\n  validateBuffer(input)\n\n  const inputLen = input.length\n  const inputArrPtr = Module._malloc(inputLen)\n  const inputArr = new Uint8Array(Module.HEAPU8.buffer, inputArrPtr, inputLen)\n  const outputArrPtr = Module._malloc(outputLen)\n  const outputArr = new Uint8Array(Module.HEAPU8.buffer, outputArrPtr, outputLen)\n\n  inputArr.set(input)\n\n  Module._emscripten_blake2b(inputArrPtr, inputLen, outputArrPtr, outputLen)\n\n  Module._free(inputArrPtr)\n  Module._free(outputArrPtr)\n\n  return Buffer.from(outputArr)\n}\n\nfunction hmac_sha512(initKey, inputs) {\n  validateBuffer(initKey)\n  validateArray(inputs)\n  inputs.map(validateBuffer)\n\n  const ctxLen = Module._emscripten_size_of_hmac_sha512_ctx()\n  const ctxArrPtr = Module._malloc(ctxLen)\n  const ctxArr = new Uint8Array(Module.HEAPU8.buffer, ctxArrPtr, ctxLen)\n\n  const initKeyLen = initKey.length\n  const initKeyArrPtr = Module._malloc(initKeyLen)\n  const initKeyArr = new Uint8Array(Module.HEAPU8.buffer, initKeyArrPtr, initKeyLen)\n\n  const outputLen = 64\n  const outputArrPtr = Module._malloc(outputLen)\n  const outputArr = new Uint8Array(Module.HEAPU8.buffer, outputArrPtr, outputLen)\n\n  initKeyArr.set(initKey)\n\n  Module._emscripten_hmac_sha512_init(ctxArrPtr, initKeyArrPtr, initKeyLen)\n\n  for (let i = 0; i < inputs.length; i++) {\n    const inputLen = inputs[i].length\n    const inputArrPtr = Module._malloc(inputLen)\n    const inputArr = new Uint8Array(Module.HEAPU8.buffer, inputArrPtr, inputLen)\n\n    inputArr.set(inputs[i])\n\n    Module._emscripten_hmac_sha512_update(ctxArrPtr, inputArrPtr, inputLen)\n\n    Module._free(inputArrPtr)\n  }\n\n  Module._emscripten_hmac_sha512_final(ctxArrPtr, outputArrPtr)\n\n  Module._free(initKeyArrPtr)\n  Module._free(ctxArrPtr)\n  Module._free(outputArrPtr)\n\n  return Buffer.from(outputArr)\n}\n\n\nfunction chacha20poly1305Encrypt(input, key, nonce) {\n  validateBuffer(input)\n  validateBuffer(key, 32)\n  validateBuffer(nonce, 12)\n\n  const inputLen = input.length\n  const inputArrPtr = Module._malloc(inputLen)\n  const inputArr = new Uint8Array(Module.HEAPU8.buffer, inputArrPtr, inputLen)\n\n  const keyLen = key.length\n  const keyArrPtr = Module._malloc(keyLen)\n  const keyArr = new Uint8Array(Module.HEAPU8.buffer, keyArrPtr, keyLen)\n\n  const nonceLen = nonce.length\n  const nonceArrPtr = Module._malloc(nonceLen)\n  const nonceArr = new Uint8Array(Module.HEAPU8.buffer, nonceArrPtr, nonceLen)\n\n  const tagLen = 16\n  const outputLen = inputLen + tagLen\n  const outputArrPtr = Module._malloc(outputLen)\n  const outputArr = new Uint8Array(Module.HEAPU8.buffer, outputArrPtr, outputLen)\n\n  inputArr.set(input)\n  keyArr.set(key)\n  nonceArr.set(nonce)\n\n  const resultCode = Module._emscripten_chacha20poly1305_enc(keyArrPtr, nonceArrPtr, inputArrPtr, inputLen, outputArrPtr, outputArrPtr + inputLen, tagLen, 1)\n\n  Module._free(inputArrPtr)\n  Module._free(keyArrPtr)\n  Module._free(nonceArrPtr)\n  Module._free(outputArrPtr)\n\n  if (resultCode !== 0) {\n    throw Error('chacha20poly1305 encryption has failed!')\n  }\n\n  return Buffer.from(outputArr)\n}\n\nfunction chacha20poly1305Decrypt(input, key, nonce) {\n  validateBuffer(input)\n  validateBuffer(key, 32)\n  validateBuffer(nonce, 12)\n\n  // extract tag from input\n  const tagLen = 16\n  const tag = input.slice(input.length - tagLen, input.length)\n  input = input.slice(0, input.length - tagLen)\n\n  const inputLen = input.length\n  const inputArrPtr = Module._malloc(inputLen)\n  const inputArr = new Uint8Array(Module.HEAPU8.buffer, inputArrPtr, inputLen)\n\n  const tagArrPtr = Module._malloc(tagLen)\n  const tagArr = new Uint8Array(Module.HEAPU8.buffer, tagArrPtr, tagLen)\n\n  const keyLen = key.length\n  const keyArrPtr = Module._malloc(keyLen)\n  const keyArr = new Uint8Array(Module.HEAPU8.buffer, keyArrPtr, keyLen)\n\n  const nonceLen = nonce.length\n  const nonceArrPtr = Module._malloc(nonceLen)\n  const nonceArr = new Uint8Array(Module.HEAPU8.buffer, nonceArrPtr, nonceLen)\n\n  const outputLen = inputLen\n  const outputArrPtr = Module._malloc(outputLen)\n  const outputArr = new Uint8Array(Module.HEAPU8.buffer, outputArrPtr, outputLen)\n\n  inputArr.set(input)\n  tagArr.set(tag)\n  keyArr.set(key)\n  nonceArr.set(nonce)\n\n  const resultCode = Module._emscripten_chacha20poly1305_enc(keyArrPtr, nonceArrPtr, inputArrPtr, inputLen, outputArrPtr, tagArrPtr, tagLen, 0)\n\n  Module._free(inputArrPtr)\n  Module._free(keyArrPtr)\n  Module._free(nonceArrPtr)\n  Module._free(outputArrPtr)\n  Module._free(tagArrPtr)\n\n  if (resultCode !== 0) {\n    throw Error('chacha20poly1305 decryption has failed!')\n  }\n\n  return Buffer.from(outputArr)\n}\n\nfunction sha3_256(input) {\n  validateBuffer(input)\n  const inputLen = input.length\n  const inputArrPtr = Module._malloc(inputLen)\n  const inputArr = new Uint8Array(Module.HEAPU8.buffer, inputArrPtr, inputLen)\n\n  const outputLen = 32\n  const outputArrPtr = Module._malloc(outputLen)\n  const outputArr = new Uint8Array(Module.HEAPU8.buffer, outputArrPtr, outputLen)\n\n  inputArr.set(input)\n\n  Module._emscripten_sha3_256(inputArrPtr, inputLen, outputArrPtr)\n\n  Module._free(inputArrPtr)\n  Module._free(outputArrPtr)\n\n  return Buffer.from(outputArr)\n}\n\n// used for encoding/decoding seeds to JSON in Daedalus\nfunction cardanoMemoryCombine(input, password) {\n  validateBuffer(input)\n  validateString(password)\n\n  if (password === '') {\n    return input\n  }\n\n  const transformedPassword = blake2b(Buffer.from(password, 'utf-8'), 32)\n  const transformedPasswordLen = transformedPassword.length\n  const transformedPasswordArrPtr = Module._malloc(transformedPasswordLen)\n  const transformedPasswordArr = new Uint8Array(Module.HEAPU8.buffer, transformedPasswordArrPtr, transformedPasswordLen)\n\n  const inputLen = input.length\n  const inputArrPtr = Module._malloc(inputLen)\n  const inputArr = new Uint8Array(Module.HEAPU8.buffer, inputArrPtr, inputLen)\n\n  const outputArrPtr = Module._malloc(inputLen)\n  const outputArr = new Uint8Array(Module.HEAPU8.buffer, outputArrPtr, inputLen)\n\n  inputArr.set(input)\n  transformedPasswordArr.set(transformedPassword)\n\n  Module._emscripten_cardano_memory_combine(transformedPasswordArrPtr, transformedPasswordLen, inputArrPtr, outputArrPtr, inputLen)\n\n  Module._free(inputArrPtr)\n  Module._free(outputArrPtr)\n  Module._free(transformedPasswordArrPtr)\n\n  return Buffer.from(outputArr)\n}\n\nmodule.exports = {\n  blake2b,\n  chacha20poly1305Decrypt,\n  chacha20poly1305Encrypt,\n  hmac_sha512,\n  sha3_256,\n  cardanoMemoryCombine,\n}\n"]},"metadata":{},"sourceType":"script"}