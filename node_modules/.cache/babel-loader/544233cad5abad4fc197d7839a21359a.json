{"ast":null,"code":"import { utils, Wallet } from \"ethers\";\nimport { serializeCeloTransaction } from \"./transactions\";\nconst logger = new utils.Logger(\"CeloWallet\");\nconst forwardErrors = [utils.Logger.errors.INSUFFICIENT_FUNDS, utils.Logger.errors.NONCE_EXPIRED, utils.Logger.errors.REPLACEMENT_UNDERPRICED];\nexport class CeloWallet extends Wallet {\n  /**\n   * Override to skip checkTransaction step which rejects Celo tx properties\n   * https://github.com/ethers-io/ethers.js/blob/master/packages/abstract-signer/src.ts/index.ts\n   */\n  async populateTransaction(transaction) {\n    const tx = await utils.resolveProperties(transaction);\n\n    if (tx.to != null) {\n      tx.to = Promise.resolve(tx.to).then(to => this.resolveName(to));\n    }\n\n    if (tx.gasPrice == null) {\n      tx.gasPrice = this.getGasPrice();\n    }\n\n    if (tx.nonce == null) {\n      tx.nonce = this.getTransactionCount(\"pending\");\n    }\n\n    if (tx.gasLimit == null) {\n      tx.gasLimit = this.estimateGas(tx).catch(error => {\n        if (forwardErrors.indexOf(error.code) >= 0) {\n          throw error;\n        }\n\n        return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", utils.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n          error: error,\n          tx: tx\n        });\n      });\n    }\n\n    if (tx.chainId == null) {\n      tx.chainId = this.getChainId();\n    } else {\n      tx.chainId = Promise.all([Promise.resolve(tx.chainId), this.getChainId()]).then(results => {\n        if (results[1] !== 0 && results[0] !== results[1]) {\n          logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n        }\n\n        return results[0];\n      });\n    }\n\n    return await utils.resolveProperties(tx);\n  }\n  /**\n   * Override to serialize transaction using custom serialize method\n   * https://github.com/ethers-io/ethers.js/blob/master/packages/wallet/src.ts/index.ts\n   */\n\n\n  async signTransaction(transaction) {\n    const populatedTx = await this.populateTransaction(transaction);\n    const tx = await utils.resolveProperties(populatedTx);\n\n    if (tx.from != null) {\n      if (utils.getAddress(tx.from) !== this.address) {\n        logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n      }\n\n      delete tx.from;\n    }\n\n    const signature = this._signingKey().signDigest(utils.keccak256(serializeCeloTransaction(tx)));\n\n    const serialized = serializeCeloTransaction(tx, signature);\n    return serialized;\n  }\n  /**\n   * Override just for type fix\n   * https://github.com/ethers-io/ethers.js/blob/master/packages/wallet/src.ts/index.ts\n   */\n\n\n  sendTransaction(transaction) {\n    return super.sendTransaction(transaction);\n  }\n  /**\n   * Override to skip checkTransaction step which rejects Celo tx properties\n   * https://github.com/ethers-io/ethers.js/blob/master/packages/abstract-signer/src.ts/index.ts\n   */\n\n\n  async estimateGas(transaction) {\n    this._checkProvider(\"estimateGas\");\n\n    const tx = await utils.resolveProperties(transaction);\n    return await this.provider.estimateGas(tx);\n  }\n  /**\n   * Override to support alternative gas currencies\n   * https://github.com/celo-tools/ethers.js/blob/master/packages/abstract-signer/src.ts/index.ts\n   */\n\n\n  async getGasPrice(feeCurrencyAddress) {\n    this._checkProvider(\"getGasPrice\"); // @ts-ignore\n\n\n    return await this.provider.getGasPrice(feeCurrencyAddress);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["utils","Wallet","serializeCeloTransaction","logger","Logger","forwardErrors","errors","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","CeloWallet","populateTransaction","transaction","tx","resolveProperties","to","Promise","resolve","then","resolveName","gasPrice","getGasPrice","nonce","getTransactionCount","gasLimit","estimateGas","catch","error","indexOf","code","throwError","UNPREDICTABLE_GAS_LIMIT","chainId","getChainId","all","results","throwArgumentError","signTransaction","populatedTx","from","getAddress","address","signature","_signingKey","signDigest","keccak256","serialized","sendTransaction","_checkProvider","provider","feeCurrencyAddress"],"sourceRoot":"","sources":["../../../src/lib/CeloWallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}