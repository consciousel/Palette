{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendAddMultiTokenMinter = exports.prepareAddMultiTokenMinter = exports.transferMultiTokenBatch = exports.transferMultiToken = exports.burnMultiTokenBatch = exports.burnMultiToken = exports.mintMultiTokenBatch = exports.mintMultiToken = exports.deployMultiToken = exports.getMultiTokenMetadata = exports.getMultiTokenTransaction = exports.getMultiTokensBatchBalance = exports.getMultiTokensBalance = exports.getMultiTokenContractAddress = void 0;\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst erc1155_abi_1 = __importDefault(require(\"../contracts/erc1155/erc1155_abi\"));\n\nconst helpers_1 = require(\"../helpers\");\n\nconst model_1 = require(\"../model\");\n\nconst transaction_1 = require(\"../transaction\");\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/MultiTokenGetContractAddress\" target=\"_blank\">Tatum API documentation</a>\n */\n\n\nconst getMultiTokenContractAddress = async (chain, txId) => tatum_1.get(`/v3/multitoken/address/${chain}/${txId}`);\n\nexports.getMultiTokenContractAddress = getMultiTokenContractAddress;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/MultiTokenGetBalanceBatch\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst getMultiTokensBalance = async (chain, contractAddress, address, tokenId) => tatum_1.get(`/v3/multitoken/balance/${chain}/${contractAddress}/${address}/${tokenId}`);\n\nexports.getMultiTokensBalance = getMultiTokensBalance;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/MultiTokenGetBalance\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst getMultiTokensBatchBalance = async (chain, contractAddress, address, tokenIds) => tatum_1.get(`/v3/multitoken/balance/batch/${chain}/${contractAddress}?address=${address}&tokenId=${tokenIds}`);\n\nexports.getMultiTokensBatchBalance = getMultiTokensBatchBalance;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/MultiTokenGetTransaction\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst getMultiTokenTransaction = async (chain, txId) => tatum_1.get(`/v3/multitoken/transaction/${chain}/${txId}`);\n\nexports.getMultiTokenTransaction = getMultiTokenTransaction;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/MultiTokenGetMetadata\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst getMultiTokenMetadata = async (chain, contractAddress, tokenId) => tatum_1.get(`/v3/multitoken/metadata/${chain}/${contractAddress}/${tokenId}`);\n\nexports.getMultiTokenMetadata = getMultiTokenMetadata;\n/**\n * Deploy MultiTokens (1155) contract.\n * @param testnet if we use testnet or not\n * @param body body of the request\n * @param provider optional provider do broadcast tx\n */\n\nconst deployMultiToken = async (testnet, body, provider) => {\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      return transaction_1.sendCeloDeployMultiTokenTransaction(testnet, body, provider);\n\n    case model_1.Currency.MATIC:\n      return transaction_1.sendPolygonDeployMultiTokenSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.KLAY:\n      return transaction_1.sendKlaytnDeployMultiTokenSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.ONE:\n      return transaction_1.sendOneDeployMultiTokenSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.ETH:\n      return transaction_1.sendEthDeployMultiTokenTransaction(body, provider);\n\n    case model_1.Currency.BSC:\n      return transaction_1.sendBscDeployMultiTokenTransaction(body, provider);\n  }\n};\n\nexports.deployMultiToken = deployMultiToken;\n/**\n * Mint MultiTokens (1155)\n * @param testnet if we use testnet or not\n * @param body body of the request\n * @param provider optional provider do broadcast tx\n */\n\nconst mintMultiToken = async (testnet, body, provider) => {\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      return transaction_1.sendCeloMintMultiTokenTransaction(testnet, body, provider);\n\n    case model_1.Currency.ETH:\n      return transaction_1.sendEthMintMultiTokenTransaction(body, provider);\n\n    case model_1.Currency.MATIC:\n      return transaction_1.sendPolygonMintMultiTokenSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.KLAY:\n      return transaction_1.sendKlaytnMintMultiTokenSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.ONE:\n      return transaction_1.sendOneMintMultiTokenSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.BSC:\n      return transaction_1.sendBscMintMultiTokenTransaction(body, provider);\n\n    case model_1.Currency.ALGO:\n      return transaction_1.sendAlgoCreateFractionalNFTSignedTransaction(testnet, body, provider);\n  }\n};\n\nexports.mintMultiToken = mintMultiToken;\n/**\n * Mint MultiTokens (1155) in a batch call.\n * @param testnet if we use testnet or not\n * @param body body of the request\n * @param provider optional provider do broadcast tx\n */\n\nconst mintMultiTokenBatch = async (testnet, body, provider) => {\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      return transaction_1.sendCeloMintMultiTokenBatchTransaction(testnet, body, provider);\n\n    case model_1.Currency.ETH:\n      return transaction_1.sendEthMintMultiTokenBatchTransaction(body, provider);\n\n    case model_1.Currency.MATIC:\n      return transaction_1.sendPolygonMintMultiTokenBatchSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.KLAY:\n      return transaction_1.sendKlaytnMintMultiTokenBatchSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.ONE:\n      return transaction_1.sendOneMintMultiTokenBatchSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.BSC:\n      return transaction_1.sendBscMintMultiTokenBatchTransaction(body, provider);\n  }\n};\n\nexports.mintMultiTokenBatch = mintMultiTokenBatch;\n/**\n * Burn MultiTokens (1155).\n * @param testnet if we use testnet or not\n * @param body body of the request\n * @param provider optional provider do broadcast tx\n */\n\nconst burnMultiToken = async (testnet, body, provider) => {\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      return transaction_1.sendCeloBurnMultiTokenTransaction(testnet, body, provider);\n\n    case model_1.Currency.ETH:\n      return transaction_1.sendEthBurnMultiTokenTransaction(body, provider);\n\n    case model_1.Currency.MATIC:\n      return transaction_1.sendPolygonBurnMultiTokenSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.KLAY:\n      return transaction_1.sendKlaytnBurnMultiTokenSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.ONE:\n      return transaction_1.sendOneBurnMultiTokenSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.BSC:\n      return transaction_1.sendBscBurnMultiTokenTransaction(body, provider);\n\n    case model_1.Currency.ALGO:\n      return transaction_1.sendAlgoBurnFractionalNFTSignedTransaction(testnet, body, provider);\n  }\n};\n\nexports.burnMultiToken = burnMultiToken;\n/**\n * Burn MultiTokens (1155) in a batch call.\n * @param testnet if we use testnet or not\n * @param body body of the request\n * @param provider optional provider do broadcast tx\n */\n\nconst burnMultiTokenBatch = async (testnet, body, provider) => {\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      return transaction_1.sendCeloBurnMultiTokenBatchTransaction(testnet, body, provider);\n\n    case model_1.Currency.ETH:\n      return transaction_1.sendEthBurnBatchMultiTokenTransaction(body, provider);\n\n    case model_1.Currency.MATIC:\n      return transaction_1.sendPolygonBurnMultiTokenBatchSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.KLAY:\n      return transaction_1.sendKlaytnBurnMultiTokenBatchSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.ONE:\n      return transaction_1.sendOneBurnMultiTokenBatchSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.BSC:\n      return transaction_1.sendBscBurnBatchMultiTokenTransaction(body, provider);\n  }\n};\n\nexports.burnMultiTokenBatch = burnMultiTokenBatch;\n/**\n * Transfer MultiTokens (1155).\n * @param testnet if we use testnet or not\n * @param body body of the request\n * @param provider optional provider do broadcast tx\n */\n\nconst transferMultiToken = async (testnet, body, provider) => {\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      return transaction_1.sendCeloTransferMultiTokenTransaction(testnet, body, provider);\n\n    case model_1.Currency.ETH:\n      return transaction_1.sendEthMultiTokenTransaction(body, provider);\n\n    case model_1.Currency.MATIC:\n      return transaction_1.sendPolygonTransferMultiTokenSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.KLAY:\n      return transaction_1.sendKlaytnTransferMultiTokenSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.ONE:\n      return transaction_1.sendOneTransferMultiTokenSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.BSC:\n      return transaction_1.sendBscMultiTokenTransaction(body, provider);\n\n    case model_1.Currency.ALGO:\n      return transaction_1.sendAlgoTransferFractionalNFTSignedTransaction(testnet, body, provider);\n  }\n};\n\nexports.transferMultiToken = transferMultiToken;\n/**\n * Transfer MultiTokens (1155) in a batch call.\n * @param testnet if we use testnet or not\n * @param body body of the request\n * @param provider optional provider do broadcast tx\n */\n\nconst transferMultiTokenBatch = async (testnet, body, provider) => {\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      return transaction_1.sendCeloTransferMultiTokenBatchTransaction(testnet, body, provider);\n\n    case model_1.Currency.ETH:\n      return transaction_1.sendEthMultiTokenBatchTransaction(body, provider);\n\n    case model_1.Currency.MATIC:\n      return transaction_1.preparePolygonBatchTransferMultiTokenSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.KLAY:\n      return transaction_1.prepareKlaytnBatchTransferMultiTokenSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.ONE:\n      return transaction_1.prepareOneBatchTransferMultiTokenSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.BSC:\n      return transaction_1.sendBscMultiTokenBatchTransaction(body, provider);\n  }\n};\n\nexports.transferMultiTokenBatch = transferMultiTokenBatch;\n/**\n * Prepare add new minter to the MultiToken (1155) contract transaction.\n * @param testnet if we use testnet or not\n * @param body body of the add minter request\n * @param provider optional provider do broadcast tx\n */\n\nconst prepareAddMultiTokenMinter = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.AddMinter);\n  const params = ['0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6', body.minter];\n  return await helpers_1.helperPrepareSCCall(testnet, body, model_1.AddMinter, 'grantRole', params, undefined, provider, erc1155_abi_1.default);\n};\n\nexports.prepareAddMultiTokenMinter = prepareAddMultiTokenMinter;\n/**\n * Add new minter to the MultiToken (1155) contract.\n * @param testnet if we use testnet or not\n * @param body body of the add minter request\n * @param provider optional provider do broadcast tx\n */\n\nconst sendAddMultiTokenMinter = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAddMultiTokenMinter(testnet, body, provider), body.signatureId);\n\nexports.sendAddMultiTokenMinter = sendAddMultiTokenMinter;","map":{"version":3,"mappings":"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","names":["getMultiTokenContractAddress","chain","txId","tatum_1","exports","getMultiTokensBalance","contractAddress","address","tokenId","getMultiTokensBatchBalance","tokenIds","getMultiTokenTransaction","getMultiTokenMetadata","deployMultiToken","testnet","body","provider","model_1","CELO","transaction_1","MATIC","KLAY","ONE","ETH","BSC","mintMultiToken","ALGO","mintMultiTokenBatch","burnMultiToken","burnMultiTokenBatch","transferMultiToken","transferMultiTokenBatch","prepareAddMultiTokenMinter","params","minter","helpers_1","undefined","erc1155_abi_1","sendAddMultiTokenMinter","signatureId"],"sourceRoot":"","sources":["../../../src/multiToken/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}