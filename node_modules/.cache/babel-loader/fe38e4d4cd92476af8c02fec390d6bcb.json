{"ast":null,"code":"'use strict';\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return async function* refsLocal() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await api.post('refs/local', {\n      timeout: options.timeout,\n      signal: options.signal,\n      transform: toCamel,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    });\n    yield* res.ndjson();\n  };\n});","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/NFT_minter/node_modules/caver-js/node_modules/ipfs-http-client/src/refs/local.js"],"names":["toCamel","require","configure","toUrlSearchParams","module","exports","api","refsLocal","options","res","post","timeout","signal","transform","searchParams","headers","ndjson"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC,SAAO,gBAAiBC,SAAjB,GAA0C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC/C,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,YAAT,EAAuB;AACvCC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OADsB;AAEvCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFuB;AAGvCC,MAAAA,SAAS,EAAEb,OAH4B;AAIvCc,MAAAA,YAAY,EAAEX,iBAAiB,CAACK,OAAD,CAJQ;AAKvCO,MAAAA,OAAO,EAAEP,OAAO,CAACO;AALsB,KAAvB,CAAlB;AAQA,WAAQN,GAAG,CAACO,MAAJ,EAAR;AACD,GAVD;AAWD,CAZyB,CAA1B","sourcesContent":["'use strict'\n\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async function * refsLocal (options = {}) {\n    const res = await api.post('refs/local', {\n      timeout: options.timeout,\n      signal: options.signal,\n      transform: toCamel,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    yield * res.ndjson()\n  }\n})\n"]},"metadata":{},"sourceType":"script"}