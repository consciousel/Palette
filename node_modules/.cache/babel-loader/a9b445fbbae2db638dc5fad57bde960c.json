{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HTTP = exports.Method = void 0;\n\nconst XHR2 = require('xhr2');\n\nvar Method;\n\n(function (Method) {\n  Method[Method[\"GET\"] = 0] = \"GET\";\n  Method[Method[\"POST\"] = 1] = \"POST\";\n})(Method = exports.Method || (exports.Method = {}));\n\nconst post = function (url, body) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return request(Method.POST, url, body, timeout);\n};\n\nconst get = function (url) {\n  let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return request(Method.GET, url, null, timeout);\n};\n\nexports.HTTP = {\n  get,\n  post\n};\n\nconst request = function (method, url, body, timeout) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XHR2();\n    xhr.timeout = timeout;\n    xhr.open(Method[method], url);\n\n    if (method === Method.POST) {\n      xhr.setRequestHeader('Content-Type', 'application/json');\n    }\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        const res = {\n          Code: xhr.status,\n          Body: null\n        };\n\n        if (xhr.status === 200) {\n          try {\n            res.Body = JSON.parse(xhr.responseText);\n          } catch (e) {\n            return reject(new Error(`[thor-provider]Error parsing the response: ${e.message}`));\n          }\n        } else if (xhr.responseText && xhr.responseText.length) {\n          res.Body = xhr.responseText;\n        }\n\n        return resolve(res);\n      }\n    };\n\n    xhr.ontimeout = () => {\n      return reject(new Error(`[thor-provider]Time out for whatever reason, check your provider`));\n    };\n\n    try {\n      xhr.send(method === Method.POST ? JSON.stringify(body) : null);\n    } catch (e) {\n      return reject(new Error(`[thor-provider]Connect error: ${e.message}`));\n    }\n  });\n};","map":{"version":3,"mappings":"AAAA;;;;;;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAQA,IAAYC,MAAZ;;AAAA,WAAYA,MAAZ,EAAkB;AACdA;AACAA;AACH,CAHD,EAAYA,MAAM,GAANC,oCAAM,EAAN,CAAZ;;AAKA,MAAMC,IAAI,GAAG,UAASC,GAAT,EAAsBC,IAAtB,EAA8C;AAAA,MAAVC,OAAU,uEAAD,CAAC;AACvD,SAAOC,OAAO,CAACN,MAAM,CAACO,IAAR,EAAcJ,GAAd,EAAmBC,IAAnB,EAAyBC,OAAzB,CAAd;AACH,CAFD;;AAIA,MAAMG,GAAG,GAAG,UAASL,GAAT,EAAiC;AAAA,MAAXE,OAAW,uEAAD,CAAC;AACzC,SAAOC,OAAO,CAACN,MAAM,CAACS,GAAR,EAAaN,GAAb,EAAkB,IAAlB,EAAwBE,OAAxB,CAAd;AACH,CAFD;;AAIaJ,eAAO;AAACO,KAAD;AAAMN;AAAN,CAAP;;AAEb,MAAMI,OAAO,GAAG,UAASI,MAAT,EAAyBP,GAAzB,EAAsCC,IAAtC,EAA2DC,OAA3D,EAA0E;AAEtF,SAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;AACnC,UAAMC,GAAG,GAAG,IAAIhB,IAAJ,EAAZ;AACAgB,OAAG,CAACT,OAAJ,GAAcA,OAAd;AACAS,OAAG,CAACC,IAAJ,CAASf,MAAM,CAACU,MAAD,CAAf,EAAyBP,GAAzB;;AACA,QAAIO,MAAM,KAAKV,MAAM,CAACO,IAAtB,EAA4B;AACxBO,SAAG,CAACE,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACH;;AAEDF,OAAG,CAACG,kBAAJ,GAAyB,MAAK;AAC1B,UAAIH,GAAG,CAACI,UAAJ,KAAmB,CAAvB,EAA0B;AACtB,cAAMC,GAAG,GAAmB;AACxBC,cAAI,EAAEN,GAAG,CAACO,MADc;AAExBC,cAAI,EAAE;AAFkB,SAA5B;;AAKA,YAAIR,GAAG,CAACO,MAAJ,KAAe,GAAnB,EAAwB;AACpB,cAAI;AACAF,eAAG,CAACG,IAAJ,GAAWC,IAAI,CAACC,KAAL,CAAWV,GAAG,CAACW,YAAf,CAAX;AACH,WAFD,CAEE,OAAOC,CAAP,EAAU;AACR,mBAAOb,MAAM,CAAC,IAAIc,KAAJ,CAAU,8CAA8CD,CAAC,CAACE,OAAO,EAAjE,CAAD,CAAb;AACH;AACJ,SAND,MAMO,IAAId,GAAG,CAACW,YAAJ,IAAoBX,GAAG,CAACW,YAAJ,CAAiBI,MAAzC,EAAiD;AACpDV,aAAG,CAACG,IAAJ,GAAWR,GAAG,CAACW,YAAf;AACH;;AAED,eAAOb,OAAO,CAACO,GAAD,CAAd;AACH;AACJ,KAnBD;;AAqBAL,OAAG,CAACgB,SAAJ,GAAgB,MAAK;AACjB,aAAOjB,MAAM,CAAC,IAAIc,KAAJ,CAAU,kEAAV,CAAD,CAAb;AACH,KAFD;;AAIA,QAAI;AACAb,SAAG,CAACiB,IAAJ,CAASrB,MAAM,KAAKV,MAAM,CAACO,IAAlB,GAAyBgB,IAAI,CAACS,SAAL,CAAe5B,IAAf,CAAzB,GAAgD,IAAzD;AACH,KAFD,CAEE,OAAOsB,CAAP,EAAU;AACR,aAAOb,MAAM,CAAC,IAAIc,KAAJ,CAAU,iCAAiCD,CAAC,CAACE,OAAO,EAApD,CAAD,CAAb;AACH;AACJ,GAtCM,CAAP;AAuCH,CAzCD","names":["XHR2","require","Method","exports","post","url","body","timeout","request","POST","get","GET","method","Promise","resolve","reject","xhr","open","setRequestHeader","onreadystatechange","readyState","res","Code","status","Body","JSON","parse","responseText","e","Error","message","length","ontimeout","send","stringify"],"sourceRoot":"","sources":["../../src/provider/simple-http.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}