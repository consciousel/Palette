{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StrictChecker = void 0;\n\nconst errors = __importStar(require(\"../errors\"));\n/**\n * An interaction checker that aims to be as strict as possible.\n * It is designed to catch programmer errors such as:\n *  - incorrect types of contract call arguments\n *  - errors related to calling \"non-payable\" functions with some value provided\n *  - gas estimation errors (not yet implemented)\n */\n\n\nclass StrictChecker {\n  checkInteraction(interaction) {\n    let definition = interaction.getEndpoint();\n    this.checkPayable(interaction, definition);\n    this.checkArguments(interaction, definition);\n  }\n\n  checkPayable(interaction, definition) {\n    let hasValue = interaction.getValue().isSet();\n    let isPayableInEGLD = definition.modifiers.isPayableInEGLD();\n\n    if (hasValue && !isPayableInEGLD) {\n      throw new errors.ErrContractInteraction(\"cannot send EGLD value to non-payable\");\n    }\n  }\n\n  checkArguments(interaction, definition) {\n    let formalArguments = definition.input;\n    let actualArguments = interaction.getArguments();\n    let numFormalArguments = formalArguments.length;\n    let numActualArguments = actualArguments.length;\n\n    if (numFormalArguments != numActualArguments) {\n      throw new errors.ErrContractInteraction(`bad arguments, expected: ${numFormalArguments}, got: ${numActualArguments}`);\n    } // TODO: discuss again, possibly redesign the handling of covariance / contravariance.\n\n\n    for (let i = 0; i < numFormalArguments; i++) {\n      let expectedType = formalArguments[i].type;\n      let argument = actualArguments[i];\n      let actualType = argument.getType(); // isAssignableFrom() is responsible to handle covariance and contravariance (depending on the class that overrides it).\n\n      let ok = expectedType.isAssignableFrom(actualType);\n\n      if (!ok) {\n        throw new errors.ErrContractInteraction(`type mismatch at index ${i}, expected: ${expectedType}, got: ${actualType}`);\n      }\n    }\n  }\n\n}\n\nexports.StrictChecker = StrictChecker;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAKA;;;;;;;;;AAOA,MAAaA,aAAb,CAA0B;AACtBC,kBAAgB,CAACC,WAAD,EAAyB;AACrC,QAAIC,UAAU,GAAGD,WAAW,CAACE,WAAZ,EAAjB;AAEA,SAAKC,YAAL,CAAkBH,WAAlB,EAA+BC,UAA/B;AACA,SAAKG,cAAL,CAAoBJ,WAApB,EAAiCC,UAAjC;AACH;;AAEOE,cAAY,CAACH,WAAD,EAA2BC,UAA3B,EAAyD;AACzE,QAAII,QAAQ,GAAGL,WAAW,CAACM,QAAZ,GAAuBC,KAAvB,EAAf;AACA,QAAIC,eAAe,GAAGP,UAAU,CAACQ,SAAX,CAAqBD,eAArB,EAAtB;;AAEA,QAAIH,QAAQ,IAAI,CAACG,eAAjB,EAAkC;AAC9B,YAAM,IAAIE,MAAM,CAACC,sBAAX,CAAkC,uCAAlC,CAAN;AACH;AACJ;;AAEOP,gBAAc,CAACJ,WAAD,EAA2BC,UAA3B,EAAyD;AAC3E,QAAIW,eAAe,GAAGX,UAAU,CAACY,KAAjC;AACA,QAAIC,eAAe,GAAGd,WAAW,CAACe,YAAZ,EAAtB;AACA,QAAIC,kBAAkB,GAAGJ,eAAe,CAACK,MAAzC;AACA,QAAIC,kBAAkB,GAAGJ,eAAe,CAACG,MAAzC;;AAEA,QAAID,kBAAkB,IAAIE,kBAA1B,EAA8C;AAC1C,YAAM,IAAIR,MAAM,CAACC,sBAAX,CAAkC,4BAA4BK,kBAAkB,UAAUE,kBAAkB,EAA5G,CAAN;AACH,KAR0E,CAU3E;;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,kBAApB,EAAwCG,CAAC,EAAzC,EAA6C;AACzC,UAAIC,YAAY,GAAGR,eAAe,CAACO,CAAD,CAAf,CAAmBE,IAAtC;AACA,UAAIC,QAAQ,GAAGR,eAAe,CAACK,CAAD,CAA9B;AACA,UAAII,UAAU,GAAGD,QAAQ,CAACE,OAAT,EAAjB,CAHyC,CAIzC;;AACA,UAAIC,EAAE,GAAGL,YAAY,CAACM,gBAAb,CAA8BH,UAA9B,CAAT;;AAEA,UAAI,CAACE,EAAL,EAAS;AACL,cAAM,IAAIf,MAAM,CAACC,sBAAX,CAAkC,0BAA0BQ,CAAC,eAAeC,YAAY,UAAUG,UAAU,EAA5G,CAAN;AACH;AACJ;AACJ;;AAxCqB;;AAA1BI","names":["StrictChecker","checkInteraction","interaction","definition","getEndpoint","checkPayable","checkArguments","hasValue","getValue","isSet","isPayableInEGLD","modifiers","errors","ErrContractInteraction","formalArguments","input","actualArguments","getArguments","numFormalArguments","length","numActualArguments","i","expectedType","type","argument","actualType","getType","ok","isAssignableFrom","exports"],"sourceRoot":"","sources":["../../src/smartcontracts/strictChecker.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}