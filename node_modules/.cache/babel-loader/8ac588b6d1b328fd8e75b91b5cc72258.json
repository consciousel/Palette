{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prepareBitcoinCashSignedOffchainTransaction = exports.signBitcoinCashOffchainKMSTransaction = exports.sendBitcoinCashOffchainTransaction = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\")); // @ts-ignore\n\n\nconst coininfo_1 = __importDefault(require(\"coininfo\"));\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst model_1 = require(\"../model\");\n\nconst wallet_1 = require(\"../wallet\");\n\nconst common_1 = require(\"./common\");\n\nconst kms_1 = require(\"./kms\"); // tslint:disable-next-line:no-var-requires\n\n\nconst bcash = require('@tatumio/bitcoincashjs2-lib');\n/**\n * Send Bitcoin Cash transaction from Tatum Ledger account to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain or id of the withdrawal, if it was not cancelled automatically\n */\n\n\nconst sendBitcoinCashOffchainTransaction = async (testnet, body) => {\n  if (body.signatureId) {\n    return kms_1.offchainTransferBcashKMS(body);\n  }\n\n  await tatum_1.validateBody(body, model_1.TransferBtcBasedOffchain);\n\n  const {\n    mnemonic,\n    keyPair,\n    attr: changeAddress\n  } = body,\n        withdrawal = __rest(body, [\"mnemonic\", \"keyPair\", \"attr\"]);\n\n  if (!withdrawal.fee) {\n    withdrawal.fee = '0.00005';\n  }\n\n  const {\n    id,\n    data\n  } = await common_1.offchainStoreWithdrawal(withdrawal);\n  const {\n    amount,\n    address\n  } = withdrawal;\n  let txData;\n\n  try {\n    txData = await exports.prepareBitcoinCashSignedOffchainTransaction(testnet, data, amount, address, mnemonic, keyPair, changeAddress, withdrawal.multipleAmounts);\n  } catch (e) {\n    console.error(e);\n    await common_1.offchainCancelWithdrawal(id);\n    throw e;\n  }\n\n  try {\n    return Object.assign(Object.assign({}, await common_1.offchainBroadcast({\n      txData,\n      withdrawalId: id,\n      currency: model_1.Currency.BCH\n    })), {\n      id\n    });\n  } catch (e) {\n    console.error(e);\n\n    try {\n      await common_1.offchainCancelWithdrawal(id);\n    } catch (e1) {\n      console.log(e);\n      return {\n        id\n      };\n    }\n\n    throw e;\n  }\n};\n\nexports.sendBitcoinCashOffchainTransaction = sendBitcoinCashOffchainTransaction;\n/**\n * Sign Bitcoin Cash pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param mnemonic mnemonic to generate private keys to sign transaction with.\n * @param testnet mainnet or testnet version\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst signBitcoinCashOffchainKMSTransaction = async (tx, mnemonic, testnet) => {\n  var _a;\n\n  if (tx.chain !== model_1.Currency.BCH || !tx.withdrawalResponses) {\n    throw Error('Unsupported chain.');\n  }\n\n  const [data, amountsToDecode] = tx.serializedTransaction.split(':');\n  const transaction = bcash.Transaction.fromHex(data);\n  const amountsToSign = JSON.parse(amountsToDecode);\n  const network = testnet ? coininfo_1.default.bitcoincash.test.toBitcoinJS() : coininfo_1.default.bitcoincash.main.toBitcoinJS();\n  const builder = bcash.TransactionBuilder.fromTransaction(transaction, network);\n\n  for (const [i, response] of tx.withdrawalResponses.entries()) {\n    if (response.vIn === '-1') {\n      continue;\n    }\n\n    const ecPair = bcash.ECPair.fromWIF(await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.BCH, testnet, mnemonic, ((_a = response.address) === null || _a === void 0 ? void 0 : _a.derivationKey) || 0), network);\n    builder.sign(i, ecPair, undefined, 0x01, amountsToSign[i], undefined, bcash.ECSignature.SCHNORR);\n  }\n\n  return builder.build().toHex();\n};\n\nexports.signBitcoinCashOffchainKMSTransaction = signBitcoinCashOffchainKMSTransaction;\n\nconst getAddress = address => {\n  try {\n    return wallet_1.toLegacyAddress(address);\n  } catch (e) {\n    return address;\n  }\n};\n/**\n * Sign Bitcoin Cash transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param data data from Tatum system to prepare transaction from\n * @param amount amount to send\n * @param address recipient address, if multiple recipients are present, it should be string separated by ','\n * @param mnemonic mnemonic to sign transaction from. mnemonic or keyPair must be present\n * @param keyPair keyPair to sign transaction from. keyPair or mnemonic must be present\n * @param changeAddress address to send the rest of the unused coins\n * @param multipleAmounts if multiple recipients are present in the address separated by ',', this should be list of amounts to send\n * @returns transaction data to be broadcast to blockchain.\n */\n\n\nconst prepareBitcoinCashSignedOffchainTransaction = async (testnet, data, amount, address, mnemonic, keyPair, changeAddress, multipleAmounts) => {\n  const network = testnet ? coininfo_1.default.bitcoincash.test.toBitcoinJS() : coininfo_1.default.bitcoincash.main.toBitcoinJS();\n  const tx = new bcash.TransactionBuilder(network);\n  data.forEach(input => {\n    if (input.vIn !== '-1') {\n      tx.addInput(input.vIn, input.vInIndex, 0xffffffff, null);\n    }\n  });\n  const lastVin = data.find(d => d.vIn === '-1');\n\n  if (multipleAmounts === null || multipleAmounts === void 0 ? void 0 : multipleAmounts.length) {\n    for (const [i, multipleAmount] of multipleAmounts.entries()) {\n      tx.addOutput(getAddress(address.split(',')[i]), Number(new bignumber_js_1.default(multipleAmount).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR)));\n    }\n  } else {\n    tx.addOutput(getAddress(address), Number(new bignumber_js_1.default(amount).multipliedBy(100000000).toFixed(0, bignumber_js_1.default.ROUND_FLOOR)));\n  }\n\n  if (new bignumber_js_1.default(lastVin.amount).isGreaterThan(0)) {\n    if (mnemonic && !changeAddress) {\n      const {\n        xpub\n      } = await wallet_1.generateBchWallet(testnet, mnemonic);\n      tx.addOutput(getAddress(wallet_1.generateAddressFromXPub(model_1.Currency.BCH, testnet, xpub, 0)), Number(new bignumber_js_1.default(lastVin.amount).multipliedBy(100000000).toFixed(0, bignumber_js_1.default.ROUND_FLOOR)));\n    } else if (changeAddress) {\n      tx.addOutput(getAddress(changeAddress), Number(new bignumber_js_1.default(lastVin.amount).multipliedBy(100000000).toFixed(0, bignumber_js_1.default.ROUND_FLOOR)));\n    } else {\n      throw new Error('Impossible to prepare transaction. Either mnemonic or keyPair and attr must be present.');\n    }\n  }\n\n  for (const [i, input] of data.entries()) {\n    // when there is no address field present, input is pool transfer to 0\n    if (input.vIn === '-1') {\n      continue;\n    }\n\n    const value = Number(new bignumber_js_1.default(data[i].amount).multipliedBy(100000000).toFixed(0, bignumber_js_1.default.ROUND_FLOOR));\n\n    if (mnemonic) {\n      const derivationKey = input.address && input.address.derivationKey ? input.address.derivationKey : 0;\n      const privateKey = await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.BCH, testnet, mnemonic, derivationKey);\n      const ecPair = bcash.ECPair.fromWIF(privateKey, network);\n      tx.sign(i, ecPair, undefined, 0x01, value, undefined, bcash.ECSignature.SCHNORR);\n    } else if (keyPair) {\n      // @ts-ignore\n      const privateKey = keyPair.find(k => k.address === input.address.address);\n\n      if (privateKey) {\n        const ecPair = bcash.ECPair.fromWIF(privateKey.privateKey, network);\n        tx.sign(i, ecPair, undefined, 0x01, value, undefined, bcash.ECSignature.SCHNORR);\n      }\n    }\n  }\n\n  return tx.build().toHex();\n};\n\nexports.prepareBitcoinCashSignedOffchainTransaction = prepareBitcoinCashSignedOffchainTransaction;","map":{"version":3,"mappings":"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","names":["bcash","require","sendBitcoinCashOffchainTransaction","testnet","body","signatureId","kms_1","tatum_1","model_1","mnemonic","keyPair","attr","changeAddress","withdrawal","fee","id","data","common_1","amount","address","txData","exports","multipleAmounts","e","console","error","withdrawalId","currency","BCH","e1","log","signBitcoinCashOffchainKMSTransaction","tx","chain","withdrawalResponses","Error","amountsToDecode","serializedTransaction","split","transaction","Transaction","fromHex","amountsToSign","JSON","parse","network","coininfo_1","bitcoincash","test","toBitcoinJS","main","builder","TransactionBuilder","fromTransaction","i","response","entries","vIn","ecPair","ECPair","fromWIF","wallet_1","_a","derivationKey","sign","undefined","ECSignature","SCHNORR","build","toHex","getAddress","prepareBitcoinCashSignedOffchainTransaction","forEach","input","addInput","vInIndex","lastVin","find","d","length","multipleAmount","addOutput","Number","bignumber_js_1","multipliedBy","toFixed","ROUND_FLOOR","isGreaterThan","xpub","value","privateKey","k"],"sourceRoot":"","sources":["../../../src/offchain/bcash.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}