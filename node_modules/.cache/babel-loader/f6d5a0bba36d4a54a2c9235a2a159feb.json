{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EnumValue = exports.EnumVariantDefinition = exports.EnumType = void 0;\n\nconst utils_1 = require(\"../../utils\");\n\nconst types_1 = require(\"./types\");\n\nconst SimpleEnumMaxDiscriminant = 256;\n\nclass EnumType extends types_1.CustomType {\n  constructor(name, variants) {\n    super(name);\n    this.variants = [];\n    this.variants = variants;\n  }\n\n  static fromJSON(json) {\n    let variants = (json.variants || []).map(variant => EnumVariantDefinition.fromJSON(variant));\n    return new EnumType(json.name, variants);\n  }\n\n  getVariantByDiscriminant(discriminant) {\n    let result = this.variants.find(e => e.discriminant == discriminant);\n    utils_1.guardValueIsSet(\"result\", result);\n    return result;\n  }\n\n  getVariantByName(name) {\n    let result = this.variants.find(e => e.name == name);\n    utils_1.guardValueIsSet(\"result\", result);\n    return result;\n  }\n\n}\n\nexports.EnumType = EnumType;\n\nclass EnumVariantDefinition {\n  constructor(name, discriminant) {\n    utils_1.guardTrue(discriminant < SimpleEnumMaxDiscriminant, `discriminant for simple enum should be less than ${SimpleEnumMaxDiscriminant}`);\n    this.name = name;\n    this.discriminant = discriminant;\n  }\n\n  static fromJSON(json) {\n    return new EnumVariantDefinition(json.name, json.discriminant);\n  }\n\n}\n\nexports.EnumVariantDefinition = EnumVariantDefinition;\n\nclass EnumValue extends types_1.TypedValue {\n  constructor(type, variant) {\n    super(type);\n    this.name = variant.name;\n    this.discriminant = variant.discriminant;\n  }\n\n  static fromName(type, name) {\n    let variant = type.getVariantByName(name);\n    return new EnumValue(type, variant);\n  }\n\n  static fromDiscriminant(type, discriminant) {\n    let variant = type.getVariantByDiscriminant(discriminant);\n    return new EnumValue(type, variant);\n  }\n\n  equals(other) {\n    if (!this.getType().equals(other.getType())) {\n      return false;\n    }\n\n    return this.name == other.name && this.discriminant == other.discriminant;\n  }\n\n  valueOf() {\n    return this.name;\n  }\n\n}\n\nexports.EnumValue = EnumValue;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAEA,MAAMA,yBAAyB,GAAG,GAAlC;;AAEA,MAAaC,QAAb,SAA8BC,kBAA9B,CAAwC;AAGpCC,cAAYC,IAAZ,EAA0BC,QAA1B,EAA2D;AACvD,UAAMD,IAAN;AAHK,oBAAoC,EAApC;AAIL,SAAKC,QAAL,GAAgBA,QAAhB;AACH;;AAEc,SAARC,QAAQ,CAACC,IAAD,EAAwC;AACnD,QAAIF,QAAQ,GAAG,CAACE,IAAI,CAACF,QAAL,IAAiB,EAAlB,EAAsBG,GAAtB,CAA0BC,OAAO,IAAIC,qBAAqB,CAACJ,QAAtB,CAA+BG,OAA/B,CAArC,CAAf;AACA,WAAO,IAAIR,QAAJ,CAAaM,IAAI,CAACH,IAAlB,EAAwBC,QAAxB,CAAP;AACH;;AAEDM,0BAAwB,CAACC,YAAD,EAAqB;AACzC,QAAIC,MAAM,GAAG,KAAKR,QAAL,CAAcS,IAAd,CAAmBC,CAAC,IAAIA,CAAC,CAACH,YAAF,IAAkBA,YAA1C,CAAb;AACAI,4BAAgB,QAAhB,EAA0BH,MAA1B;AACA,WAAOA,MAAP;AACH;;AAEDI,kBAAgB,CAACb,IAAD,EAAa;AACzB,QAAIS,MAAM,GAAG,KAAKR,QAAL,CAAcS,IAAd,CAAmBC,CAAC,IAAIA,CAAC,CAACX,IAAF,IAAUA,IAAlC,CAAb;AACAY,4BAAgB,QAAhB,EAA0BH,MAA1B;AACA,WAAOA,MAAP;AACH;;AAvBmC;;AAAxCK;;AA0BA,MAAaR,qBAAb,CAAkC;AAI9BP,cAAYC,IAAZ,EAA0BQ,YAA1B,EAA8C;AAC1CI,sBAAUJ,YAAY,GAAGZ,yBAAzB,EAAoD,oDAAoDA,yBAAyB,EAAjI;AAEA,SAAKI,IAAL,GAAYA,IAAZ;AACA,SAAKQ,YAAL,GAAoBA,YAApB;AACH;;AAEc,SAARN,QAAQ,CAACC,IAAD,EAA6C;AACxD,WAAO,IAAIG,qBAAJ,CAA0BH,IAAI,CAACH,IAA/B,EAAqCG,IAAI,CAACK,YAA1C,CAAP;AACH;;AAb6B;;AAAlCM;;AAgBA,MAAaC,SAAb,SAA+BjB,kBAA/B,CAAyC;AAIrCC,cAAoBiB,IAApB,EAAoCX,OAApC,EAAkE;AAC9D,UAAMW,IAAN;AACA,SAAKhB,IAAL,GAAYK,OAAO,CAACL,IAApB;AACA,SAAKQ,YAAL,GAAoBH,OAAO,CAACG,YAA5B;AACH;;AAEc,SAARS,QAAQ,CAACD,IAAD,EAAiBhB,IAAjB,EAA6B;AACxC,QAAIK,OAAO,GAAGW,IAAI,CAACH,gBAAL,CAAsBb,IAAtB,CAAd;AACA,WAAO,IAAIe,SAAJ,CAAcC,IAAd,EAAoBX,OAApB,CAAP;AACH;;AAEsB,SAAhBa,gBAAgB,CAACF,IAAD,EAAiBR,YAAjB,EAAqC;AACxD,QAAIH,OAAO,GAAGW,IAAI,CAACT,wBAAL,CAA8BC,YAA9B,CAAd;AACA,WAAO,IAAIO,SAAJ,CAAcC,IAAd,EAAoBX,OAApB,CAAP;AACH;;AAEDc,QAAM,CAACC,KAAD,EAAiB;AACnB,QAAI,CAAC,KAAKC,OAAL,GAAeF,MAAf,CAAsBC,KAAK,CAACC,OAAN,EAAtB,CAAL,EAA6C;AACzC,aAAO,KAAP;AACH;;AAED,WAAO,KAAKrB,IAAL,IAAaoB,KAAK,CAACpB,IAAnB,IAA2B,KAAKQ,YAAL,IAAqBY,KAAK,CAACZ,YAA7D;AACH;;AAEDc,SAAO;AACH,WAAO,KAAKtB,IAAZ;AACH;;AA9BoC;;AAAzCc","names":["SimpleEnumMaxDiscriminant","EnumType","types_1","constructor","name","variants","fromJSON","json","map","variant","EnumVariantDefinition","getVariantByDiscriminant","discriminant","result","find","e","utils_1","getVariantByName","exports","EnumValue","type","fromName","fromDiscriminant","equals","other","getType","valueOf"],"sourceRoot":"","sources":["../../../src/smartcontracts/typesystem/enum.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}