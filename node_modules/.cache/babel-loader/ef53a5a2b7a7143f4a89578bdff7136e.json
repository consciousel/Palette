{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\masho\\\\OneDrive\\\\Desktop\\\\Blockchain\\\\Biconomy\\\\Projects\\\\NFT_minter\\\\src\\\\utils\\\\fileUpload.js\";\nimport { useState } from 'react';\nimport { create } from 'ipfs-http-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = create('https://ipfs.infura.io:5001/api/v0');\nexport const upload = async file => {\n  try {\n    const added = await client.add(file);\n    const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n    updateFileUrl(url);\n  } catch (error) {\n    console.log('Error uploading file: ', error);\n  }\n\n  return url, /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"IPFS Example\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), fileUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: fileUrl,\n      width: \"600px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/NFT_minter/src/utils/fileUpload.js"],"names":["useState","create","client","upload","file","added","add","url","path","updateFileUrl","error","console","log","onChange","fileUrl"],"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,kBAAvB;;AAEA,MAAMC,MAAM,GAAGD,MAAM,CAAC,oCAAD,CAArB;AAEA,OAAO,MAAME,MAAM,GAAE,MAAMC,IAAN,IAAe;AAClC,MAAI;AACF,UAAMC,KAAK,GAAG,MAAMH,MAAM,CAACI,GAAP,CAAWF,IAAX,CAApB;AACA,UAAMG,GAAG,GAAI,+BAA8BF,KAAK,CAACG,IAAK,EAAtD;AACAC,IAAAA,aAAa,CAACF,GAAD,CAAb;AACD,GAJD,CAIE,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCF,KAAtC;AACD;;AAED,SACEH,GAAG,eACH;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,QAAQ,EAAEM;AAFZ;AAAA;AAAA;AAAA;AAAA,YAFF,EAOIC,OAAO,iBACL;AAAK,MAAA,GAAG,EAAEA,OAAV;AAAmB,MAAA,KAAK,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA,YARN;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AAeD,CAxBM","sourcesContent":["import { useState } from 'react'\r\nimport { create } from 'ipfs-http-client'\r\n\r\nconst client = create('https://ipfs.infura.io:5001/api/v0')\r\n\r\nexport const upload= async(file) => {\r\n  try {\r\n    const added = await client.add(file)\r\n    const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n    updateFileUrl(url)\r\n  } catch (error) {\r\n    console.log('Error uploading file: ', error)\r\n  }  \r\n    \r\n  return (\r\n    url,\r\n    <div className=\"App\">\r\n      <h1>IPFS Example</h1>\r\n      <input\r\n        type=\"file\"\r\n        onChange={onChange}\r\n      />\r\n      {\r\n        fileUrl && (\r\n          <img src={fileUrl} width=\"600px\" />\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}