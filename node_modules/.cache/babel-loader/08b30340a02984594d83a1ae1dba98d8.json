{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\masho\\\\OneDrive\\\\Desktop\\\\Blockchain\\\\Biconomy\\\\Projects\\\\NFT_minter\\\\src\\\\Minter.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { connectWallet, getCurrentWalletConnected, mintNFT } from \"./utils/interact.js\";\nimport { ImageUpload } from 'react-ipfs-uploader'; // import { tatumUpload } from './utils/tatum.js';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Minter = props => {\n  _s();\n\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [artist, setArtist] = useState(\"\");\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  useEffect(() => {\n    async function fetchAccountData() {\n      const {\n        address,\n        status\n      } = await getCurrentWalletConnected();\n      setWallet(address);\n      setStatus(status);\n    }\n\n    fetchAccountData();\n    addWalletListener();\n  }, []);\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async () => {\n    const urlOfLastUpload = imageUrl;\n    console.log(name, description, artist, urlOfLastUpload);\n    const {\n      status\n    } = await mintNFT(name, description, artist, urlOfLastUpload);\n    setStatus(status);\n  };\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"üëÜüèΩ Fill in the details of your NFT in the text-fields above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"ü¶ä Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus( /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          href: `https://metamask.io/download.html`,\n          children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Minter\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"walletButton\",\n      onClick: connectWalletPressed,\n      children: walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"title\",\n      children: \"\\uD83C\\uDFA8 Palette NFT Minter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Simply upload your asset/art; fill in the details for your NFT; then press \\\"Mint.\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83E\\uDD14 Name: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"e.g. My first NFT!\",\n        onChange: event => setName(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u270D\\uFE0F Description: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"e.g. Even cooler than cryptokitties ;)\",\n        onChange: event => setDescription(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u270D\\uFE0F Artist: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"e.g. Vincent Van Gogh;)\",\n        onChange: event => setArtist(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u270D\\uFE0F Image: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: event => setImage(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"mintButton\",\n          children: \"Tatum Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \" NFT ASSET UPLOAD \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageUpload, {\n        setUrl: setImageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"AssetUrl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), \" :\", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: imageUrl,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"mintButton\",\n      onClick: onMintPressed,\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Minter, \"CLU6eMAt+fTHfy/ssDq8lSqyQhw=\");\n\n_c = Minter;\nexport default Minter; // <h2>‚úçÔ∏è Image: </h2>\n// <div>\n//   <input\n//   type=\"file\"\n//   onChange={(event) => setImage(event.target.file[0])}\n//   />\n//   <button id=\"mintButton\" onClick={tatumUpload}>\n//     Tatum Upload\n//   </button>\n// </div>  \n\nvar _c;\n\n$RefreshReg$(_c, \"Minter\");","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/NFT_minter/src/Minter.js"],"names":["useEffect","useState","connectWallet","getCurrentWalletConnected","mintNFT","ImageUpload","Minter","props","walletAddress","setWallet","status","setStatus","name","setName","description","setDescription","artist","setArtist","imageUrl","setImageUrl","image","setImage","fetchAccountData","address","addWalletListener","connectWalletPressed","walletResponse","onMintPressed","urlOfLastUpload","console","log","window","ethereum","on","accounts","length","String","substring","event","target","value"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { \r\n  connectWallet,\r\n  getCurrentWalletConnected,\r\n  mintNFT\r\n} from \"./utils/interact.js\";\r\nimport { ImageUpload } from 'react-ipfs-uploader'\r\n// import { tatumUpload } from './utils/tatum.js';\r\n\r\nconst Minter = (props) => {\r\n\r\n  //State variables\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [artist, setArtist] = useState(\"\");\r\n  const [imageUrl, setImageUrl] = useState(\"\");\r\n  const [image, setImage] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    async function fetchAccountData(){\r\n      const {address, status} = await getCurrentWalletConnected();\r\n      setWallet(address)\r\n      setStatus(status);\r\n    }\r\n    fetchAccountData();\r\n\r\n    addWalletListener();\r\n  },[]);\r\n\r\n  const connectWalletPressed = async () => { \r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  const onMintPressed = async () => { \r\n    const urlOfLastUpload = imageUrl;\r\n    console.log(name, description, artist, urlOfLastUpload)\r\n    const { status } = await mintNFT( name, description, artist, urlOfLastUpload);\r\n    setStatus(status);\r\n  };\r\n\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"üëÜüèΩ Fill in the details of your NFT in the text-fields above.\");\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"ü¶ä Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          ü¶ä{\" \"}\r\n          <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Minter\">\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <br></br>\r\n      <h1 id=\"title\">üé® Palette NFT Minter</h1>\r\n      <p>\r\n        Simply upload your asset/art; fill in the details for your NFT; then press \"Mint.\"\r\n      </p>\r\n      <form>\r\n        <h2>ü§î Name: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. My first NFT!\"\r\n          onChange={(event) => setName(event.target.value)}\r\n        />\r\n        <h2>‚úçÔ∏è Description: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\r\n          onChange={(event) => setDescription(event.target.value)}\r\n        />\r\n        <h2>‚úçÔ∏è Artist: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. Vincent Van Gogh;)\"\r\n          onChange={(event) => setArtist(event.target.value)}\r\n        />\r\n        <h2>‚úçÔ∏è Image: </h2>\r\n        <div>\r\n          <input\r\n          type=\"file\"\r\n          onChange={(event) => setImage(event.target.value)}\r\n          />\r\n          <button id=\"mintButton\">\r\n            Tatum Upload\r\n          </button>\r\n        </div>        \r\n      </form>\r\n      <div>\r\n        <h5> NFT ASSET UPLOAD </h5>\r\n          <ImageUpload setUrl={setImageUrl} />\r\n          <b>AssetUrl</b> : \r\n            <a\r\n              href={imageUrl}\r\n              target='_blank'\r\n              rel='noopener noreferrer'\r\n            >\r\n              {imageUrl} \r\n            </a>\r\n      </div>\r\n      <button id=\"mintButton\" onClick={onMintPressed}>\r\n        Mint NFT\r\n      </button>\r\n      <p id=\"status\">\r\n        {status}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Minter;\r\n\r\n\r\n// <h2>‚úçÔ∏è Image: </h2>\r\n        // <div>\r\n        //   <input\r\n        //   type=\"file\"\r\n        //   onChange={(event) => setImage(event.target.file[0])}\r\n        //   />\r\n        //   <button id=\"mintButton\" onClick={tatumUpload}>\r\n        //     Tatum Upload\r\n        //   </button>\r\n        // </div>  "]},"metadata":{},"sourceType":"module"}