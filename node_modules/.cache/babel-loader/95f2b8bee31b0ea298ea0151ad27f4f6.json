{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendBscBurnMultiTokenTransaction = exports.sendUpdateCashbackForAuthorBep721Transaction = exports.sendBurnBep721Transaction = exports.sendMintBep721ProvenanceTransaction = exports.sendMintMultipleBep721ProvenanceTransaction = exports.sendMintMultipleBep721Transaction = exports.sendMintMultipleCashbackBep721Transaction = exports.sendMintBepCashback721Transaction = exports.sendBscMintMultiTokenBatchTransaction = exports.sendBscMintMultiTokenTransaction = exports.sendBscDeployMultiTokenTransaction = exports.sendBscGenerateCustodialWalletSignedTransaction = exports.sendMintBep721Transaction = exports.sendBscSmartContractMethodInvocationTransaction = exports.sendDeployBep20Transaction = exports.sendCustomBep20Transaction = exports.sendBscOrBep20Transaction = exports.sendBscStoreDataTransaction = exports.sendBscSmartContractReadMethodInvocationTransaction = exports.prepareBscDeployMultiTokenSignedTransaction = exports.prepareBscMintMultiTokenBatchSignedTransaction = exports.prepareBscMintMultiTokenSignedTransaction = exports.prepareBscBatchTransferMultiTokenSignedTransaction = exports.prepareBscTransferMultiTokenSignedTransaction = exports.prepareBscBurnMultiTokenBatchSignedTransaction = exports.prepareBscBurnMultiTokenSignedTransaction = exports.prepareBscDeployAuctionSignedTransaction = exports.prepareBscDeployMarketplaceListingSignedTransaction = exports.prepareBscDeployBep721SignedTransaction = exports.prepareBscUpdateCashbackForAuthorErc721SignedTransaction = exports.prepareBscTransferBep721SignedTransaction = exports.prepareBscBurnBep721SignedTransaction = exports.prepareBscMintMultipleBep721SignedTransaction = exports.prepareBscMintMultipleCashbackBep721SignedTransaction = exports.prepareBscMintBepCashback721SignedTransaction = exports.prepareBscMintBep721ProvenanceSignedTransaction = exports.prepareBscMintMultipleBep721ProvenanceSignedTransaction = exports.prepareBscMintBep721SignedTransaction = exports.prepareBscSmartContractWriteMethodInvocation = exports.prepareBscGenerateCustodialWalletSignedTransaction = exports.prepareDeployBep20SignedTransaction = exports.prepareCustomBep20SignedTransaction = exports.prepareBscOrBep20SignedTransaction = exports.prepareBurnBep20SignedTransaction = exports.prepareMintBep20SignedTransaction = exports.prepareBscStoreDataTransaction = exports.getBscBep20ContractDecimals = exports.signBscKMSTransaction = exports.getBscClient = exports.bscGetGasPriceInWei = void 0;\nexports.sendBscDeployMarketplaceListingSignedTransaction = exports.sendDeployBep721Transaction = exports.sendBscMultiTokenBatchTransaction = exports.sendBscMultiTokenTransaction = exports.sendBep721Transaction = exports.sendBscBurnBatchMultiTokenTransaction = void 0;\n\nconst bignumber_js_1 = require(\"bignumber.js\");\n\nconst web3_1 = __importDefault(require(\"web3\"));\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst constants_1 = require(\"../constants\");\n\nconst erc1155_abi_1 = __importDefault(require(\"../contracts/erc1155/erc1155_abi\"));\n\nconst erc1155_bytecode_1 = __importDefault(require(\"../contracts/erc1155/erc1155_bytecode\"));\n\nconst token_abi_1 = __importDefault(require(\"../contracts/erc20/token_abi\"));\n\nconst token_abi_2 = __importDefault(require(\"../contracts/erc20/token_abi\"));\n\nconst token_bytecode_1 = __importDefault(require(\"../contracts/erc20/token_bytecode\"));\n\nconst erc721_abi_1 = __importDefault(require(\"../contracts/erc721Cashback/erc721_abi\"));\n\nconst erc721_bytecode_1 = __importDefault(require(\"../contracts/erc721Cashback/erc721_bytecode\"));\n\nconst erc721_abi_2 = __importDefault(require(\"../contracts/erc721General/erc721_abi\"));\n\nconst erc721_bytecode_2 = __importDefault(require(\"../contracts/erc721General/erc721_bytecode\"));\n\nconst erc721Provenance_abi_1 = __importDefault(require(\"../contracts/erc721Provenance/erc721Provenance_abi\"));\n\nconst erc721Provenance_bytecode_1 = __importDefault(require(\"../contracts/erc721Provenance/erc721Provenance_bytecode\"));\n\nconst marketplace_1 = require(\"../contracts/marketplace\");\n\nconst model_1 = require(\"../model\");\n\nconst nft_1 = require(\"../nft\");\n\nconst wallet_1 = require(\"../wallet\");\n/**\n * Estimate Gas price for the transaction.\n */\n\n\nconst bscGetGasPriceInWei = async () => {\n  return web3_1.default.utils.toWei('10', 'gwei');\n};\n\nexports.bscGetGasPriceInWei = bscGetGasPriceInWei;\n/**\n * Returns BSC server to connect to.\n *\n * @param provider url of the BSC Server to connect to. If not set, default public server will be used.\n * @param fromPrivateKey optional private key of sender account\n */\n\nconst getBscClient = (provider, fromPrivateKey) => {\n  const client = new web3_1.default(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/bsc/web3/${process.env.TATUM_API_KEY}`);\n\n  if (fromPrivateKey) {\n    client.eth.accounts.wallet.clear();\n    client.eth.accounts.wallet.add(fromPrivateKey);\n    client.eth.defaultAccount = client.eth.accounts.wallet[0].address;\n  }\n\n  return client;\n};\n\nexports.getBscClient = getBscClient;\n\nconst prepareBscSignedTransactionAbstraction = async (client, transaction, signatureId, fromPrivateKey, fee) => {\n  var _a;\n\n  const gasPrice = fee ? client.utils.toWei(fee.gasPrice, 'gwei') : await exports.bscGetGasPriceInWei();\n  const tx = Object.assign(Object.assign({}, transaction), {\n    gasPrice,\n    gas: (fee === null || fee === void 0 ? void 0 : fee.gasLimit) || undefined\n  });\n\n  if (signatureId) {\n    return JSON.stringify(tx);\n  }\n\n  tx.gas = (_a = fee === null || fee === void 0 ? void 0 : fee.gasLimit) !== null && _a !== void 0 ? _a : await client.eth.estimateGas(tx);\n  return (await client.eth.accounts.signTransaction(tx, fromPrivateKey)).rawTransaction;\n};\n/**\n * Sign BSC pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param fromPrivateKey private key to sign transaction with.\n * @param provider url of the BSC Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\n\nconst signBscKMSTransaction = async (tx, fromPrivateKey, provider) => {\n  if (tx.chain !== model_1.Currency.BSC) {\n    throw Error('Unsupported chain.');\n  }\n\n  const client = exports.getBscClient(provider, fromPrivateKey);\n  const transactionConfig = JSON.parse(tx.serializedTransaction);\n  const gas = await client.eth.estimateGas(transactionConfig);\n\n  if (!transactionConfig.gas) {\n    transactionConfig.gas = gas;\n  }\n\n  if (!transactionConfig.nonce) {\n    transactionConfig.nonce = await blockchain_1.bscGetTransactionsCount(client.eth.defaultAccount);\n  }\n\n  if (!transactionConfig.gasPrice || transactionConfig.gasPrice === '0' || transactionConfig.gasPrice === 0 || transactionConfig.gasPrice === '0x0') {\n    transactionConfig.gasPrice = await exports.bscGetGasPriceInWei();\n  }\n\n  return (await client.eth.accounts.signTransaction(transactionConfig, fromPrivateKey)).rawTransaction;\n};\n\nexports.signBscKMSTransaction = signBscKMSTransaction;\n\nconst getBscBep20ContractDecimals = async (testnet, contractAddress, provider) => {\n  if (!contractAddress) {\n    throw new Error('Contract address not set.');\n  }\n\n  const client = await exports.getBscClient(provider); // @ts-ignore\n\n  const contract = new client.eth.Contract(token_abi_1.default, contractAddress.trim());\n  return await contract.methods.decimals().call();\n};\n\nexports.getBscBep20ContractDecimals = getBscBep20ContractDecimals;\n/**\n * Sign Bsc Store data transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBscStoreDataTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.CreateRecord);\n  const {\n    fromPrivateKey,\n    to,\n    ethFee,\n    data,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getBscClient(provider, fromPrivateKey);\n  const address = to || client.eth.defaultAccount;\n\n  if (!address) {\n    throw new Error('Recipient must be provided.');\n  }\n\n  const hexData = client.utils.isHex(data) ? client.utils.stringToHex(data) : client.utils.toHex(data);\n  const addressNonce = nonce ? nonce : await blockchain_1.bscGetTransactionsCount(address);\n  const customFee = ethFee ? Object.assign(Object.assign({}, ethFee), {\n    gasPrice: client.utils.toWei(ethFee.gasPrice, 'gwei')\n  }) : {\n    gasLimit: `${hexData.length * 68 + 21000}`,\n    gasPrice: await exports.bscGetGasPriceInWei()\n  };\n  const tx = {\n    from: 0,\n    to: address.trim(),\n    value: '0',\n    gasPrice: customFee.gasPrice,\n    gas: customFee.gasLimit,\n    data: hexData,\n    nonce: addressNonce\n  };\n\n  if (signatureId) {\n    return JSON.stringify(tx);\n  }\n\n  return (await client.eth.accounts.signTransaction(tx, fromPrivateKey)).rawTransaction;\n};\n\nexports.prepareBscStoreDataTransaction = prepareBscStoreDataTransaction;\n/**\n * Sign BEP20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareMintBep20SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.MintErc20);\n  const {\n    fromPrivateKey,\n    amount,\n    to,\n    contractAddress,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(token_abi_2.default, contractAddress.trim());\n  const digits = new bignumber_js_1.BigNumber(10).pow(await contract.methods.decimals().call());\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.mint(to.trim(), `0x${new bignumber_js_1.BigNumber(amount).multipliedBy(digits).toString(16)}`).encodeABI(),\n    nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareMintBep20SignedTransaction = prepareMintBep20SignedTransaction;\n/**\n * Sign BEP20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBurnBep20SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.BurnErc20);\n  const {\n    fromPrivateKey,\n    amount,\n    contractAddress,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(token_abi_2.default, contractAddress.trim());\n  const digits = new bignumber_js_1.BigNumber(10).pow(await contract.methods.decimals().call());\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.burn(`0x${new bignumber_js_1.BigNumber(amount).multipliedBy(digits).toString(16)}`).encodeABI(),\n    nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareBurnBep20SignedTransaction = prepareBurnBep20SignedTransaction;\n/**\n * Sign Bsc or supported BEP20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBscOrBep20SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.TransferBscBep20);\n  const {\n    fromPrivateKey,\n    to,\n    amount,\n    currency,\n    fee,\n    data,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getBscClient(provider, fromPrivateKey);\n  let tx;\n\n  if (currency === model_1.Currency.BSC) {\n    tx = {\n      from: 0,\n      to: to.trim(),\n      value: client.utils.toWei(`${amount}`, 'ether'),\n      data: data ? client.utils.isHex(data) ? client.utils.stringToHex(data) : client.utils.toHex(data) : undefined,\n      nonce\n    };\n  } else {\n    // @ts-ignore\n    const contract = new client.eth.Contract([constants_1.TRANSFER_METHOD_ABI], constants_1.CONTRACT_ADDRESSES[currency]);\n    const digits = new bignumber_js_1.BigNumber(10).pow(constants_1.CONTRACT_DECIMALS[currency]);\n    tx = {\n      from: 0,\n      to: constants_1.CONTRACT_ADDRESSES[currency],\n      data: contract.methods.transfer(to.trim(), `0x${new bignumber_js_1.BigNumber(amount).multipliedBy(digits).toString(16)}`).encodeABI(),\n      nonce\n    };\n  }\n\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareBscOrBep20SignedTransaction = prepareBscOrBep20SignedTransaction;\n/**\n * Sign Bsc custom BEP20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareCustomBep20SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.TransferErc20);\n  const {\n    fromPrivateKey,\n    to,\n    amount,\n    contractAddress,\n    digits,\n    fee,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract([constants_1.TRANSFER_METHOD_ABI], contractAddress);\n  const decimals = new bignumber_js_1.BigNumber(10).pow(digits);\n  const tx = {\n    from: 0,\n    to: contractAddress,\n    data: contract.methods.transfer(to.trim(), `0x${new bignumber_js_1.BigNumber(amount).multipliedBy(decimals).toString(16)}`).encodeABI(),\n    nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareCustomBep20SignedTransaction = prepareCustomBep20SignedTransaction;\n/**\n * Sign Bsc deploy BEP20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareDeployBep20SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.DeployErc20);\n  const {\n    name,\n    address,\n    symbol,\n    supply,\n    digits,\n    fromPrivateKey,\n    nonce,\n    fee,\n    signatureId,\n    totalCap\n  } = body;\n  const client = exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(token_abi_2.default);\n  const deploy = contract.deploy({\n    data: token_bytecode_1.default,\n    arguments: [name, symbol, address, digits, `0x${new bignumber_js_1.BigNumber(totalCap || supply).multipliedBy(new bignumber_js_1.BigNumber(10).pow(digits)).toString(16)}`, `0x${new bignumber_js_1.BigNumber(supply).multipliedBy(new bignumber_js_1.BigNumber(10).pow(digits)).toString(16)}`]\n  });\n  const tx = {\n    from: 0,\n    data: deploy.encodeABI(),\n    nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareDeployBep20SignedTransaction = prepareDeployBep20SignedTransaction;\n/**\n * Sign Bsc generate custodial wallet address transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBscGenerateCustodialWalletSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.GenerateCustodialAddress);\n  const client = exports.getBscClient(provider, body.fromPrivateKey);\n  const {\n    abi,\n    code\n  } = wallet_1.obtainCustodialAddressType(body); // @ts-ignore\n\n  const contract = new client.eth.Contract(abi);\n  const deploy = contract.deploy({\n    data: code\n  });\n  const tx = {\n    from: 0,\n    data: deploy.encodeABI(),\n    nonce: body.nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, body.signatureId, body.fromPrivateKey, body.fee);\n};\n\nexports.prepareBscGenerateCustodialWalletSignedTransaction = prepareBscGenerateCustodialWalletSignedTransaction;\n/**\n * Sign Bsc invoke smart contract transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBscSmartContractWriteMethodInvocation = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.SmartContractMethodInvocation);\n  const {\n    fromPrivateKey,\n    fee,\n    params,\n    methodName,\n    methodABI,\n    contractAddress,\n    nonce,\n    amount,\n    signatureId\n  } = body;\n  const client = exports.getBscClient(provider, fromPrivateKey);\n  const contract = new client.eth.Contract([methodABI]);\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    value: amount ? `0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(amount, 'ether')).toString(16)}` : undefined,\n    data: contract.methods[methodName](...params).encodeABI(),\n    nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareBscSmartContractWriteMethodInvocation = prepareBscSmartContractWriteMethodInvocation;\n/**\n * Sign Bsc mint ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBscMintBep721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthMintErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    nonce,\n    fee,\n    url,\n    signatureId\n  } = body;\n  const client = exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721_abi_1.default, contractAddress);\n\n  if (contractAddress) {\n    const tx = {\n      from: 0,\n      to: contractAddress.trim(),\n      data: contract.methods.mintWithTokenURI(to.trim(), tokenId, url).encodeABI(),\n      nonce\n    };\n    return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n  }\n\n  throw new Error('Contract address should not be empty');\n};\n\nexports.prepareBscMintBep721SignedTransaction = prepareBscMintBep721SignedTransaction;\n/**\n * Sign Bsc mint multiple ERC 721 Cashback transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBscMintMultipleBep721ProvenanceSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthMintMultipleErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    url,\n    nonce,\n    signatureId,\n    authorAddresses,\n    cashbackValues,\n    fixedValues,\n    erc20,\n    fee\n  } = body;\n  const client = await exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721Provenance_abi_1.default, contractAddress);\n  const cb = [];\n  const fv = [];\n\n  if (authorAddresses && cashbackValues && fixedValues) {\n    for (let i = 0; i < cashbackValues.length; i++) {\n      const cb2 = [];\n      const fv2 = [];\n\n      for (let j = 0; j < cashbackValues[i].length; j++) {\n        cb2.push(`0x${new bignumber_js_1.BigNumber(cashbackValues[i][j]).multipliedBy(100).toString(16)}`);\n        fv2.push(`0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(fixedValues[i][j], 'ether')).toString(16)}`);\n      }\n\n      cb.push(cb2);\n      fv.push(fv2);\n    }\n  }\n\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: erc20 ? contract.methods.mintMultiple(to.map(t => t.trim()), tokenId, url, authorAddresses ? authorAddresses : [], cb, fv, erc20).encodeABI() : contract.methods.mintMultiple(to.map(t => t.trim()), tokenId, url, authorAddresses ? authorAddresses : [], cb, fv).encodeABI(),\n    nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareBscMintMultipleBep721ProvenanceSignedTransaction = prepareBscMintMultipleBep721ProvenanceSignedTransaction;\n/**\n * Sign Bsc mint ERC 721 provenance transaction with cashback via private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBscMintBep721ProvenanceSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthMintErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    nonce,\n    fee,\n    url,\n    signatureId,\n    authorAddresses,\n    cashbackValues,\n    fixedValues,\n    erc20\n  } = body;\n  const client = exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721Provenance_abi_1.default, contractAddress);\n  const cb = [];\n  const fval = [];\n\n  if (authorAddresses && cashbackValues && fixedValues) {\n    cashbackValues.map(c => cb.push(`0x${new bignumber_js_1.BigNumber(c).multipliedBy(100).toString(16)}`));\n    fixedValues.map(c => fval.push(`0x${new bignumber_js_1.BigNumber(client.utils.toWei(c, 'ether')).toString(16)}`));\n  }\n\n  if (contractAddress) {\n    const tx = {\n      from: 0,\n      to: contractAddress.trim(),\n      data: contract.methods.mintWithTokenURI(to.trim(), tokenId, url, authorAddresses ? authorAddresses : [], cb, fval, erc20 ? erc20 : null).encodeABI(),\n      nonce\n    };\n    return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n  }\n\n  throw new Error('Contract address should not be empty!');\n};\n\nexports.prepareBscMintBep721ProvenanceSignedTransaction = prepareBscMintBep721ProvenanceSignedTransaction;\n/**\n * Sign Bsc mint ERC 721 transaction with cashback via private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBscMintBepCashback721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthMintErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    nonce,\n    fee,\n    url,\n    signatureId,\n    authorAddresses,\n    cashbackValues,\n    erc20\n  } = body;\n  const client = exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721_abi_1.default, contractAddress);\n  const cashbacks = cashbackValues;\n  const cb = cashbacks.map(c => `0x${new bignumber_js_1.BigNumber(client.utils.toWei(c, 'ether')).toString(16)}`);\n\n  if (contractAddress) {\n    const tx = {\n      from: 0,\n      to: contractAddress.trim(),\n      data: erc20 ? contract.methods.mintWithCashback(to.trim(), tokenId, url, authorAddresses, cb, erc20).encodeABI() : contract.methods.mintWithCashback(to.trim(), tokenId, url, authorAddresses, cb).encodeABI(),\n      nonce\n    };\n    return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n  }\n\n  throw new Error('Contract address should not be empty!');\n};\n\nexports.prepareBscMintBepCashback721SignedTransaction = prepareBscMintBepCashback721SignedTransaction;\n/**\n * Sign Bsc mint multiple ERC 721 Cashback transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBscMintMultipleCashbackBep721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthMintMultipleErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    url,\n    nonce,\n    signatureId,\n    authorAddresses,\n    cashbackValues,\n    fee,\n    erc20\n  } = body;\n  const client = await exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721_abi_1.default, contractAddress);\n  const cashbacks = cashbackValues;\n  const cb = cashbacks.map(cashback => cashback.map(c => `0x${new bignumber_js_1.BigNumber(client.utils.toWei(c, 'ether')).toString(16)}`));\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: erc20 ? contract.methods.mintMultipleCashback(to.map(t => t.trim()), tokenId, url, authorAddresses, cb, erc20).encodeABI() : contract.methods.mintMultipleCashback(to.map(t => t.trim()), tokenId, url, authorAddresses, cb).encodeABI(),\n    nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareBscMintMultipleCashbackBep721SignedTransaction = prepareBscMintMultipleCashbackBep721SignedTransaction;\n/**\n * Sign Bsc mint multiple ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBscMintMultipleBep721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthMintMultipleErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    url,\n    nonce,\n    signatureId,\n    fee\n  } = body;\n  const client = await exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721_abi_1.default, contractAddress);\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.mintMultiple(to.map(t => t.trim()), tokenId, url).encodeABI(),\n    nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareBscMintMultipleBep721SignedTransaction = prepareBscMintMultipleBep721SignedTransaction;\n/**\n * Sign Bsc burn ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBscBurnBep721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthBurnErc721);\n  const {\n    fromPrivateKey,\n    tokenId,\n    fee,\n    contractAddress,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721_abi_1.default, contractAddress);\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.burn(tokenId).encodeABI(),\n    nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareBscBurnBep721SignedTransaction = prepareBscBurnBep721SignedTransaction;\n/**\n * Sign Bsc transfer ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBscTransferBep721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthTransferErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    fee,\n    contractAddress,\n    nonce,\n    signatureId,\n    value,\n    provenance,\n    provenanceData,\n    tokenPrice\n  } = body;\n  const client = await exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(provenance ? erc721Provenance_abi_1.default : erc721_abi_1.default, contractAddress);\n  const dataBytes = provenance ? Buffer.from(provenanceData + '\\'\\'\\'###\\'\\'\\'' + web3_utils_1.toWei(tokenPrice, 'ether'), 'utf8') : '';\n  const tokenData = provenance ? contract.methods.safeTransfer(to.trim(), tokenId, `0x${dataBytes.toString('hex')}`).encodeABI() : contract.methods.safeTransfer(to.trim(), tokenId).encodeABI();\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: tokenData,\n    nonce,\n    value: value ? `0x${new bignumber_js_1.BigNumber(value).multipliedBy(1e18).toString(16)}` : undefined\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareBscTransferBep721SignedTransaction = prepareBscTransferBep721SignedTransaction;\n/**\n * Sign Bsc update cashback ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBscUpdateCashbackForAuthorErc721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.UpdateCashbackErc721);\n  const {\n    fromPrivateKey,\n    cashbackValue,\n    tokenId,\n    fee,\n    contractAddress,\n    nonce,\n    signatureId\n  } = body;\n  const client = await exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721_abi_1.default, contractAddress);\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.updateCashbackForAuthor(tokenId, `0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(cashbackValue, 'ether')).toString(16)}`).encodeABI(),\n    nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareBscUpdateCashbackForAuthorErc721SignedTransaction = prepareBscUpdateCashbackForAuthorErc721SignedTransaction;\n/**\n * Sign Bsc deploy ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBscDeployBep721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthDeployErc721);\n  const {\n    fromPrivateKey,\n    fee,\n    name,\n    symbol,\n    nonce,\n    signatureId,\n    provenance,\n    cashback,\n    publicMint\n  } = body;\n  const client = await exports.getBscClient(provider, fromPrivateKey);\n\n  if (provenance && cashback) {\n    throw new Error('Only one of provenance or cashback must be present and true.');\n  }\n\n  let abi = erc721_abi_2.default;\n  let data = erc721_bytecode_2.default;\n\n  if (provenance) {\n    abi = erc721Provenance_abi_1.default;\n    data = erc721Provenance_bytecode_1.default;\n  } else if (cashback) {\n    abi = erc721_abi_1.default;\n    data = erc721_bytecode_1.default;\n  } // @ts-ignore\n\n\n  const contract = new client.eth.Contract(abi, null, {\n    data\n  }); // @ts-ignore\n\n  const deploy = contract.deploy({\n    arguments: [name, symbol, publicMint ? publicMint : false]\n  });\n  const tx = {\n    from: 0,\n    data: deploy.encodeABI(),\n    nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareBscDeployBep721SignedTransaction = prepareBscDeployBep721SignedTransaction;\n/**\n * Sign BSC generate custodial wallet address transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS\n */\n\nconst prepareBscDeployMarketplaceListingSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.DeployMarketplaceListing);\n  return deployContract(marketplace_1.listing.abi, marketplace_1.listing.data, [body.marketplaceFee, body.feeRecipient], body.fromPrivateKey, body.fee, body.nonce, body.signatureId, provider);\n};\n\nexports.prepareBscDeployMarketplaceListingSignedTransaction = prepareBscDeployMarketplaceListingSignedTransaction;\n/**\n * Sign BSC deploy NFT Auction contract transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS\n */\n\nconst prepareBscDeployAuctionSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.DeployNftAuction);\n  return deployContract(marketplace_1.auction.abi, marketplace_1.auction.data, [body.auctionFee, body.feeRecipient], body.fromPrivateKey, body.fee, body.nonce, body.signatureId, provider);\n};\n\nexports.prepareBscDeployAuctionSignedTransaction = prepareBscDeployAuctionSignedTransaction;\n\nconst deployContract = async (abi, bytecode, args, fromPrivateKey, fee, nonce, signatureId, provider) => {\n  const client = await exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(abi, null, {\n    data: bytecode\n  }); // @ts-ignore\n\n  const deploy = contract.deploy({\n    arguments: args\n  });\n  const tx = {\n    from: 0,\n    data: deploy.encodeABI(),\n    nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n/**\n * Sign Bsc burn ERC 1155 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\n\nconst prepareBscBurnMultiTokenSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthBurnMultiToken);\n  const {\n    fromPrivateKey,\n    account,\n    tokenId,\n    amount,\n    fee,\n    contractAddress,\n    nonce,\n    signatureId\n  } = body;\n  const client = await exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc1155_abi_1.default, contractAddress);\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.burn(account, tokenId, amount).encodeABI(),\n    nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareBscBurnMultiTokenSignedTransaction = prepareBscBurnMultiTokenSignedTransaction;\n\nconst prepareBscBurnMultiTokenBatchSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthBurnMultiTokenBatch);\n  const {\n    fromPrivateKey,\n    account,\n    tokenId,\n    amounts,\n    fee,\n    contractAddress,\n    nonce,\n    signatureId\n  } = body;\n  const client = await exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc1155_abi_1.default, contractAddress);\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.burnBatch(account, tokenId, amounts).encodeABI(),\n    nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareBscBurnMultiTokenBatchSignedTransaction = prepareBscBurnMultiTokenBatchSignedTransaction;\n\nconst prepareBscTransferMultiTokenSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.TransferMultiToken);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    fee,\n    contractAddress,\n    nonce,\n    signatureId,\n    amount,\n    data\n  } = body;\n  const client = await exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc1155_abi_1.default, contractAddress);\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.safeTransfer(to.trim(), tokenId, `0x${new bignumber_js_1.BigNumber(amount).toString(16)}`, data ? data : '0x0').encodeABI(),\n    nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareBscTransferMultiTokenSignedTransaction = prepareBscTransferMultiTokenSignedTransaction;\n\nconst prepareBscBatchTransferMultiTokenSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.TransferMultiTokenBatch);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    fee,\n    contractAddress,\n    nonce,\n    signatureId,\n    amounts,\n    data\n  } = body;\n  const client = await exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc1155_abi_1.default, contractAddress);\n  const amts = amounts.map(amt => `0x${new bignumber_js_1.BigNumber(amt).toString(16)}`);\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.safeBatchTransfer(to.trim(), tokenId.map(token => token.trim()), amts, data ? data : '0x0').encodeABI(),\n    nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareBscBatchTransferMultiTokenSignedTransaction = prepareBscBatchTransferMultiTokenSignedTransaction;\n/**\n * Sign Bsc mint ERC 1155 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBscMintMultiTokenSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.MintMultiToken);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    nonce,\n    data,\n    fee,\n    amount,\n    signatureId\n  } = body;\n  const client = await exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc1155_abi_1.default, contractAddress);\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.mint(to.trim(), tokenId, `0x${new bignumber_js_1.BigNumber(amount).toString(16)}`, data ? data : '0x0').encodeABI(),\n    nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareBscMintMultiTokenSignedTransaction = prepareBscMintMultiTokenSignedTransaction;\n/**\n * Sign BSC mint ERC 1155 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBscMintMultiTokenBatchSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.MintMultiTokenBatch);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    nonce,\n    data,\n    fee,\n    amounts,\n    signatureId\n  } = body;\n  const client = await exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc1155_abi_1.default, contractAddress);\n  const amts = amounts.map(amts => amts.map(amt => `0x${new bignumber_js_1.BigNumber(amt).toString(16)}`));\n  const tx = {\n    from: 0,\n    to: contractAddress.trim(),\n    data: contract.methods.mintBatch(to, tokenId, amts, data ? data : '0x0').encodeABI(),\n    nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareBscMintMultiTokenBatchSignedTransaction = prepareBscMintMultiTokenBatchSignedTransaction;\n/**\n * Sign Bsc deploy ERC 1155 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBscDeployMultiTokenSignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthDeployMultiToken);\n  const {\n    fromPrivateKey,\n    fee,\n    uri,\n    nonce,\n    signatureId,\n    publicMint\n  } = body;\n  const client = await exports.getBscClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc1155_abi_1.default, null, {\n    data: erc1155_bytecode_1.default\n  }); // @ts-ignore\n\n  const deploy = contract.deploy({\n    arguments: [uri, publicMint ? publicMint : false]\n  });\n  const tx = {\n    from: 0,\n    data: deploy.encodeABI(),\n    nonce\n  };\n  return await prepareBscSignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareBscDeployMultiTokenSignedTransaction = prepareBscDeployMultiTokenSignedTransaction;\n/**\n * Send Bsc invoke smart contract transaction to the blockchain.\n * Invoked method only reads from blockchain the data and returns them back.\n *\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n */\n\nconst sendBscSmartContractReadMethodInvocationTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.SmartContractReadMethodInvocation);\n  const {\n    params,\n    methodName,\n    methodABI,\n    contractAddress\n  } = body;\n  const client = exports.getBscClient(provider);\n  const contract = new client.eth.Contract([methodABI], contractAddress);\n  return {\n    data: await contract.methods[methodName](...params).call()\n  };\n};\n\nexports.sendBscSmartContractReadMethodInvocationTransaction = sendBscSmartContractReadMethodInvocationTransaction;\n/**\n * Send Bsc store data transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendBscStoreDataTransaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscStoreDataTransaction(body, provider), body.signatureId);\n\nexports.sendBscStoreDataTransaction = sendBscStoreDataTransaction;\n/**\n * Send Bsc or supported BEP20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendBscOrBep20Transaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscOrBep20SignedTransaction(body, provider), body.signatureId);\n\nexports.sendBscOrBep20Transaction = sendBscOrBep20Transaction;\n/**\n * Send Bsc custom BEP20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCustomBep20Transaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareCustomBep20SignedTransaction(body, provider), body.signatureId);\n\nexports.sendCustomBep20Transaction = sendCustomBep20Transaction;\n/**\n * Send Bsc deploy BEP20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendDeployBep20Transaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareDeployBep20SignedTransaction(body, provider), body.signatureId);\n\nexports.sendDeployBep20Transaction = sendDeployBep20Transaction;\n/**\n * Send Bsc invoke smart contract transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendBscSmartContractMethodInvocationTransaction = async (body, provider) => {\n  if (body.methodABI.stateMutability === 'view') {\n    return exports.sendBscSmartContractReadMethodInvocationTransaction(body, provider);\n  }\n\n  return blockchain_1.bscBroadcast(await exports.prepareBscSmartContractWriteMethodInvocation(body, provider), body.signatureId);\n};\n\nexports.sendBscSmartContractMethodInvocationTransaction = sendBscSmartContractMethodInvocationTransaction;\n/**\n * Send Bsc BEP721 mint transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendMintBep721Transaction = async (body, provider) => {\n  if (!body.fromPrivateKey && !body.fromPrivateKey) {\n    return nft_1.mintNFT(body);\n  }\n\n  return blockchain_1.bscBroadcast(await exports.prepareBscMintBep721SignedTransaction(body, provider), body.signatureId);\n};\n\nexports.sendMintBep721Transaction = sendMintBep721Transaction;\n\nconst sendBscGenerateCustodialWalletSignedTransaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscGenerateCustodialWalletSignedTransaction(body, provider), body.signatureId);\n\nexports.sendBscGenerateCustodialWalletSignedTransaction = sendBscGenerateCustodialWalletSignedTransaction; // MultiToken\n\nconst sendBscDeployMultiTokenTransaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscDeployMultiTokenSignedTransaction(body, provider));\n\nexports.sendBscDeployMultiTokenTransaction = sendBscDeployMultiTokenTransaction;\n\nconst sendBscMintMultiTokenTransaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscMintMultiTokenSignedTransaction(body, provider), body.signatureId);\n\nexports.sendBscMintMultiTokenTransaction = sendBscMintMultiTokenTransaction;\n\nconst sendBscMintMultiTokenBatchTransaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscMintMultiTokenBatchSignedTransaction(body, provider), body.signatureId);\n\nexports.sendBscMintMultiTokenBatchTransaction = sendBscMintMultiTokenBatchTransaction;\n/**\n * Send Bsc BEP721 mint transaction to the blockchain with cashback details. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendMintBepCashback721Transaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscMintBepCashback721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendMintBepCashback721Transaction = sendMintBepCashback721Transaction;\n/**\n * Send Bsc BEP721 mint multiple transaction with cashback to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendMintMultipleCashbackBep721Transaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscMintMultipleCashbackBep721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendMintMultipleCashbackBep721Transaction = sendMintMultipleCashbackBep721Transaction;\n/**\n * Send Bsc BEP721 mint multiple transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendMintMultipleBep721Transaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscMintMultipleBep721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendMintMultipleBep721Transaction = sendMintMultipleBep721Transaction;\n/**\n * Send Bsc BEP721 mint multiple provenance transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendMintMultipleBep721ProvenanceTransaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscMintMultipleBep721ProvenanceSignedTransaction(body, provider), body.signatureId);\n\nexports.sendMintMultipleBep721ProvenanceTransaction = sendMintMultipleBep721ProvenanceTransaction;\n/**\n * Send Bsc BEP721 mint provenance transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendMintBep721ProvenanceTransaction = async (body, provider) => {\n  return blockchain_1.bscBroadcast(await exports.prepareBscMintBep721ProvenanceSignedTransaction(body, provider), body.signatureId);\n};\n\nexports.sendMintBep721ProvenanceTransaction = sendMintBep721ProvenanceTransaction;\n/**\n * Send Bsc BEP721 burn transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendBurnBep721Transaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscBurnBep721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendBurnBep721Transaction = sendBurnBep721Transaction;\n\nconst sendUpdateCashbackForAuthorBep721Transaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscUpdateCashbackForAuthorErc721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendUpdateCashbackForAuthorBep721Transaction = sendUpdateCashbackForAuthorBep721Transaction; // Burn 1155\n\nconst sendBscBurnMultiTokenTransaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscBurnMultiTokenSignedTransaction(body, provider), body.signatureId);\n\nexports.sendBscBurnMultiTokenTransaction = sendBscBurnMultiTokenTransaction;\n\nconst sendBscBurnBatchMultiTokenTransaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscBurnMultiTokenBatchSignedTransaction(body, provider), body.signatureId);\n\nexports.sendBscBurnBatchMultiTokenTransaction = sendBscBurnBatchMultiTokenTransaction;\n/**\n * Send Bsc BEP721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendBep721Transaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscTransferBep721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendBep721Transaction = sendBep721Transaction;\n/**\n * Send Bsc MultiToken transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendBscMultiTokenTransaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscTransferMultiTokenSignedTransaction(body, provider), body.signatureId);\n\nexports.sendBscMultiTokenTransaction = sendBscMultiTokenTransaction;\n\nconst sendBscMultiTokenBatchTransaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscBatchTransferMultiTokenSignedTransaction(body, provider), body.signatureId);\n\nexports.sendBscMultiTokenBatchTransaction = sendBscMultiTokenBatchTransaction;\n/**\n * Send Bsc BEP721 deploy to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendDeployBep721Transaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscDeployBep721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendDeployBep721Transaction = sendDeployBep721Transaction;\n/**\n * Deploy new smart contract for NFT marketplace logic. Smart contract enables marketplace operator to create new listing for NFT (ERC-721/1155).\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst sendBscDeployMarketplaceListingSignedTransaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscDeployMarketplaceListingSignedTransaction(body, provider), body.signatureId);\n\nexports.sendBscDeployMarketplaceListingSignedTransaction = sendBscDeployMarketplaceListingSignedTransaction;","map":{"version":3,"mappings":"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","names":["bscGetGasPriceInWei","web3_1","utils","toWei","exports","getBscClient","provider","fromPrivateKey","client","process","env","TATUM_API_URL","constants_1","TATUM_API_KEY","eth","accounts","wallet","clear","add","defaultAccount","address","prepareBscSignedTransactionAbstraction","transaction","signatureId","fee","gasPrice","tx","gas","gasLimit","undefined","JSON","stringify","_a","estimateGas","signTransaction","rawTransaction","signBscKMSTransaction","chain","model_1","BSC","Error","transactionConfig","parse","serializedTransaction","nonce","blockchain_1","getBscBep20ContractDecimals","testnet","contractAddress","contract","Contract","token_abi_1","trim","methods","decimals","call","prepareBscStoreDataTransaction","body","tatum_1","to","ethFee","data","hexData","isHex","stringToHex","toHex","addressNonce","customFee","Object","length","from","value","prepareMintBep20SignedTransaction","amount","token_abi_2","digits","bignumber_js_1","pow","mint","multipliedBy","toString","encodeABI","prepareBurnBep20SignedTransaction","burn","prepareBscOrBep20SignedTransaction","currency","transfer","prepareCustomBep20SignedTransaction","prepareDeployBep20SignedTransaction","name","symbol","supply","totalCap","deploy","token_bytecode_1","arguments","prepareBscGenerateCustodialWalletSignedTransaction","abi","code","wallet_1","prepareBscSmartContractWriteMethodInvocation","params","methodName","methodABI","web3_utils_1","prepareBscMintBep721SignedTransaction","tokenId","url","erc721_abi_1","mintWithTokenURI","prepareBscMintMultipleBep721ProvenanceSignedTransaction","authorAddresses","cashbackValues","fixedValues","erc20","erc721Provenance_abi_1","cb","fv","i","cb2","fv2","j","push","mintMultiple","map","t","prepareBscMintBep721ProvenanceSignedTransaction","fval","c","prepareBscMintBepCashback721SignedTransaction","cashbacks","mintWithCashback","prepareBscMintMultipleCashbackBep721SignedTransaction","cashback","mintMultipleCashback","prepareBscMintMultipleBep721SignedTransaction","prepareBscBurnBep721SignedTransaction","prepareBscTransferBep721SignedTransaction","provenance","provenanceData","tokenPrice","dataBytes","Buffer","tokenData","safeTransfer","prepareBscUpdateCashbackForAuthorErc721SignedTransaction","cashbackValue","updateCashbackForAuthor","prepareBscDeployBep721SignedTransaction","publicMint","erc721_abi_2","erc721_bytecode_2","erc721Provenance_bytecode_1","erc721_bytecode_1","prepareBscDeployMarketplaceListingSignedTransaction","deployContract","marketplace_1","marketplaceFee","feeRecipient","prepareBscDeployAuctionSignedTransaction","auctionFee","bytecode","args","prepareBscBurnMultiTokenSignedTransaction","account","erc1155_abi_1","prepareBscBurnMultiTokenBatchSignedTransaction","amounts","burnBatch","prepareBscTransferMultiTokenSignedTransaction","prepareBscBatchTransferMultiTokenSignedTransaction","amts","amt","safeBatchTransfer","token","prepareBscMintMultiTokenSignedTransaction","prepareBscMintMultiTokenBatchSignedTransaction","mintBatch","prepareBscDeployMultiTokenSignedTransaction","uri","erc1155_bytecode_1","sendBscSmartContractReadMethodInvocationTransaction","sendBscStoreDataTransaction","sendBscOrBep20Transaction","sendCustomBep20Transaction","sendDeployBep20Transaction","sendBscSmartContractMethodInvocationTransaction","stateMutability","sendMintBep721Transaction","nft_1","sendBscGenerateCustodialWalletSignedTransaction","sendBscDeployMultiTokenTransaction","sendBscMintMultiTokenTransaction","sendBscMintMultiTokenBatchTransaction","sendMintBepCashback721Transaction","sendMintMultipleCashbackBep721Transaction","sendMintMultipleBep721Transaction","sendMintMultipleBep721ProvenanceTransaction","sendMintBep721ProvenanceTransaction","sendBurnBep721Transaction","sendUpdateCashbackForAuthorBep721Transaction","sendBscBurnMultiTokenTransaction","sendBscBurnBatchMultiTokenTransaction","sendBep721Transaction","sendBscMultiTokenTransaction","sendBscMultiTokenBatchTransaction","sendDeployBep721Transaction","sendBscDeployMarketplaceListingSignedTransaction"],"sourceRoot":"","sources":["../../../src/transaction/bsc.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}