{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendAlgoBurnFTSignedTransaction = exports.prepareAlgoBurnFTSignedTransaction = exports.sendAlgoTransferFTSignedTransaction = exports.prepareAlgoTransferFTSignedTransaction = exports.sendAlgoCreateFTSignedTransaction = exports.prepareAlgoCreateFTSignedTransaction = exports.sendAlgoBurnFractionalNFTSignedTransaction = exports.prepareAlgoBurnFractionalNFTSignedTransaction = exports.sendAlgoTransferFractionalNFTSignedTransaction = exports.prepareAlgoTransferFractionalNFTSignedTransaction = exports.sendAlgoCreateFractionalNFTSignedTransaction = exports.prepareAlgoCreateFractionalNFTSignedTransaction = exports.sendAlgoBurnNFTSignedTransaction = exports.prepareAlgoBurnNFTSignedTransaction = exports.sendAlgoTransferNFTSignedTransaction = exports.prepareAlgoTransferNFTSignedTransaction = exports.sendAlgoCreateNFTSignedTransaction = exports.prepareAlgoCreateNFTSignedTransaction = exports.signAlgoKMSTransaction = exports.sendAlgoSignedTransaction = exports.prepareAlgoSignedTransaction = exports.getAlgoIndexerClient = exports.getAlgoClient = void 0;\n\nconst algosdk = require('algosdk');\n\nconst base32 = require('base32.js');\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst util_1 = require(\"util\");\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst model_1 = require(\"../model\");\n\nconst wallet_1 = require(\"../wallet\");\n\nconst Url = require('url-parse');\n/**\n * Algod V2 Client\n * @param testnet if the algorand node is testnet or not\n * @param provider url of the algorand server endpoint\n * @returns algorand Client\n */\n\n\nconst getAlgoClient = (testnet, provider) => {\n  if (provider) {\n    return new algosdk.Algodv2(`${(testnet ? process.env.TATUM_ALGORAND_TESTNET_TOKEN : process.env.TATUM_ALGORAND_MAINNET_TOKEN) || 'DUMMYTOKEN'}`, provider, Url(provider).port);\n  } else {\n    return new algosdk.Algodv2({\n      'X-API-Key': testnet ? `${process.env.TATUM_ALGORAND_TESTNET_THIRD_API_KEY}` : `${process.env.TATUM_ALGORAND_MAINNET_THIRD_API_KEY}`\n    }, testnet ? `${process.env.TATUM_ALGORAND_TESTNET_THIRD_API_ALGOD_URL}` : `${process.env.TATUM_ALGORAND_MAINNET_THIRD_API_ALGOD_URL}`, '');\n  }\n};\n\nexports.getAlgoClient = getAlgoClient;\n/**\n * Algo Indexer Client\n * @param testnet if the algorand node is testnet or not\n * @param provider url of the algorand server endpoint\n * @returns algorand Indexer Client\n */\n\nconst getAlgoIndexerClient = (testnet, provider) => {\n  if (provider) {\n    return new algosdk.Indexer(`${(testnet ? process.env.TATUM_ALGORAND_TESTNET_TOKEN : process.env.TATUM_ALGORAND_MAINNET_TOKEN) || 'DUMMYTOKEN'}`, provider, Url(provider).port);\n  } else {\n    return new algosdk.Indexer({\n      'X-API-Key': testnet ? `${process.env.TATUM_ALGORAND_TESTNET_THIRD_API_KEY}` : `${process.env.TATUM_ALGORAND_MAINNET_THIRD_API_KEY}`\n    }, testnet ? `${process.env.TATUM_ALGORAND_TESTNET_THIRD_API_INDEXER_URL}` : `${process.env.TATUM_ALGORAND_MAINNET_THIRD_API_INDEXER_URL}`, '');\n  }\n};\n\nexports.getAlgoIndexerClient = getAlgoIndexerClient;\n/**\n * Algorand transaction signing\n * @param testnet if the algorand node is testnet or not\n * @param tx content of the transaction to broadcast\n * @param provider url of the algorand server endpoint for purestake.io restapi\n * @returns transaction data to be broadcast to blockchain\n */\n\nconst prepareAlgoSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const enc = new util_1.TextEncoder();\n  const note = enc.encode(tx.note ? tx.note : '');\n  const txn = algosdk.makePaymentTxnWithSuggestedParams(tx.from, tx.to, new bignumber_js_1.default(tx.amount).multipliedBy(1000000).toNumber(), undefined, note, Object.assign(Object.assign({}, params), {\n    fee: new bignumber_js_1.default(tx.fee).multipliedBy(1000000).toNumber(),\n    flatFee: true\n  }));\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return txn.signTxn(secretKey);\n};\n\nexports.prepareAlgoSignedTransaction = prepareAlgoSignedTransaction;\n/**\n * Send Algorand transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendAlgoSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoSignedTransaction = sendAlgoSignedTransaction;\n/**\n * Sign Algorand pending transaction from Tatum KMS\n * @param tx pendding transaction from Tatum KMS\n * @param fromPrivateKey private key to sign transaction with\n * @param testnet mainnet or testnet version\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst signAlgoKMSTransaction = async (tx, fromPrivateKey, testnet, provider) => {\n  if (tx.chain !== model_1.Currency.ALGO) {\n    throw Error('Unsupported chain.');\n  }\n\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const txn = JSON.parse(tx.serializedTransaction);\n  txn.from = algosdk.encodeAddress(new Uint8Array(Object.values(txn.from.publicKey)));\n  txn.to = algosdk.encodeAddress(new Uint8Array(Object.values(txn.to.publicKey)));\n  txn.note = new Uint8Array(Object.values(txn.note || ''));\n  txn.lease = undefined;\n\n  if (txn.tag) {\n    if (txn.tag.data) {\n      txn.tag = Buffer.from(txn.tag.data);\n    }\n  }\n\n  txn.genesisHash = Buffer.from(txn.genesisHash.data);\n\n  if (txn.assetManager) {\n    txn.assetManager = algosdk.encodeAddress(new Uint8Array(Object.values(txn.assetManager.publicKey)));\n  }\n\n  if (txn.assetReserve) {\n    txn.assetReserve = undefined;\n  }\n\n  if (txn.assetFreeze) {\n    txn.assetFreeze = undefined;\n  }\n\n  if (txn.assetClawback) {\n    txn.assetClawback = undefined;\n  }\n\n  if (txn.assetRevocationTarget) {\n    txn.assetRevocationTarget = undefined;\n  }\n\n  if (txn.reKeyTo) {\n    txn.reKeyTo = undefined;\n  }\n\n  if (txn.assetMetadataHash) {\n    txn.assetMetadataHash = new Uint8Array(Object.values(txn.assetMetadataHash));\n  }\n\n  const _txn = new algosdk.Transaction(txn);\n\n  const secretKey = new Uint8Array(decoder.write(fromPrivateKey).buf);\n  return _txn.signTxn(secretKey);\n};\n\nexports.signAlgoKMSTransaction = signAlgoKMSTransaction;\n/**\n * Sign Algorand create NFT transaction with private key locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain\n */\n\nconst prepareAlgoCreateNFTSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const txn = algosdk.makeAssetCreateTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, 1, 0, false, tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, undefined, undefined, tx.symbol, tx.name, tx.url, undefined, params);\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return txn.signTxn(secretKey);\n};\n\nexports.prepareAlgoCreateNFTSignedTransaction = prepareAlgoCreateNFTSignedTransaction;\n/**\n * Send Algorand create NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendAlgoCreateNFTSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoCreateNFTSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoCreateNFTSignedTransaction = sendAlgoCreateNFTSignedTransaction;\n/**\n * Sign Algorand transfer NFT transaction with private key locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareAlgoTransferNFTSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const txn = algosdk.makeAssetTransferTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, tx.to, undefined, undefined, new bignumber_js_1.default(tx.value).toNumber(), undefined, new bignumber_js_1.default(tx.contractAddress).toNumber(), params, undefined);\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return txn.signTxn(secretKey);\n};\n\nexports.prepareAlgoTransferNFTSignedTransaction = prepareAlgoTransferNFTSignedTransaction;\n/**\n * Send Algorand Transfer NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain.\n */\n\nconst sendAlgoTransferNFTSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoTransferNFTSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoTransferNFTSignedTransaction = sendAlgoTransferNFTSignedTransaction;\n/**\n * Sign Algorand burn NFT transaction with private key locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareAlgoBurnNFTSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const txn = algosdk.makeAssetDestroyTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, new bignumber_js_1.default(tx.contractAddress).toNumber(), params, undefined);\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return txn.signTxn(secretKey);\n};\n\nexports.prepareAlgoBurnNFTSignedTransaction = prepareAlgoBurnNFTSignedTransaction;\n/**\n * Send Algorand burn NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain.\n */\n\nconst sendAlgoBurnNFTSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoBurnNFTSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoBurnNFTSignedTransaction = sendAlgoBurnNFTSignedTransaction;\n/**\n * Sign Algorand create Fractional NFT transaction with private key locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareAlgoCreateFractionalNFTSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const v = Math.floor(Math.log10(new bignumber_js_1.default(tx.amount).toNumber()));\n  const txn = algosdk.makeAssetCreateTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, new bignumber_js_1.default(10).pow(v).toNumber(), v, false, tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, undefined, undefined, tx.tokenId, tx.contractAddress, tx.url, undefined, params);\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return txn.signTxn(secretKey);\n};\n\nexports.prepareAlgoCreateFractionalNFTSignedTransaction = prepareAlgoCreateFractionalNFTSignedTransaction;\n/**\n * Send Algorand create Fractinoal NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain.\n */\n\nconst sendAlgoCreateFractionalNFTSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoCreateFractionalNFTSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoCreateFractionalNFTSignedTransaction = sendAlgoCreateFractionalNFTSignedTransaction;\n/**\n * Sign Algorand transfer Fractional NFT transaction with private key locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareAlgoTransferFractionalNFTSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const txn = algosdk.makeAssetTransferTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, tx.to, undefined, undefined, new bignumber_js_1.default(tx.amount).toNumber(), undefined, new bignumber_js_1.default(tx.contractAddress).toNumber(), params, undefined);\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return txn.signTxn(secretKey);\n};\n\nexports.prepareAlgoTransferFractionalNFTSignedTransaction = prepareAlgoTransferFractionalNFTSignedTransaction;\n/**\n * Send Algorand transfer Fractinoal NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain.\n */\n\nconst sendAlgoTransferFractionalNFTSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoTransferFractionalNFTSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoTransferFractionalNFTSignedTransaction = sendAlgoTransferFractionalNFTSignedTransaction;\n/**\n * Sign Algorand burn Fracational NFT transaction with private key locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connecto to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareAlgoBurnFractionalNFTSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const txn = algosdk.makeAssetDestroyTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, new bignumber_js_1.default(tx.contractAddress).toNumber(), params, undefined);\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return txn.signTxn(secretKey);\n};\n\nexports.prepareAlgoBurnFractionalNFTSignedTransaction = prepareAlgoBurnFractionalNFTSignedTransaction;\n/**\n * Send Algorand burn Fractional NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain.\n */\n\nconst sendAlgoBurnFractionalNFTSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoBurnFractionalNFTSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoBurnFractionalNFTSignedTransaction = sendAlgoBurnFractionalNFTSignedTransaction;\n/**\n * Sign Algorand create FT transaction with private key locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connnect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareAlgoCreateFTSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const txn = algosdk.makeAssetCreateTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, new bignumber_js_1.default(tx.supply).shiftedBy(new bignumber_js_1.default(tx.digits).toNumber()).toNumber(), new bignumber_js_1.default(tx.digits).toNumber(), false, tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, undefined, undefined, tx.symbol, tx.name, tx.url, undefined, params);\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return txn.signTxn(secretKey);\n};\n\nexports.prepareAlgoCreateFTSignedTransaction = prepareAlgoCreateFTSignedTransaction;\n/**\n * Send Algorand create FT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain.\n */\n\nconst sendAlgoCreateFTSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoCreateFTSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoCreateFTSignedTransaction = sendAlgoCreateFTSignedTransaction;\n/**\n * Sign Algorand transfer FT transaction with private kwy locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareAlgoTransferFTSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const txn = algosdk.makeAssetTransferTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, tx.to, undefined, undefined, new bignumber_js_1.default(tx.amount).shiftedBy(tx.digits || 1).toNumber(), undefined, new bignumber_js_1.default(tx.contractAddress).toNumber(), params, undefined);\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return txn.signTxn(secretKey);\n};\n\nexports.prepareAlgoTransferFTSignedTransaction = prepareAlgoTransferFTSignedTransaction;\n/**\n * Send Algorand transfer FT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain.\n */\n\nconst sendAlgoTransferFTSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoTransferFTSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoTransferFTSignedTransaction = sendAlgoTransferFTSignedTransaction;\n/**\n * Sign ALgorand burn FT transaction with private key locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareAlgoBurnFTSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const txn = algosdk.makeAssetDestroyTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, new bignumber_js_1.default(tx.contractAddress).toNumber(), params, undefined);\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return txn.signTxn(secretKey);\n};\n\nexports.prepareAlgoBurnFTSignedTransaction = prepareAlgoBurnFTSignedTransaction;\n/**\n * Sned Algorand burn FT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain.\n */\n\nconst sendAlgoBurnFTSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoBurnFTSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoBurnFTSignedTransaction = sendAlgoBurnFTSignedTransaction;","map":{"version":3,"mappings":"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","names":["algosdk","require","base32","Url","getAlgoClient","testnet","provider","Algodv2","process","env","TATUM_ALGORAND_TESTNET_TOKEN","TATUM_ALGORAND_MAINNET_TOKEN","port","TATUM_ALGORAND_TESTNET_THIRD_API_KEY","TATUM_ALGORAND_MAINNET_THIRD_API_KEY","TATUM_ALGORAND_TESTNET_THIRD_API_ALGOD_URL","TATUM_ALGORAND_MAINNET_THIRD_API_ALGOD_URL","exports","getAlgoIndexerClient","Indexer","TATUM_ALGORAND_TESTNET_THIRD_API_INDEXER_URL","TATUM_ALGORAND_MAINNET_THIRD_API_INDEXER_URL","prepareAlgoSignedTransaction","tx","algodClient","params","getTransactionParams","do","decoder","Decoder","type","enc","util_1","note","encode","txn","makePaymentTxnWithSuggestedParams","from","to","bignumber_js_1","amount","multipliedBy","toNumber","undefined","Object","fee","flatFee","signatureId","JSON","stringify","secretKey","Uint8Array","write","fromPrivateKey","buf","signTxn","sendAlgoSignedTransaction","blockchain_1","signAlgoKMSTransaction","chain","model_1","ALGO","Error","parse","serializedTransaction","encodeAddress","values","publicKey","lease","tag","data","Buffer","genesisHash","assetManager","assetReserve","assetFreeze","assetClawback","assetRevocationTarget","reKeyTo","assetMetadataHash","_txn","Transaction","prepareAlgoCreateNFTSignedTransaction","makeAssetCreateTxnWithSuggestedParams","wallet_1","symbol","name","url","sendAlgoCreateNFTSignedTransaction","prepareAlgoTransferNFTSignedTransaction","makeAssetTransferTxnWithSuggestedParams","value","contractAddress","sendAlgoTransferNFTSignedTransaction","prepareAlgoBurnNFTSignedTransaction","makeAssetDestroyTxnWithSuggestedParams","sendAlgoBurnNFTSignedTransaction","prepareAlgoCreateFractionalNFTSignedTransaction","v","Math","floor","log10","pow","tokenId","sendAlgoCreateFractionalNFTSignedTransaction","prepareAlgoTransferFractionalNFTSignedTransaction","sendAlgoTransferFractionalNFTSignedTransaction","prepareAlgoBurnFractionalNFTSignedTransaction","sendAlgoBurnFractionalNFTSignedTransaction","prepareAlgoCreateFTSignedTransaction","supply","shiftedBy","digits","sendAlgoCreateFTSignedTransaction","prepareAlgoTransferFTSignedTransaction","sendAlgoTransferFTSignedTransaction","prepareAlgoBurnFTSignedTransaction","sendAlgoBurnFTSignedTransaction"],"sourceRoot":"","sources":["../../../src/transaction/algo.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}