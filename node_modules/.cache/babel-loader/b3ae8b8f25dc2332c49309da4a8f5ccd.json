{"ast":null,"code":"import React, { useState } from 'react';\nimport { Form, Badge, Button, Container, ProgressBar, ListGroup, Image } from 'react-bootstrap';\nimport { create } from 'ipfs-http-client';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // A type of promise-like that resolves synchronously and supports only one observer\n\nconst _iteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\")) : \"@@iterator\";\n\nconst _asyncIteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\")) : \"@@asyncIterator\"; // Asynchronously call a function and send errors to recovery continuation\n\n\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nvar ipfs = create('https://ipfs.infura.io:5001/api/v0');\n\nvar FileUpload = function FileUpload(_ref) {\n  var setUrl = _ref.setUrl;\n\n  var _useState = useState({}),\n      file = _useState[0],\n      setFile = _useState[1];\n\n  var _useState2 = useState(''),\n      fileUrl = _useState2[0],\n      setFileUrl = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var _useState4 = useState(false),\n      uploaded = _useState4[0],\n      setUploaded = _useState4[1];\n\n  var uploadFile = function uploadFile(e) {\n    try {\n      var _temp3 = function _temp3() {\n        setLoading(false);\n      };\n\n      setLoading(true);\n      e.preventDefault();\n\n      var _temp4 = _catch(function () {\n        return Promise.resolve(ipfs.add(file)).then(function (added) {\n          var url = \"https://ipfs.infura.io/ipfs/\" + added.path;\n          setUrl(url);\n          setFileUrl(url);\n          setUploaded(true);\n        });\n      }, function (err) {\n        console.log('Error uploading the file : ', err);\n      });\n\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var preUpload = function preUpload(e) {\n    if (e.target.value !== '') {\n      setFile(e.target.files[0]);\n    } else {\n      setFile({});\n    }\n  };\n\n  var fileAndUploadButton = function fileAndUploadButton() {\n    if (file.name) {\n      if (!loading) {\n        return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"h5\", null, file.name, \" \", /*#__PURE__*/React.createElement(Badge, {\n          pill: true\n        }, file.size, \" kb\")), uploaded ? /*#__PURE__*/React.createElement(\"h5\", null, \"\\u2705\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n          href: fileUrl,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\"\n        }, \"File\"), ' ', \"Uploaded Successfully \\u2705\") : /*#__PURE__*/React.createElement(Button, {\n          type: \"submit\"\n        }, \"Upload File\"));\n      } else {\n        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(\"h4\", null, \"Uploading File\"), /*#__PURE__*/React.createElement(ProgressBar, {\n          animated: true,\n          now: 100\n        }), /*#__PURE__*/React.createElement(\"h4\", null, \"Please Wait ...\"));\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: uploadFile\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    required: true,\n    type: \"file\",\n    onChange: function onChange(e) {\n      return preUpload(e);\n    },\n    className: \"mb-3\"\n  }), fileAndUploadButton()));\n};\n\nvar ipfs$1 = create('https://ipfs.infura.io:5001/api/v0');\n\nvar all = require('it-all');\n\nvar MultipleFilesUpload = function MultipleFilesUpload(_ref) {\n  var setUrl = _ref.setUrl;\n\n  var _useState = useState([]),\n      files = _useState[0],\n      setFiles = _useState[1];\n\n  var _useState2 = useState(''),\n      filesUrl = _useState2[0],\n      setFilesUrl = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var _useState4 = useState(false),\n      uploaded = _useState4[0],\n      setUploaded = _useState4[1];\n\n  var uploadFiles = function uploadFiles() {\n    try {\n      var fileObjectsArray = Array.from(files).map(function (file) {\n        return {\n          path: file.name,\n          content: file\n        };\n      });\n      return Promise.resolve(all(ipfs$1.addAll(fileObjectsArray, {\n        wrapWithDirectory: true\n      }))).then(function (results) {\n        console.log(results);\n        return results;\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var returnFilesUrl = function returnFilesUrl(e) {\n    try {\n      setLoading(true);\n      e.preventDefault();\n      return Promise.resolve(uploadFiles(files)).then(function (results) {\n        var length = results.length;\n\n        var FilesHash = results[length - 1].cid._baseCache.get('z');\n\n        var FilesUrl = 'https://ipfs.infura.io/ipfs/' + FilesHash;\n        setUrl(FilesUrl);\n        setFilesUrl(FilesUrl);\n        setLoading(false);\n        setUploaded(true);\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var filesAndUploadButton = function filesAndUploadButton() {\n    if (files.length !== 0) {\n      if (!loading) {\n        return /*#__PURE__*/React.createElement(\"div\", null, uploaded ? /*#__PURE__*/React.createElement(\"h5\", null, \"\\u2705\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n          href: filesUrl,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\"\n        }, \"Files\"), ' ', \"Uploaded Successfully \\u2705\") : /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Button, {\n          className: \"mb-3\",\n          type: \"submit\"\n        }, \"Upload Files\"), /*#__PURE__*/React.createElement(ListGroup, {\n          className: \"mb-3\"\n        }, Array.from(files).map(function (file) {\n          return /*#__PURE__*/React.createElement(ListGroup.Item, {\n            as: \"li\",\n            className: \"d-flex justify-content-between align-items-start\"\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            className: \"ms-2 me-auto\"\n          }, file.name), /*#__PURE__*/React.createElement(Badge, {\n            pill: true\n          }, file.size, \" kb\"));\n        }))));\n      } else {\n        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(\"h4\", null, \"Uploading Files\"), /*#__PURE__*/React.createElement(ProgressBar, {\n          animated: true,\n          now: 100\n        }), /*#__PURE__*/React.createElement(\"h4\", null, \"Please Wait ...\"));\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: returnFilesUrl\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    required: true,\n    type: \"file\",\n    multiple: true,\n    onChange: function onChange(e) {\n      return setFiles(e.target.files);\n    },\n    className: \"mb-3\"\n  }), filesAndUploadButton()));\n};\n\nvar ipfs$2 = create('https://ipfs.infura.io:5001/api/v0');\n\nvar all$1 = require('it-all');\n\nvar FolderUpload = function FolderUpload(_ref) {\n  var setUrl = _ref.setUrl;\n\n  var _useState = useState([]),\n      files = _useState[0],\n      setFiles = _useState[1];\n\n  var _useState2 = useState(''),\n      folderUrl = _useState2[0],\n      setFolderUrl = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var _useState4 = useState(false),\n      uploaded = _useState4[0],\n      setUploaded = _useState4[1];\n\n  var uploadFiles = function uploadFiles() {\n    try {\n      var fileObjectsArray = Array.from(files).map(function (file) {\n        return {\n          path: file.name,\n          content: file\n        };\n      });\n      return Promise.resolve(all$1(ipfs$2.addAll(fileObjectsArray, {\n        wrapWithDirectory: true\n      }))).then(function (results) {\n        console.log(results);\n        return results;\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var returnFilesUrl = function returnFilesUrl(e) {\n    try {\n      setLoading(true);\n      e.preventDefault();\n      return Promise.resolve(uploadFiles(files)).then(function (results) {\n        var length = results.length;\n\n        var FilesHash = results[length - 1].cid._baseCache.get('z');\n\n        var FilesUrl = 'https://ipfs.infura.io/ipfs/' + FilesHash;\n        console.log(FilesUrl);\n        setUrl(FilesUrl);\n        setFolderUrl(FilesUrl);\n        setLoading(false);\n        setUploaded(true);\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var filesAndUploadButton = function filesAndUploadButton() {\n    if (files.length !== 0) {\n      if (!loading) {\n        return /*#__PURE__*/React.createElement(\"div\", null, uploaded ? /*#__PURE__*/React.createElement(\"h5\", null, \"\\u2705\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n          href: folderUrl,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\"\n        }, \"Folder\"), ' ', \"Uploaded Successfully \\u2705\") : /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Button, {\n          type: \"submit\",\n          className: \"mb-3\"\n        }, \"Upload Folder\"), /*#__PURE__*/React.createElement(ListGroup, {\n          className: \"mb-3\"\n        }, Array.from(files).map(function (file) {\n          return /*#__PURE__*/React.createElement(ListGroup.Item, {\n            as: \"li\",\n            className: \"d-flex justify-content-between align-items-start\"\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            className: \"ms-2 me-auto\"\n          }, file.name), /*#__PURE__*/React.createElement(Badge, {\n            pill: true\n          }, file.size, \" kb\"));\n        }))));\n      } else {\n        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(\"h4\", null, \"Uploading Folder\"), /*#__PURE__*/React.createElement(ProgressBar, {\n          animated: true,\n          now: 100\n        }), /*#__PURE__*/React.createElement(\"h4\", null, \"Please Wait ...\"));\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: returnFilesUrl\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    required: true,\n    type: \"file\",\n    webkitdirectory: \"true\",\n    multiple: true,\n    onChange: function onChange(e) {\n      return setFiles(e.target.files);\n    },\n    className: \"mb-3\"\n  }), filesAndUploadButton()));\n};\n\nvar ipfs$3 = create('https://ipfs.infura.io:5001/api/v0');\n\nvar ImageUpload = function ImageUpload(_ref) {\n  var setUrl = _ref.setUrl;\n\n  var _useState = useState({}),\n      image = _useState[0],\n      setImage = _useState[1];\n\n  var _useState2 = useState(''),\n      imagePreview = _useState2[0],\n      setImagePreview = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var _useState4 = useState(false),\n      uploaded = _useState4[0],\n      setUploaded = _useState4[1];\n\n  var createPreview = function createPreview(e) {\n    if (e.target.value !== '') {\n      setImage(e.target.files[0]);\n      var src = URL.createObjectURL(e.target.files[0]);\n      setImagePreview(src);\n    } else {\n      setImagePreview('');\n    }\n  };\n\n  var uploadFile = function uploadFile(e) {\n    try {\n      var _temp3 = function _temp3() {\n        setLoading(false);\n      };\n\n      setLoading(true);\n      e.preventDefault();\n\n      var _temp4 = _catch(function () {\n        return Promise.resolve(ipfs$3.add(image)).then(function (added) {\n          var url = \"https://ipfs.infura.io/ipfs/\" + added.path;\n          setUrl(url);\n          setImagePreview(url);\n          setUploaded(true);\n        });\n      }, function (err) {\n        console.log('Error uploading the file : ', err);\n      });\n\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var previewAndUploadButton = function previewAndUploadButton() {\n    if (imagePreview !== '') {\n      if (!loading) {\n        return /*#__PURE__*/React.createElement(\"div\", null, uploaded ? /*#__PURE__*/React.createElement(\"h5\", null, \"\\u2705\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n          href: imagePreview,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\"\n        }, \"Image\"), ' ', \"Uploaded Successfully \\u2705\", ' ') : /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Button, {\n          type: \"submit\",\n          className: \"mb-3\"\n        }, \"Upload Image\"), /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"h5\", null, image.name, ' ', /*#__PURE__*/React.createElement(Badge, {\n          pill: true\n        }, image.size, \" kb\")), /*#__PURE__*/React.createElement(Image, {\n          style: {\n            height: '300px'\n          },\n          className: \"mb-3\",\n          src: imagePreview,\n          thumbnail: true\n        })));\n      } else {\n        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(\"h4\", null, \"Uploading Image\"), /*#__PURE__*/React.createElement(ProgressBar, {\n          animated: true,\n          now: 100\n        }), /*#__PURE__*/React.createElement(\"h4\", null, \"Please Wait ...\"));\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: uploadFile\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    required: true,\n    type: \"file\",\n    accept: \"image/*\",\n    onChange: function onChange(e) {\n      return createPreview(e);\n    },\n    className: \"mb-3\"\n  }), previewAndUploadButton()));\n};\n\nvar ipfs$4 = create('https://ipfs.infura.io:5001/api/v0');\n\nvar PdfUpload = function PdfUpload(_ref) {\n  var setUrl = _ref.setUrl;\n\n  var _useState = useState({}),\n      pdf = _useState[0],\n      setPdf = _useState[1];\n\n  var _useState2 = useState(''),\n      pdfPreview = _useState2[0],\n      setPdfPreview = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var _useState4 = useState(false),\n      uploaded = _useState4[0],\n      setUploaded = _useState4[1];\n\n  var createPreview = function createPreview(e) {\n    if (e.target.value !== '') {\n      setPdf(e.target.files[0]);\n      var src = URL.createObjectURL(e.target.files[0]);\n      setPdfPreview(src);\n    } else {\n      setPdfPreview('');\n    }\n  };\n\n  var uploadFile = function uploadFile(e) {\n    try {\n      var _temp3 = function _temp3() {\n        setLoading(false);\n      };\n\n      setLoading(true);\n      e.preventDefault();\n\n      var _temp4 = _catch(function () {\n        return Promise.resolve(ipfs$4.add(pdf)).then(function (added) {\n          var url = \"https://ipfs.infura.io/ipfs/\" + added.path;\n          setPdfPreview(url);\n          setUrl(url);\n          setUploaded(true);\n        });\n      }, function (err) {\n        console.log('Error uploading the file : ', err);\n      });\n\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var previewAndUploadButton = function previewAndUploadButton() {\n    if (pdfPreview !== '') {\n      if (!loading) {\n        return /*#__PURE__*/React.createElement(\"div\", null, uploaded ? /*#__PURE__*/React.createElement(\"h5\", null, \"\\u2705\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n          href: pdfPreview,\n          s: true,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\"\n        }, \"PDF\"), ' ', \"Uploaded Successfully \\u2705\") : /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Button, {\n          type: \"submit\",\n          className: \"mb-3\"\n        }, \"Upload PDF\"), /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"h5\", null, pdf.name, \" \", /*#__PURE__*/React.createElement(Badge, {\n          pill: true\n        }, pdf.size, \" kb\")), /*#__PURE__*/React.createElement(\"embed\", {\n          width: \"75%\",\n          height: \"400px\",\n          className: \"mb-3\",\n          src: pdfPreview\n        })));\n      } else {\n        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(\"h4\", null, \"Uploading PDF\"), /*#__PURE__*/React.createElement(ProgressBar, {\n          animated: true,\n          now: 100\n        }), /*#__PURE__*/React.createElement(\"h4\", null, \"Please Wait ...\"));\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: uploadFile\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    required: true,\n    type: \"file\",\n    accept: \"application/pdf\",\n    onChange: function onChange(e) {\n      return createPreview(e);\n    },\n    className: \"mb-3\"\n  }), previewAndUploadButton()));\n};\n\nvar ipfs$5 = create('https://ipfs.infura.io:5001/api/v0');\n\nvar TextUpload = function TextUpload(_ref) {\n  var setUrl = _ref.setUrl;\n\n  var _useState = useState(''),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      uploaded = _useState3[0],\n      setUploaded = _useState3[1];\n\n  var _useState4 = useState(''),\n      textUrl = _useState4[0],\n      setTextUrl = _useState4[1];\n\n  var uploadText = function uploadText(e) {\n    try {\n      var _temp3 = function _temp3() {\n        setLoading(false);\n      };\n\n      setLoading(true);\n      e.preventDefault();\n\n      var _temp4 = _catch(function () {\n        return Promise.resolve(ipfs$5.add(text)).then(function (added) {\n          var url = \"https://ipfs.infura.io/ipfs/\" + added.path;\n          setTextUrl(url);\n          setUrl(url);\n          setUploaded(true);\n        });\n      }, function (err) {\n        console.log('Error uploading the file : ', err);\n      });\n\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var uploadButtonLoading = function uploadButtonLoading() {\n    if (text === '') return;\n\n    if (uploaded) {\n      return /*#__PURE__*/React.createElement(\"h5\", null, \"\\u2705\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n        href: textUrl,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\"\n      }, \"Text\"), ' ', \"Uploaded Successfully \\u2705\");\n    } else {\n      if (loading) {\n        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(\"h4\", null, \"Uploading Text\"), /*#__PURE__*/React.createElement(ProgressBar, {\n          animated: true,\n          now: 100\n        }), /*#__PURE__*/React.createElement(\"h4\", null, \"Please Wait ...\"));\n      } else {\n        return /*#__PURE__*/React.createElement(Button, {\n          type: \"submit\"\n        }, \"Upload Text\");\n      }\n    }\n  };\n\n  var textForm = function textForm() {\n    if (loading || uploaded) {\n      return /*#__PURE__*/React.createElement(Form, null, /*#__PURE__*/React.createElement(Form.Group, {\n        className: \"mb-3\"\n      }, /*#__PURE__*/React.createElement(Form.Label, null, \"Enter the Text :\"), /*#__PURE__*/React.createElement(Form.Control, {\n        onChange: function onChange(e) {\n          return setText(e.target.value);\n        },\n        readOnly: true,\n        as: \"textarea\",\n        rows: 3\n      })), uploadButtonLoading());\n    } else {\n      return /*#__PURE__*/React.createElement(Form, {\n        onSubmit: uploadText\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        className: \"mb-3\"\n      }, /*#__PURE__*/React.createElement(Form.Label, null, \"Enter the Text :\"), /*#__PURE__*/React.createElement(Form.Control, {\n        onChange: function onChange(e) {\n          return setText(e.target.value);\n        },\n        required: true,\n        as: \"textarea\",\n        rows: 3\n      })), uploadButtonLoading());\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", null, textForm());\n};\n\nexport { FileUpload, FolderUpload, ImageUpload, MultipleFilesUpload, PdfUpload, TextUpload };","map":{"version":3,"mappings":";;;+CAAA;;AAoKO,MAAMA,eAAe,gBAAiB,OAAOC,MAAP,KAAkB,WAAlB,GAAiCA,MAAM,CAACC,QAAP,KAAoBD,MAAM,CAACC,QAAP,GAAkBD,MAAM,CAAC,iBAAD,CAA5C,CAAjC,GAAqG,YAA3I;;AA6DA,MAAME,oBAAoB,gBAAiB,OAAOF,MAAP,KAAkB,WAAlB,GAAiCA,MAAM,CAACG,aAAP,KAAyBH,MAAM,CAACG,aAAP,GAAuBH,MAAM,CAAC,sBAAD,CAAtD,CAAjC,GAAoH,iBAA/J,C,CAgVP;;;AACO,SAASI,MAAT,CAAgBC,IAAhB,EAAsBC,OAAtB,EAA+B;AACrC,MAAI;AACH,QAAIC,MAAM,GAAGF,IAAI,EAAjB;AACA,GAFD,CAEE,OAAMG,CAAN,EAAS;AACV,WAAOF,OAAO,CAACE,CAAD,CAAd;AACA;;AACD,MAAID,MAAM,IAAIA,MAAM,CAACE,IAArB,EAA2B;AAC1B,WAAOF,MAAM,CAACE,IAAP,CAAY,KAAK,CAAjB,EAAoBH,OAApB,CAAP;AACA;;AACD,SAAOC,MAAP;AACD;;ACzjBA,IAAMG,IAAI,GAAGC,MAAc,CAAC,oCAAD,CAA3B;;AAEA,IAAaC,UAAU,GAAG,SAAbA,UAAa,OAAgB;AAAA,MAAbC,MAAa,QAAbA,MAAa;;AACtC,kBAAwBC,QAAQ,CAAC,EAAD,CAAhC;AAAA,MAAOC,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAA8BF,QAAQ,CAAC,EAAD,CAAtC;AAAA,MAAOG,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAA8BJ,QAAQ,CAAC,KAAD,CAAtC;AAAA,MAAOK,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAAgCN,QAAQ,CAAC,KAAD,CAAxC;AAAA,MAAOO,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAMC,UAAU,YAAVA,UAAU,CAAUf,CAAV;AAAA,QAAgB;AAAA;AAa5BY,kBAAU,CAAC,KAAD,CAAVA;AAb4B;;AAC5BA,gBAAU,CAAC,IAAD,CAAVA;AACAZ,OAAC,CAACgB,cAAFhB;;AAF4B,sCAIxB;AAAA,+BACoBE,IAAI,CAACe,GAALf,CAASK,IAATL,CADpB,iBACMgB,KADN;AAEA,cAAMC,GAAG,oCAAkCD,KAAK,CAACE,IAAjD;AACAf,gBAAM,CAACc,GAAD,CAANd;AACAK,oBAAU,CAACS,GAAD,CAAVT;AACAI,qBAAW,CAAC,IAAD,CAAXA;AALA;AAJwB,mBAUnBO,GAVmB,EAUd;AACVC,eAAO,CAACC,GAARD,CAAY,6BAAZA,EAA2CD,GAA3CC;AAXwB;;AAAA;AAAhB;AAAA;AAAA;AAAhB;;AAgBA,MAAME,SAAS,GAAG,SAAZA,SAAY,CAACxB,CAAD,EAAO;AACrB,QAAIA,CAAC,CAACyB,MAAFzB,CAAS0B,KAAT1B,KAAmB,EAAvB,EAA2B;AACvBQ,aAAO,CAACR,CAAC,CAACyB,MAAFzB,CAAS2B,KAAT3B,CAAe,CAAfA,CAAD,CAAPQ;AADJ,WAEO;AACHA,aAAO,CAAC,EAAD,CAAPA;AACH;AALL;;AAQA,MAAMoB,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAC9B,QAAIrB,IAAI,CAACsB,IAAT,EAAe;AACX,UAAI,CAAClB,OAAL,EAAc;AACV,4BACImB,8CACIA,gCACKvB,IAAI,CAACsB,IADV,oBACgBC,oBAACC,KAAD;AAAOC,cAAI;AAAX,WAAazB,IAAI,CAAC0B,IAAlB,QADhB,CADJ,EAKKpB,QAAQ,gBACLiB,0CACM,GADN,eAEIA;AACII,cAAI,EAAEzB,OADV;AAEIgB,gBAAM,EAAC,QAFX;AAGIU,aAAG,EAAC;AAHR,kBAFJ,EAQS,GART,iCADK,gBAaLL,oBAACM,MAAD;AAAQC,cAAI,EAAC;AAAb,yBAlBR,CADJ;AADJ,aAwBO;AACH,4BACIP,oBAACQ,SAAD,qBACIR,iDADJ,eAEIA,oBAACS,WAAD;AAAaC,kBAAQ,MAArB;AAAsBC,aAAG,EAAE;AAA3B,UAFJ,eAGIX,kDAHJ,CADJ;AAOH;AACJ;AAnCL;;AAsCA,sBACIA,8CACIA,oBAACY,IAAD;AAAMC,YAAQ,EAAE5B;AAAhB,kBACIe,oBAACY,IAAD,CAAME,OAAN;AACIC,YAAQ,MADZ;AAEIR,QAAI,EAAC,MAFT;AAGIS,YAAQ,EAAE,kBAAC9C,CAAD;AAAA,aAAOwB,SAAS,CAACxB,CAAD,CAAhB;AAHd;AAII+C,aAAS,EAAC;AAJd,IADJ,EAQKnB,mBAAmB,EARxB,CADJ,CADJ;AApEG,CAAP;;ACKA,IAAM1B,MAAI,GAAGC,MAAc,CAAC,oCAAD,CAA3B;;AACA,IAAM6C,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AAEA,IAAaC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAAgB;AAAA,MAAb7C,MAAa,QAAbA,MAAa;;AAC/C,kBAA0BC,QAAQ,CAAC,EAAD,CAAlC;AAAA,MAAOqB,KAAP;AAAA,MAAcwB,QAAd;;AACA,mBAAgC7C,QAAQ,CAAC,EAAD,CAAxC;AAAA,MAAO8C,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAA8B/C,QAAQ,CAAC,KAAD,CAAtC;AAAA,MAAOK,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAAgCN,QAAQ,CAAC,KAAD,CAAxC;AAAA,MAAOO,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAMwC,WAAW,YAAXA,WAAW;AAAA,QAAe;AAC5B,UAAIC,gBAAgB,GAAGC,KAAK,CAACC,IAAND,CAAW7B,KAAX6B,EAAkBE,GAAlBF,CAAsB,UAACjD,IAAD,EAAU;AACnD,eAAO;AACHa,cAAI,EAAEb,IAAI,CAACsB,IADR;AAEH8B,iBAAO,EAAEpD;AAFN,SAAP;AADmB,QAAvB;AAD4B,6BAQNyC,GAAG,CACrB9C,MAAI,CAAC0D,MAAL1D,CAAYqD,gBAAZrD,EAA8B;AAAE2D,yBAAiB,EAAE;AAArB,OAA9B3D,CADqB,CARG,iBAQtB4D,OARsB;AAY5BxC,eAAO,CAACC,GAARD,CAAYwC,OAAZxC;AACA,eAAOwC,OAAP;AAb4B;AAAf;AAAA;AAAA;AAAjB;;AAgBA,MAAMC,cAAc,YAAdA,cAAc,CAAU/D,CAAV;AAAA,QAAgB;AAChCY,gBAAU,CAAC,IAAD,CAAVA;AACAZ,OAAC,CAACgB,cAAFhB;AAFgC,6BAIVsD,WAAW,CAAC3B,KAAD,CAJD,iBAI1BmC,OAJ0B;AAKhC,YAAME,MAAM,GAAGF,OAAO,CAACE,MAAvB;;AACA,YAAMC,SAAS,GAAGH,OAAO,CAACE,MAAM,GAAG,CAAV,CAAPF,CAAoBI,GAApBJ,CAAwBK,UAAxBL,CAAmCM,GAAnCN,CAAuC,GAAvCA,CAAlB;;AACA,YAAMO,QAAQ,GAAG,iCAAiCJ,SAAlD;AACA5D,cAAM,CAACgE,QAAD,CAANhE;AACAgD,mBAAW,CAACgB,QAAD,CAAXhB;AACAzC,kBAAU,CAAC,KAAD,CAAVA;AACAE,mBAAW,CAAC,IAAD,CAAXA;AAXgC;AAAhB;AAAA;AAAA;AAApB;;AAcA,MAAMwD,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AAC/B,QAAI3C,KAAK,CAACqC,MAANrC,KAAiB,CAArB,EAAwB;AACpB,UAAI,CAAChB,OAAL,EAAc;AACV,4BACImB,iCACKjB,QAAQ,gBACLiB,0CACM,GADN,eAEIA;AACII,cAAI,EAAEkB,QADV;AAEI3B,gBAAM,EAAC,QAFX;AAGIU,aAAG,EAAC;AAHR,mBAFJ,EAQS,GART,iCADK,gBAaLL,8CACIA,oBAACM,MAAD;AAAQW,mBAAS,EAAC,MAAlB;AAAyBV,cAAI,EAAC;AAA9B,0BADJ,eAKIP,oBAACyC,SAAD;AAAWxB,mBAAS,EAAC;AAArB,WACKS,KAAK,CAACC,IAAND,CAAW7B,KAAX6B,EAAkBE,GAAlBF,CAAsB,UAACjD,IAAD,EAAU;AAC7B,8BACIuB,oBAACyC,SAAD,CAAWC,IAAX;AACIC,cAAE,EAAC,IADP;AAEI1B,qBAAS,EAAC;AAFd,0BAIIjB;AAAKiB,qBAAS,EAAC;AAAf,aACKxC,IAAI,CAACsB,IADV,CAJJ,eAOIC,oBAACC,KAAD;AAAOC,gBAAI;AAAX,aACKzB,IAAI,CAAC0B,IADV,QAPJ,CADJ;AADH,UADL,CALJ,CAdR,CADJ;AADJ,aA0CO;AACH,4BACIH,oBAACQ,SAAD,qBACIR,kDADJ,eAEIA,oBAACS,WAAD;AAAaC,kBAAQ,MAArB;AAAsBC,aAAG,EAAE;AAA3B,UAFJ,eAGIX,kDAHJ,CADJ;AAOH;AACJ;AArDL;;AAwDA,sBACIA,8CACIA,oBAACY,IAAD;AAAMC,YAAQ,EAAEoB;AAAhB,kBACIjC,oBAACY,IAAD,CAAME,OAAN;AACIC,YAAQ,MADZ;AAEIR,QAAI,EAAC,MAFT;AAGIqC,YAAQ,MAHZ;AAII5B,YAAQ,EAAE,kBAAC9C,CAAD;AAAA,aAAOmD,QAAQ,CAACnD,CAAC,CAACyB,MAAFzB,CAAS2B,KAAV,CAAf;AAJd;AAKIoB,aAAS,EAAC;AALd,IADJ,EASKuB,oBAAoB,EATzB,CADJ,CADJ;AA5FG,CAAP;;ACHA,IAAMpE,MAAI,GAAGC,MAAc,CAAC,oCAAD,CAA3B;;AACA,IAAM6C,KAAG,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AAEA,IAAa0B,YAAY,GAAG,SAAfA,YAAe,OAAgB;AAAA,MAAbtE,MAAa,QAAbA,MAAa;;AACxC,kBAA0BC,QAAQ,CAAC,EAAD,CAAlC;AAAA,MAAOqB,KAAP;AAAA,MAAcwB,QAAd;;AACA,mBAAkC7C,QAAQ,CAAC,EAAD,CAA1C;AAAA,MAAOsE,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAA8BvE,QAAQ,CAAC,KAAD,CAAtC;AAAA,MAAOK,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAAgCN,QAAQ,CAAC,KAAD,CAAxC;AAAA,MAAOO,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAMwC,WAAW,YAAXA,WAAW;AAAA,QAAe;AAC5B,UAAIC,gBAAgB,GAAGC,KAAK,CAACC,IAAND,CAAW7B,KAAX6B,EAAkBE,GAAlBF,CAAsB,UAACjD,IAAD,EAAU;AACnD,eAAO;AACHa,cAAI,EAAEb,IAAI,CAACsB,IADR;AAEH8B,iBAAO,EAAEpD;AAFN,SAAP;AADmB,QAAvB;AAD4B,6BAQNyC,KAAG,CACrB9C,MAAI,CAAC0D,MAAL1D,CAAYqD,gBAAZrD,EAA8B;AAAE2D,yBAAiB,EAAE;AAArB,OAA9B3D,CADqB,CARG,iBAQtB4D,OARsB;AAY5BxC,eAAO,CAACC,GAARD,CAAYwC,OAAZxC;AACA,eAAOwC,OAAP;AAb4B;AAAf;AAAA;AAAA;AAAjB;;AAgBA,MAAMC,cAAc,YAAdA,cAAc,CAAU/D,CAAV;AAAA,QAAgB;AAChCY,gBAAU,CAAC,IAAD,CAAVA;AACAZ,OAAC,CAACgB,cAAFhB;AAFgC,6BAIVsD,WAAW,CAAC3B,KAAD,CAJD,iBAI1BmC,OAJ0B;AAKhC,YAAME,MAAM,GAAGF,OAAO,CAACE,MAAvB;;AACA,YAAMC,SAAS,GAAGH,OAAO,CAACE,MAAM,GAAG,CAAV,CAAPF,CAAoBI,GAApBJ,CAAwBK,UAAxBL,CAAmCM,GAAnCN,CAAuC,GAAvCA,CAAlB;;AACA,YAAMO,QAAQ,GAAG,iCAAiCJ,SAAlD;AACA3C,eAAO,CAACC,GAARD,CAAY+C,QAAZ/C;AACAjB,cAAM,CAACgE,QAAD,CAANhE;AACAwE,oBAAY,CAACR,QAAD,CAAZQ;AACAjE,kBAAU,CAAC,KAAD,CAAVA;AACAE,mBAAW,CAAC,IAAD,CAAXA;AAZgC;AAAhB;AAAA;AAAA;AAApB;;AAeA,MAAMwD,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AAC/B,QAAI3C,KAAK,CAACqC,MAANrC,KAAiB,CAArB,EAAwB;AACpB,UAAI,CAAChB,OAAL,EAAc;AACV,4BACImB,iCACKjB,QAAQ,gBACLiB,0CACM,GADN,eAEIA;AACII,cAAI,EAAE0C,SADV;AAEInD,gBAAM,EAAC,QAFX;AAGIU,aAAG,EAAC;AAHR,oBAFJ,EAQS,GART,iCADK,gBAaLL,8CACIA,oBAACM,MAAD;AAAQC,cAAI,EAAC,QAAb;AAAsBU,mBAAS,EAAC;AAAhC,2BADJ,eAKIjB,oBAACyC,SAAD;AAAWxB,mBAAS,EAAC;AAArB,WACKS,KAAK,CAACC,IAAND,CAAW7B,KAAX6B,EAAkBE,GAAlBF,CAAsB,UAACjD,IAAD,EAAU;AAC7B,8BACIuB,oBAACyC,SAAD,CAAWC,IAAX;AACIC,cAAE,EAAC,IADP;AAEI1B,qBAAS,EAAC;AAFd,0BAIIjB;AAAKiB,qBAAS,EAAC;AAAf,aACKxC,IAAI,CAACsB,IADV,CAJJ,eAOIC,oBAACC,KAAD;AAAOC,gBAAI;AAAX,aACKzB,IAAI,CAAC0B,IADV,QAPJ,CADJ;AADH,UADL,CALJ,CAdR,CADJ;AADJ,aA0CO;AACH,4BACIH,oBAACQ,SAAD,qBACIR,mDADJ,eAEIA,oBAACS,WAAD;AAAaC,kBAAQ,MAArB;AAAsBC,aAAG,EAAE;AAA3B,UAFJ,eAGIX,kDAHJ,CADJ;AAOH;AACJ;AArDL;;AAwDA,sBACIA,8CACIA,oBAACY,IAAD;AAAMC,YAAQ,EAAEoB;AAAhB,kBACIjC,oBAACY,IAAD,CAAME,OAAN;AACIC,YAAQ,MADZ;AAEIR,QAAI,EAAC,MAFT;AAGIyC,mBAAe,EAAC,MAHpB;AAIIJ,YAAQ,MAJZ;AAKI5B,YAAQ,EAAE,kBAAC9C,CAAD;AAAA,aAAOmD,QAAQ,CAACnD,CAAC,CAACyB,MAAFzB,CAAS2B,KAAV,CAAf;AALd;AAMIoB,aAAS,EAAC;AANd,IADJ,EAUKuB,oBAAoB,EAVzB,CADJ,CADJ;AA7FG,CAAP;;ACHA,IAAMpE,MAAI,GAAGC,MAAc,CAAC,oCAAD,CAA3B;;AAEA,IAAa4E,WAAW,GAAG,SAAdA,WAAc,OAAgB;AAAA,MAAb1E,MAAa,QAAbA,MAAa;;AACvC,kBAA0BC,QAAQ,CAAC,EAAD,CAAlC;AAAA,MAAO0E,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAwC3E,QAAQ,CAAC,EAAD,CAAhD;AAAA,MAAO4E,YAAP;AAAA,MAAqBC,eAArB;;AACA,mBAA8B7E,QAAQ,CAAC,KAAD,CAAtC;AAAA,MAAOK,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAAgCN,QAAQ,CAAC,KAAD,CAAxC;AAAA,MAAOO,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAMsE,aAAa,GAAG,SAAhBA,aAAgB,CAACpF,CAAD,EAAO;AACzB,QAAIA,CAAC,CAACyB,MAAFzB,CAAS0B,KAAT1B,KAAmB,EAAvB,EAA2B;AACvBiF,cAAQ,CAACjF,CAAC,CAACyB,MAAFzB,CAAS2B,KAAT3B,CAAe,CAAfA,CAAD,CAARiF;AACA,UAAMI,GAAG,GAAGC,GAAG,CAACC,eAAJD,CAAoBtF,CAAC,CAACyB,MAAFzB,CAAS2B,KAAT3B,CAAe,CAAfA,CAApBsF,CAAZ;AACAH,qBAAe,CAACE,GAAD,CAAfF;AAHJ,WAIO;AACHA,qBAAe,CAAC,EAAD,CAAfA;AACH;AAPL;;AAUA,MAAMpE,UAAU,YAAVA,UAAU,CAAUf,CAAV;AAAA,QAAgB;AAAA;AAa5BY,kBAAU,CAAC,KAAD,CAAVA;AAb4B;;AAC5BA,gBAAU,CAAC,IAAD,CAAVA;AACAZ,OAAC,CAACgB,cAAFhB;;AAF4B,sCAIxB;AAAA,+BACoBE,MAAI,CAACe,GAALf,CAAS8E,KAAT9E,CADpB,iBACMgB,KADN;AAEA,cAAMC,GAAG,oCAAkCD,KAAK,CAACE,IAAjD;AACAf,gBAAM,CAACc,GAAD,CAANd;AACA8E,yBAAe,CAAChE,GAAD,CAAfgE;AACArE,qBAAW,CAAC,IAAD,CAAXA;AALA;AAJwB,mBAUnBO,GAVmB,EAUd;AACVC,eAAO,CAACC,GAARD,CAAY,6BAAZA,EAA2CD,GAA3CC;AAXwB;;AAAA;AAAhB;AAAA;AAAA;AAAhB;;AAgBA,MAAMkE,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AACjC,QAAIN,YAAY,KAAK,EAArB,EAAyB;AACrB,UAAI,CAACvE,OAAL,EAAc;AACV,4BACImB,iCACKjB,QAAQ,gBACLiB,0CACM,GADN,eAEIA;AACII,cAAI,EAAEgD,YADV;AAEIzD,gBAAM,EAAC,QAFX;AAGIU,aAAG,EAAC;AAHR,mBAFJ,EAQS,GART,kCAS4B,GAT5B,CADK,gBAaLL,8CACIA,oBAACM,MAAD;AAAQC,cAAI,EAAC,QAAb;AAAsBU,mBAAS,EAAC;AAAhC,0BADJ,eAIIjB,+BAJJ,eAKIA,gCACKkD,KAAK,CAACnD,IADX,EACiB,GADjB,eAEIC,oBAACC,KAAD;AAAOC,cAAI;AAAX,WAAagD,KAAK,CAAC/C,IAAnB,QAFJ,CALJ,eAUIH,oBAAC2D,KAAD;AACIC,eAAK,EAAE;AAAEC,kBAAM,EAAE;AAAV,WADX;AAEI5C,mBAAS,EAAC,MAFd;AAGIsC,aAAG,EAAEH,YAHT;AAIIU,mBAAS;AAJb,UAVJ,CAdR,CADJ;AADJ,aAoCO;AACH,4BACI9D,oBAACQ,SAAD,qBACIR,kDADJ,eAEIA,oBAACS,WAAD;AAAaC,kBAAQ,MAArB;AAAsBC,aAAG,EAAE;AAA3B,UAFJ,eAGIX,kDAHJ,CADJ;AAOH;AACJ;AA/CL;;AAkDA,sBACIA,8CACIA,oBAACY,IAAD;AAAMC,YAAQ,EAAE5B;AAAhB,kBACIe,oBAACY,IAAD,CAAME,OAAN;AACIC,YAAQ,MADZ;AAEIR,QAAI,EAAC,MAFT;AAGIwD,UAAM,EAAC,SAHX;AAII/C,YAAQ,EAAE,kBAAC9C,CAAD;AAAA,aAAOoF,aAAa,CAACpF,CAAD,CAApB;AAJd;AAKI+C,aAAS,EAAC;AALd,IADJ,EASKyC,sBAAsB,EAT3B,CADJ,CADJ;AAlFG,CAAP;;ACTA,IAAMtF,MAAI,GAAGC,MAAc,CAAC,oCAAD,CAA3B;;AAEA,IAAa2F,SAAS,GAAG,SAAZA,SAAY,OAAgB;AAAA,MAAbzF,MAAa,QAAbA,MAAa;;AACrC,kBAAsBC,QAAQ,CAAC,EAAD,CAA9B;AAAA,MAAOyF,GAAP;AAAA,MAAYC,MAAZ;;AACA,mBAAoC1F,QAAQ,CAAC,EAAD,CAA5C;AAAA,MAAO2F,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAA8B5F,QAAQ,CAAC,KAAD,CAAtC;AAAA,MAAOK,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAAgCN,QAAQ,CAAC,KAAD,CAAxC;AAAA,MAAOO,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAMsE,aAAa,GAAG,SAAhBA,aAAgB,CAACpF,CAAD,EAAO;AACzB,QAAIA,CAAC,CAACyB,MAAFzB,CAAS0B,KAAT1B,KAAmB,EAAvB,EAA2B;AACvBgG,YAAM,CAAChG,CAAC,CAACyB,MAAFzB,CAAS2B,KAAT3B,CAAe,CAAfA,CAAD,CAANgG;AACA,UAAMX,GAAG,GAAGC,GAAG,CAACC,eAAJD,CAAoBtF,CAAC,CAACyB,MAAFzB,CAAS2B,KAAT3B,CAAe,CAAfA,CAApBsF,CAAZ;AACAY,mBAAa,CAACb,GAAD,CAAba;AAHJ,WAIO;AACHA,mBAAa,CAAC,EAAD,CAAbA;AACH;AAPL;;AAUA,MAAMnF,UAAU,YAAVA,UAAU,CAAUf,CAAV;AAAA,QAAgB;AAAA;AAa5BY,kBAAU,CAAC,KAAD,CAAVA;AAb4B;;AAC5BA,gBAAU,CAAC,IAAD,CAAVA;AACAZ,OAAC,CAACgB,cAAFhB;;AAF4B,sCAIxB;AAAA,+BACoBE,MAAI,CAACe,GAALf,CAAS6F,GAAT7F,CADpB,iBACMgB,KADN;AAEA,cAAMC,GAAG,oCAAkCD,KAAK,CAACE,IAAjD;AACA8E,uBAAa,CAAC/E,GAAD,CAAb+E;AACA7F,gBAAM,CAACc,GAAD,CAANd;AACAS,qBAAW,CAAC,IAAD,CAAXA;AALA;AAJwB,mBAUnBO,GAVmB,EAUd;AACVC,eAAO,CAACC,GAARD,CAAY,6BAAZA,EAA2CD,GAA3CC;AAXwB;;AAAA;AAAhB;AAAA;AAAA;AAAhB;;AAgBA,MAAMkE,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AACjC,QAAIS,UAAU,KAAK,EAAnB,EAAuB;AACnB,UAAI,CAACtF,OAAL,EAAc;AACV,4BACImB,iCACKjB,QAAQ,gBACLiB,0CACM,GADN,eAEIA;AACII,cAAI,EAAE+D,UADV;AAEIE,WAAC,MAFL;AAGI1E,gBAAM,EAAC,QAHX;AAIIU,aAAG,EAAC;AAJR,iBAFJ,EASS,GATT,iCADK,gBAcLL,8CACIA,oBAACM,MAAD;AAAQC,cAAI,EAAC,QAAb;AAAsBU,mBAAS,EAAC;AAAhC,wBADJ,eAIIjB,+BAJJ,eAKIA,gCACKiE,GAAG,CAAClE,IADT,oBACeC,oBAACC,KAAD;AAAOC,cAAI;AAAX,WAAa+D,GAAG,CAAC9D,IAAjB,QADf,CALJ,eASIH;AACIsE,eAAK,EAAC,KADV;AAEIT,gBAAM,EAAC,OAFX;AAGI5C,mBAAS,EAAC,MAHd;AAIIsC,aAAG,EAAEY;AAJT,UATJ,CAfR,CADJ;AADJ,aAoCO;AACH,4BACInE,oBAACQ,SAAD,qBACIR,gDADJ,eAEIA,oBAACS,WAAD;AAAaC,kBAAQ,MAArB;AAAsBC,aAAG,EAAE;AAA3B,UAFJ,eAGIX,kDAHJ,CADJ;AAOH;AACJ;AA/CL;;AAkDA,sBACIA,8CACIA,oBAACY,IAAD;AAAMC,YAAQ,EAAE5B;AAAhB,kBACIe,oBAACY,IAAD,CAAME,OAAN;AACIC,YAAQ,MADZ;AAEIR,QAAI,EAAC,MAFT;AAGIwD,UAAM,EAAC,iBAHX;AAII/C,YAAQ,EAAE,kBAAC9C,CAAD;AAAA,aAAOoF,aAAa,CAACpF,CAAD,CAApB;AAJd;AAKI+C,aAAS,EAAC;AALd,IADJ,EASKyC,sBAAsB,EAT3B,CADJ,CADJ;AAlFG,CAAP;;ACFA,IAAMtF,MAAI,GAAGC,MAAc,CAAC,oCAAD,CAA3B;;AAEA,IAAakG,UAAU,GAAG,SAAbA,UAAa,OAAgB;AAAA,MAAbhG,MAAa,QAAbA,MAAa;;AACtC,kBAAwBC,QAAQ,CAAC,EAAD,CAAhC;AAAA,MAAOgG,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAA8BjG,QAAQ,CAAC,KAAD,CAAtC;AAAA,MAAOK,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAAgCN,QAAQ,CAAC,KAAD,CAAxC;AAAA,MAAOO,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAA8BR,QAAQ,CAAC,EAAD,CAAtC;AAAA,MAAOkG,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,UAAU,YAAVA,UAAU,CAAU1G,CAAV;AAAA,QAAgB;AAAA;AAa5BY,kBAAU,CAAC,KAAD,CAAVA;AAb4B;;AAC5BA,gBAAU,CAAC,IAAD,CAAVA;AACAZ,OAAC,CAACgB,cAAFhB;;AAF4B,sCAIxB;AAAA,+BACoBE,MAAI,CAACe,GAALf,CAASoG,IAATpG,CADpB,iBACMgB,KADN;AAEA,cAAMC,GAAG,oCAAkCD,KAAK,CAACE,IAAjD;AACAqF,oBAAU,CAACtF,GAAD,CAAVsF;AACApG,gBAAM,CAACc,GAAD,CAANd;AACAS,qBAAW,CAAC,IAAD,CAAXA;AALA;AAJwB,mBAUnBO,GAVmB,EAUd;AACVC,eAAO,CAACC,GAARD,CAAY,6BAAZA,EAA2CD,GAA3CC;AAXwB;;AAAA;AAAhB;AAAA;AAAA;AAAhB;;AAgBA,MAAMqF,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAC9B,QAAIL,IAAI,KAAK,EAAb,EAAiB;;AAEjB,QAAIzF,QAAJ,EAAc;AACV,0BACIiB,0CACM,GADN,eAEIA;AAAGI,YAAI,EAAEsE,OAAT;AAAkB/E,cAAM,EAAC,QAAzB;AAAkCU,WAAG,EAAC;AAAtC,gBAFJ,EAIS,GAJT,iCADJ;AADJ,WAUO;AACH,UAAIxB,OAAJ,EAAa;AACT,4BACImB,oBAACQ,SAAD,qBACIR,iDADJ,eAEIA,oBAACS,WAAD;AAAaC,kBAAQ,MAArB;AAAsBC,aAAG,EAAE;AAA3B,UAFJ,eAGIX,kDAHJ,CADJ;AADJ,aAQO;AACH,4BAAOA,oBAACM,MAAD;AAAQC,cAAI,EAAC;AAAb,yBAAP;AACH;AACJ;AAzBL;;AA4BA,MAAMuE,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnB,QAAIjG,OAAO,IAAIE,QAAf,EAAyB;AACrB,0BACIiB,oBAACY,IAAD,qBACIZ,oBAACY,IAAD,CAAMmE,KAAN;AAAY9D,iBAAS,EAAC;AAAtB,sBACIjB,oBAACY,IAAD,CAAMoE,KAAN,2BADJ,eAGIhF,oBAACY,IAAD,CAAME,OAAN;AACIE,gBAAQ,EAAE,kBAAC9C,CAAD;AAAA,iBAAOuG,OAAO,CAACvG,CAAC,CAACyB,MAAFzB,CAAS0B,KAAV,CAAd;AADd;AAEIqF,gBAAQ,MAFZ;AAGItC,UAAE,EAAC,UAHP;AAIIuC,YAAI,EAAE;AAJV,QAHJ,CADJ,EAYKL,mBAAmB,EAZxB,CADJ;AADJ,WAiBO;AACH,0BACI7E,oBAACY,IAAD;AAAMC,gBAAQ,EAAE+D;AAAhB,sBACI5E,oBAACY,IAAD,CAAMmE,KAAN;AAAY9D,iBAAS,EAAC;AAAtB,sBACIjB,oBAACY,IAAD,CAAMoE,KAAN,2BADJ,eAGIhF,oBAACY,IAAD,CAAME,OAAN;AACIE,gBAAQ,EAAE,kBAAC9C,CAAD;AAAA,iBAAOuG,OAAO,CAACvG,CAAC,CAACyB,MAAFzB,CAAS0B,KAAV,CAAd;AADd;AAEImB,gBAAQ,MAFZ;AAGI4B,UAAE,EAAC,UAHP;AAIIuC,YAAI,EAAE;AAJV,QAHJ,CADJ,EAYKL,mBAAmB,EAZxB,CADJ;AAgBH;AAnCL;;AAsCA,sBAAO7E,iCAAM8E,QAAQ,EAAd,CAAP;AAxFG,CAAP","names":["_iteratorSymbol","Symbol","iterator","_asyncIteratorSymbol","asyncIterator","_catch","body","recover","result","e","then","ipfs","ipfsHttpClient","FileUpload","setUrl","useState","file","setFile","fileUrl","setFileUrl","loading","setLoading","uploaded","setUploaded","uploadFile","preventDefault","add","added","url","path","err","console","log","preUpload","target","value","files","fileAndUploadButton","name","React","Badge","pill","size","href","rel","Button","type","Container","ProgressBar","animated","now","Form","onSubmit","Control","required","onChange","className","all","require","MultipleFilesUpload","setFiles","filesUrl","setFilesUrl","uploadFiles","fileObjectsArray","Array","from","map","content","addAll","wrapWithDirectory","results","returnFilesUrl","length","FilesHash","cid","_baseCache","get","FilesUrl","filesAndUploadButton","ListGroup","Item","as","multiple","FolderUpload","folderUrl","setFolderUrl","webkitdirectory","ImageUpload","image","setImage","imagePreview","setImagePreview","createPreview","src","URL","createObjectURL","previewAndUploadButton","Image","style","height","thumbnail","accept","PdfUpload","pdf","setPdf","pdfPreview","setPdfPreview","s","width","TextUpload","text","setText","textUrl","setTextUrl","uploadText","uploadButtonLoading","textForm","Group","Label","readOnly","rows"],"sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/components/FileUpload.js","../src/components/MultipleFilesUpload.js","../src/components/FolderUpload.js","../src/components/ImageUpload.js","../src/components/PdfUpload.js","../src/components/TextUpload.js"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import React, { useState } from 'react'\r\nimport { Form, Button, Badge, ProgressBar, Container } from 'react-bootstrap'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nconst ipfs = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\n\r\nexport const FileUpload = ({ setUrl }) => {\r\n    const [file, setFile] = useState({})\r\n    const [fileUrl, setFileUrl] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [uploaded, setUploaded] = useState(false)\r\n\r\n    const uploadFile = async (e) => {\r\n        setLoading(true)\r\n        e.preventDefault()\r\n\r\n        try {\r\n            const added = await ipfs.add(file)\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            setUrl(url)\r\n            setFileUrl(url)\r\n            setUploaded(true)\r\n        } catch (err) {\r\n            console.log('Error uploading the file : ', err)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    const preUpload = (e) => {\r\n        if (e.target.value !== '') {\r\n            setFile(e.target.files[0])\r\n        } else {\r\n            setFile({})\r\n        }\r\n    }\r\n\r\n    const fileAndUploadButton = () => {\r\n        if (file.name) {\r\n            if (!loading) {\r\n                return (\r\n                    <div>\r\n                        <h5>\r\n                            {file.name} <Badge pill>{file.size} kb</Badge>\r\n                        </h5>\r\n\r\n                        {uploaded ? (\r\n                            <h5>\r\n                                ✅{' '}\r\n                                <a\r\n                                    href={fileUrl}\r\n                                    target='_blank'\r\n                                    rel='noopener noreferrer'\r\n                                >\r\n                                    File\r\n                                </a>{' '}\r\n                                Uploaded Successfully ✅\r\n                            </h5>\r\n                        ) : (\r\n                            <Button type='submit'>Upload File</Button>\r\n                        )}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <Container>\r\n                        <h4>Uploading File</h4>\r\n                        <ProgressBar animated now={100} />\r\n                        <h4>Please Wait ...</h4>\r\n                    </Container>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form onSubmit={uploadFile}>\r\n                <Form.Control\r\n                    required\r\n                    type='file'\r\n                    onChange={(e) => preUpload(e)}\r\n                    className='mb-3'\r\n                />\r\n\r\n                {fileAndUploadButton()}\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nimport {\r\n    Form,\r\n    ListGroup,\r\n    Badge,\r\n    Button,\r\n    ProgressBar,\r\n    Container\r\n} from 'react-bootstrap'\r\nconst ipfs = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\nconst all = require('it-all')\r\n\r\nexport const MultipleFilesUpload = ({ setUrl }) => {\r\n    const [files, setFiles] = useState([])\r\n    const [filesUrl, setFilesUrl] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [uploaded, setUploaded] = useState(false)\r\n\r\n    const uploadFiles = async () => {\r\n        let fileObjectsArray = Array.from(files).map((file) => {\r\n            return {\r\n                path: file.name,\r\n                content: file\r\n            }\r\n        })\r\n\r\n        const results = await all(\r\n            ipfs.addAll(fileObjectsArray, { wrapWithDirectory: true })\r\n        )\r\n\r\n        console.log(results)\r\n        return results\r\n    }\r\n\r\n    const returnFilesUrl = async (e) => {\r\n        setLoading(true)\r\n        e.preventDefault()\r\n\r\n        const results = await uploadFiles(files)\r\n        const length = results.length\r\n        const FilesHash = results[length - 1].cid._baseCache.get('z')\r\n        const FilesUrl = 'https://ipfs.infura.io/ipfs/' + FilesHash\r\n        setUrl(FilesUrl)\r\n        setFilesUrl(FilesUrl)\r\n        setLoading(false)\r\n        setUploaded(true)\r\n    }\r\n\r\n    const filesAndUploadButton = () => {\r\n        if (files.length !== 0) {\r\n            if (!loading) {\r\n                return (\r\n                    <div>\r\n                        {uploaded ? (\r\n                            <h5>\r\n                                ✅{' '}\r\n                                <a\r\n                                    href={filesUrl}\r\n                                    target='_blank'\r\n                                    rel='noopener noreferrer'\r\n                                >\r\n                                    Files\r\n                                </a>{' '}\r\n                                Uploaded Successfully ✅\r\n                            </h5>\r\n                        ) : (\r\n                            <div>\r\n                                <Button className='mb-3' type='submit'>\r\n                                    Upload Files\r\n                                </Button>\r\n\r\n                                <ListGroup className='mb-3'>\r\n                                    {Array.from(files).map((file) => {\r\n                                        return (\r\n                                            <ListGroup.Item\r\n                                                as='li'\r\n                                                className='d-flex justify-content-between align-items-start'\r\n                                            >\r\n                                                <div className='ms-2 me-auto'>\r\n                                                    {file.name}\r\n                                                </div>\r\n                                                <Badge pill>\r\n                                                    {file.size} kb\r\n                                                </Badge>\r\n                                            </ListGroup.Item>\r\n                                        )\r\n                                    })}\r\n                                </ListGroup>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <Container>\r\n                        <h4>Uploading Files</h4>\r\n                        <ProgressBar animated now={100} />\r\n                        <h4>Please Wait ...</h4>\r\n                    </Container>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form onSubmit={returnFilesUrl}>\r\n                <Form.Control\r\n                    required\r\n                    type='file'\r\n                    multiple\r\n                    onChange={(e) => setFiles(e.target.files)}\r\n                    className='mb-3'\r\n                />\r\n\r\n                {filesAndUploadButton()}\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nimport {\r\n    Form,\r\n    ListGroup,\r\n    Badge,\r\n    Button,\r\n    ProgressBar,\r\n    Container\r\n} from 'react-bootstrap'\r\nconst ipfs = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\nconst all = require('it-all')\r\n\r\nexport const FolderUpload = ({ setUrl }) => {\r\n    const [files, setFiles] = useState([])\r\n    const [folderUrl, setFolderUrl] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [uploaded, setUploaded] = useState(false)\r\n\r\n    const uploadFiles = async () => {\r\n        let fileObjectsArray = Array.from(files).map((file) => {\r\n            return {\r\n                path: file.name,\r\n                content: file\r\n            }\r\n        })\r\n\r\n        const results = await all(\r\n            ipfs.addAll(fileObjectsArray, { wrapWithDirectory: true })\r\n        )\r\n\r\n        console.log(results)\r\n        return results\r\n    }\r\n\r\n    const returnFilesUrl = async (e) => {\r\n        setLoading(true)\r\n        e.preventDefault()\r\n\r\n        const results = await uploadFiles(files)\r\n        const length = results.length\r\n        const FilesHash = results[length - 1].cid._baseCache.get('z')\r\n        const FilesUrl = 'https://ipfs.infura.io/ipfs/' + FilesHash\r\n        console.log(FilesUrl)\r\n        setUrl(FilesUrl)\r\n        setFolderUrl(FilesUrl)\r\n        setLoading(false)\r\n        setUploaded(true)\r\n    }\r\n\r\n    const filesAndUploadButton = () => {\r\n        if (files.length !== 0) {\r\n            if (!loading) {\r\n                return (\r\n                    <div>\r\n                        {uploaded ? (\r\n                            <h5>\r\n                                ✅{' '}\r\n                                <a\r\n                                    href={folderUrl}\r\n                                    target='_blank'\r\n                                    rel='noopener noreferrer'\r\n                                >\r\n                                    Folder\r\n                                </a>{' '}\r\n                                Uploaded Successfully ✅\r\n                            </h5>\r\n                        ) : (\r\n                            <div>\r\n                                <Button type='submit' className='mb-3'>\r\n                                    Upload Folder\r\n                                </Button>\r\n\r\n                                <ListGroup className='mb-3'>\r\n                                    {Array.from(files).map((file) => {\r\n                                        return (\r\n                                            <ListGroup.Item\r\n                                                as='li'\r\n                                                className='d-flex justify-content-between align-items-start'\r\n                                            >\r\n                                                <div className='ms-2 me-auto'>\r\n                                                    {file.name}\r\n                                                </div>\r\n                                                <Badge pill>\r\n                                                    {file.size} kb\r\n                                                </Badge>\r\n                                            </ListGroup.Item>\r\n                                        )\r\n                                    })}\r\n                                </ListGroup>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <Container>\r\n                        <h4>Uploading Folder</h4>\r\n                        <ProgressBar animated now={100} />\r\n                        <h4>Please Wait ...</h4>\r\n                    </Container>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form onSubmit={returnFilesUrl}>\r\n                <Form.Control\r\n                    required\r\n                    type='file'\r\n                    webkitdirectory='true'\r\n                    multiple\r\n                    onChange={(e) => setFiles(e.target.files)}\r\n                    className='mb-3'\r\n                />\r\n\r\n                {filesAndUploadButton()}\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport {\r\n    Form,\r\n    Image,\r\n    Button,\r\n    ProgressBar,\r\n    Container,\r\n    Badge\r\n} from 'react-bootstrap'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nconst ipfs = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\n\r\nexport const ImageUpload = ({ setUrl }) => {\r\n    const [image, setImage] = useState({})\r\n    const [imagePreview, setImagePreview] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [uploaded, setUploaded] = useState(false)\r\n\r\n    const createPreview = (e) => {\r\n        if (e.target.value !== '') {\r\n            setImage(e.target.files[0])\r\n            const src = URL.createObjectURL(e.target.files[0])\r\n            setImagePreview(src)\r\n        } else {\r\n            setImagePreview('')\r\n        }\r\n    }\r\n\r\n    const uploadFile = async (e) => {\r\n        setLoading(true)\r\n        e.preventDefault()\r\n\r\n        try {\r\n            const added = await ipfs.add(image)\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            setUrl(url)\r\n            setImagePreview(url)\r\n            setUploaded(true)\r\n        } catch (err) {\r\n            console.log('Error uploading the file : ', err)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    const previewAndUploadButton = () => {\r\n        if (imagePreview !== '') {\r\n            if (!loading) {\r\n                return (\r\n                    <div>\r\n                        {uploaded ? (\r\n                            <h5>\r\n                                ✅{' '}\r\n                                <a\r\n                                    href={imagePreview}\r\n                                    target='_blank'\r\n                                    rel='noopener noreferrer'\r\n                                >\r\n                                    Image\r\n                                </a>{' '}\r\n                                Uploaded Successfully ✅{' '}\r\n                            </h5>\r\n                        ) : (\r\n                            <div>\r\n                                <Button type='submit' className='mb-3'>\r\n                                    Upload Image\r\n                                </Button>\r\n                                <br />\r\n                                <h5>\r\n                                    {image.name}{' '}\r\n                                    <Badge pill>{image.size} kb</Badge>\r\n                                </h5>\r\n\r\n                                <Image\r\n                                    style={{ height: '300px' }}\r\n                                    className='mb-3'\r\n                                    src={imagePreview}\r\n                                    thumbnail\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <Container>\r\n                        <h4>Uploading Image</h4>\r\n                        <ProgressBar animated now={100} />\r\n                        <h4>Please Wait ...</h4>\r\n                    </Container>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form onSubmit={uploadFile}>\r\n                <Form.Control\r\n                    required\r\n                    type='file'\r\n                    accept='image/*'\r\n                    onChange={(e) => createPreview(e)}\r\n                    className='mb-3'\r\n                />\r\n\r\n                {previewAndUploadButton()}\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Form, Button, ProgressBar, Container, Badge } from 'react-bootstrap'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nconst ipfs = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\n\r\nexport const PdfUpload = ({ setUrl }) => {\r\n    const [pdf, setPdf] = useState({})\r\n    const [pdfPreview, setPdfPreview] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [uploaded, setUploaded] = useState(false)\r\n\r\n    const createPreview = (e) => {\r\n        if (e.target.value !== '') {\r\n            setPdf(e.target.files[0])\r\n            const src = URL.createObjectURL(e.target.files[0])\r\n            setPdfPreview(src)\r\n        } else {\r\n            setPdfPreview('')\r\n        }\r\n    }\r\n\r\n    const uploadFile = async (e) => {\r\n        setLoading(true)\r\n        e.preventDefault()\r\n\r\n        try {\r\n            const added = await ipfs.add(pdf)\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            setPdfPreview(url)\r\n            setUrl(url)\r\n            setUploaded(true)\r\n        } catch (err) {\r\n            console.log('Error uploading the file : ', err)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    const previewAndUploadButton = () => {\r\n        if (pdfPreview !== '') {\r\n            if (!loading) {\r\n                return (\r\n                    <div>\r\n                        {uploaded ? (\r\n                            <h5>\r\n                                ✅{' '}\r\n                                <a\r\n                                    href={pdfPreview}\r\n                                    s\r\n                                    target='_blank'\r\n                                    rel='noopener noreferrer'\r\n                                >\r\n                                    PDF\r\n                                </a>{' '}\r\n                                Uploaded Successfully ✅\r\n                            </h5>\r\n                        ) : (\r\n                            <div>\r\n                                <Button type='submit' className='mb-3'>\r\n                                    Upload PDF\r\n                                </Button>\r\n                                <br />\r\n                                <h5>\r\n                                    {pdf.name} <Badge pill>{pdf.size} kb</Badge>\r\n                                </h5>\r\n\r\n                                <embed\r\n                                    width='75%'\r\n                                    height='400px'\r\n                                    className='mb-3'\r\n                                    src={pdfPreview}\r\n                                ></embed>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <Container>\r\n                        <h4>Uploading PDF</h4>\r\n                        <ProgressBar animated now={100} />\r\n                        <h4>Please Wait ...</h4>\r\n                    </Container>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form onSubmit={uploadFile}>\r\n                <Form.Control\r\n                    required\r\n                    type='file'\r\n                    accept='application/pdf'\r\n                    onChange={(e) => createPreview(e)}\r\n                    className='mb-3'\r\n                />\r\n\r\n                {previewAndUploadButton()}\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Form, Button, ProgressBar, Container } from 'react-bootstrap'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nconst ipfs = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\n\r\nexport const TextUpload = ({ setUrl }) => {\r\n    const [text, setText] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [uploaded, setUploaded] = useState(false)\r\n    const [textUrl, setTextUrl] = useState('')\r\n\r\n    const uploadText = async (e) => {\r\n        setLoading(true)\r\n        e.preventDefault()\r\n\r\n        try {\r\n            const added = await ipfs.add(text)\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            setTextUrl(url)\r\n            setUrl(url)\r\n            setUploaded(true)\r\n        } catch (err) {\r\n            console.log('Error uploading the file : ', err)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    const uploadButtonLoading = () => {\r\n        if (text === '') return\r\n\r\n        if (uploaded) {\r\n            return (\r\n                <h5>\r\n                    ✅{' '}\r\n                    <a href={textUrl} target='_blank' rel='noopener noreferrer'>\r\n                        Text\r\n                    </a>{' '}\r\n                    Uploaded Successfully ✅\r\n                </h5>\r\n            )\r\n        } else {\r\n            if (loading) {\r\n                return (\r\n                    <Container>\r\n                        <h4>Uploading Text</h4>\r\n                        <ProgressBar animated now={100} />\r\n                        <h4>Please Wait ...</h4>\r\n                    </Container>\r\n                )\r\n            } else {\r\n                return <Button type='submit'>Upload Text</Button>\r\n            }\r\n        }\r\n    }\r\n\r\n    const textForm = () => {\r\n        if (loading || uploaded) {\r\n            return (\r\n                <Form>\r\n                    <Form.Group className='mb-3'>\r\n                        <Form.Label>Enter the Text :</Form.Label>\r\n\r\n                        <Form.Control\r\n                            onChange={(e) => setText(e.target.value)}\r\n                            readOnly\r\n                            as='textarea'\r\n                            rows={3}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    {uploadButtonLoading()}\r\n                </Form>\r\n            )\r\n        } else {\r\n            return (\r\n                <Form onSubmit={uploadText}>\r\n                    <Form.Group className='mb-3'>\r\n                        <Form.Label>Enter the Text :</Form.Label>\r\n\r\n                        <Form.Control\r\n                            onChange={(e) => setText(e.target.value)}\r\n                            required\r\n                            as='textarea'\r\n                            rows={3}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    {uploadButtonLoading()}\r\n                </Form>\r\n            )\r\n        }\r\n    }\r\n\r\n    return <div>{textForm()}</div>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}