{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidatorPublicKey = exports.ValidatorSecretKey = exports.BLS = exports.VALIDATOR_PUBKEY_LENGTH = exports.VALIDATOR_SECRETKEY_LENGTH = void 0;\n\nconst errors = __importStar(require(\"../errors\"));\n\nconst utils_1 = require(\"../utils\");\n\nconst pem_1 = require(\"./pem\");\n\nconst bls = require('@elrondnetwork/bls-wasm');\n\nexports.VALIDATOR_SECRETKEY_LENGTH = 32;\nexports.VALIDATOR_PUBKEY_LENGTH = 96;\n\nclass BLS {\n  static initIfNecessary() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (BLS.isInitialized) {\n        return;\n      }\n\n      yield bls.init(bls.BLS12_381);\n      BLS.isInitialized = true;\n    });\n  }\n\n  static guardInitialized() {\n    if (!BLS.isInitialized) {\n      throw new errors.ErrInvariantFailed(\"BLS modules are not initalized. Make sure that 'await BLS.initIfNecessary()' is called correctly.\");\n    }\n  }\n\n}\n\nexports.BLS = BLS;\nBLS.isInitialized = false;\n\nclass ValidatorSecretKey {\n  constructor(buffer) {\n    BLS.guardInitialized();\n    utils_1.guardLength(buffer, exports.VALIDATOR_SECRETKEY_LENGTH);\n    this.secretKey = new bls.SecretKey();\n    this.secretKey.setLittleEndian(Uint8Array.from(buffer));\n    this.publicKey = this.secretKey.getPublicKey();\n  }\n\n  static fromPem(text) {\n    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return pem_1.parseValidatorKey(text, index);\n  }\n\n  generatePublicKey() {\n    let buffer = Buffer.from(this.publicKey.serialize());\n    return new ValidatorPublicKey(buffer);\n  }\n\n  sign(message) {\n    let signatureObject = this.secretKey.sign(message);\n    let signature = Buffer.from(signatureObject.serialize());\n    return signature;\n  }\n\n  hex() {\n    return this.valueOf().toString(\"hex\");\n  }\n\n  valueOf() {\n    return Buffer.from(this.secretKey.serialize());\n  }\n\n}\n\nexports.ValidatorSecretKey = ValidatorSecretKey;\n\nclass ValidatorPublicKey {\n  constructor(buffer) {\n    utils_1.guardLength(buffer, exports.VALIDATOR_PUBKEY_LENGTH);\n    this.buffer = buffer;\n  }\n\n  hex() {\n    return this.buffer.toString(\"hex\");\n  }\n\n  valueOf() {\n    return this.buffer;\n  }\n\n}\n\nexports.ValidatorPublicKey = ValidatorPublicKey;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,yBAAD,CAAnB;;AAEaC,qCAA6B,EAA7B;AACAA,kCAA0B,EAA1B;;AAEb,MAAaC,GAAb,CAAgB;AAGgB,SAAfC,eAAe;;AACxB,UAAID,GAAG,CAACE,aAAR,EAAuB;AACnB;AACH;;AAED,YAAML,GAAG,CAACM,IAAJ,CAASN,GAAG,CAACO,SAAb,CAAN;AAEAJ,SAAG,CAACE,aAAJ,GAAoB,IAApB;AACH;AAAA;;AAEsB,SAAhBG,gBAAgB;AACnB,QAAI,CAACL,GAAG,CAACE,aAAT,EAAwB;AACpB,YAAM,IAAII,MAAM,CAACC,kBAAX,CAA8B,mGAA9B,CAAN;AACH;AACJ;;AAjBW;;AAAhBR;AACmBC,oBAAyB,KAAzB;;AAmBnB,MAAaQ,kBAAb,CAA+B;AAI3BC,cAAYC,MAAZ,EAA0B;AACtBV,OAAG,CAACK,gBAAJ;AACAM,wBAAYD,MAAZ,EAAoBX,kCAApB;AAEA,SAAKa,SAAL,GAAiB,IAAIf,GAAG,CAACgB,SAAR,EAAjB;AACA,SAAKD,SAAL,CAAeE,eAAf,CAA+BC,UAAU,CAACC,IAAX,CAAgBN,MAAhB,CAA/B;AACA,SAAKO,SAAL,GAAiB,KAAKL,SAAL,CAAeM,YAAf,EAAjB;AACH;;AAEa,SAAPC,OAAO,CAACC,IAAD,EAAgC;AAAA,QAAjBC,KAAiB,uEAAD,CAAC;AAC1C,WAAOC,wBAAkBF,IAAlB,EAAwBC,KAAxB,CAAP;AACH;;AAEDE,mBAAiB;AACb,QAAIb,MAAM,GAAGc,MAAM,CAACR,IAAP,CAAY,KAAKC,SAAL,CAAeQ,SAAf,EAAZ,CAAb;AACA,WAAO,IAAIC,kBAAJ,CAAuBhB,MAAvB,CAAP;AACH;;AAEDiB,MAAI,CAACC,OAAD,EAAgB;AAChB,QAAIC,eAAe,GAAG,KAAKjB,SAAL,CAAee,IAAf,CAAoBC,OAApB,CAAtB;AACA,QAAIE,SAAS,GAAGN,MAAM,CAACR,IAAP,CAAYa,eAAe,CAACJ,SAAhB,EAAZ,CAAhB;AACA,WAAOK,SAAP;AACH;;AAEDC,KAAG;AACC,WAAO,KAAKC,OAAL,GAAeC,QAAf,CAAwB,KAAxB,CAAP;AACH;;AAEDD,SAAO;AACH,WAAOR,MAAM,CAACR,IAAP,CAAY,KAAKJ,SAAL,CAAea,SAAf,EAAZ,CAAP;AACH;;AAlC0B;;AAA/B1B;;AAqCA,MAAa2B,kBAAb,CAA+B;AAG3BjB,cAAYC,MAAZ,EAA0B;AACtBC,wBAAYD,MAAZ,EAAoBX,+BAApB;AAEA,SAAKW,MAAL,GAAcA,MAAd;AACH;;AAEDqB,KAAG;AACC,WAAO,KAAKrB,MAAL,CAAYuB,QAAZ,CAAqB,KAArB,CAAP;AACH;;AAEDD,SAAO;AACH,WAAO,KAAKtB,MAAZ;AACH;;AAf0B;;AAA/BX","names":["bls","require","exports","BLS","initIfNecessary","isInitialized","init","BLS12_381","guardInitialized","errors","ErrInvariantFailed","ValidatorSecretKey","constructor","buffer","utils_1","secretKey","SecretKey","setLittleEndian","Uint8Array","from","publicKey","getPublicKey","fromPem","text","index","pem_1","generatePublicKey","Buffer","serialize","ValidatorPublicKey","sign","message","signatureObject","signature","hex","valueOf","toString"],"sourceRoot":"","sources":["../../src/walletcore/validatorKeys.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}