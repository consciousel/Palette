{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isBtcAddressValidator from 'validator/lib/isBtcAddress';\nexport var IS_BTC_ADDRESS = 'isBtcAddress';\n/**\n * Check if the string is a valid BTC address.\n * If given value is not a string, then it returns false.\n */\n\nexport function isBtcAddress(value) {\n  return typeof value === 'string' && isBtcAddressValidator(value);\n}\n/**\n * Check if the string is a valid BTC address.\n * If given value is not a string, then it returns false.\n */\n\nexport function IsBtcAddress(validationOptions) {\n  return ValidateBy({\n    name: IS_BTC_ADDRESS,\n    validator: {\n      validate: function (value, args) {\n        return isBtcAddress(value);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a BTC address';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAT,EAAuBC,UAAvB,QAAyC,sBAAzC;AACA,OAAOC,qBAAP,MAAkC,4BAAlC;AAEA,OAAO,IAAMC,cAAc,GAAG,cAAvB;AAEP;;;;;AAIA,OAAM,SAAUC,YAAV,CAAuBC,KAAvB,EAAqC;AACzC,SAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BH,qBAAqB,CAACG,KAAD,CAAzD;AACD;AAED;;;;;AAIA,OAAM,SAAUC,YAAV,CAAuBC,iBAAvB,EAA4D;AAChE,SAAON,UAAU,CACf;AACEO,QAAI,EAAEL,cADR;AAEEM,aAAS,EAAE;AACTC,cAAQ,EAAE,UAACL,KAAD,EAAQM,IAAR,EAAY;AAAc,2BAAY,CAACN,KAAD,CAAZ;AAAmB,OAD9C;AAETO,oBAAc,EAAEZ,YAAY,CAAC,sBAAU;AAAI,yBAAU,GAAG,iCAAb;AAA8C,OAA7D,EAA+DO,iBAA/D;AAFnB;AAFb,GADe,EAQfA,iBARe,CAAjB;AAUD","names":["buildMessage","ValidateBy","isBtcAddressValidator","IS_BTC_ADDRESS","isBtcAddress","value","IsBtcAddress","validationOptions","name","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsBtcAddress.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}