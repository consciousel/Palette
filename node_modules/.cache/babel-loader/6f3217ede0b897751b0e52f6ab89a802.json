{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Token = exports.TokenType = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst address_1 = require(\"./address\");\n\nvar TokenType;\n\n(function (TokenType) {\n  TokenType[TokenType[\"Fungible\"] = 0] = \"Fungible\";\n  TokenType[TokenType[\"Semifungible\"] = 1] = \"Semifungible\";\n  TokenType[TokenType[\"Nonfungible\"] = 2] = \"Nonfungible\";\n})(TokenType = exports.TokenType || (exports.TokenType = {}));\n\nclass Token {\n  constructor(init) {\n    this.identifier = ''; // Token identifier (ticker + random string, eg. MYTOKEN-12345)\n\n    this.name = ''; // Token name (eg. MyTokenName123)\n\n    this.type = TokenType.Fungible;\n    this.owner = new address_1.Address();\n    this.minted = new bignumber_js_1.default(0);\n    this.burnt = new bignumber_js_1.default(0);\n    this.decimals = 18;\n    this.isPaused = false;\n    this.canUpgrade = false;\n    this.canMint = false;\n    this.canBurn = false;\n    this.canChangeOwner = false;\n    this.canPause = false;\n    this.canFreeze = false;\n    this.canWipe = false;\n    this.canAddSpecialRoles = false;\n    this.canTransferNftCreateRole = false;\n    this.nftCreateStopped = false;\n    this.wiped = false;\n    Object.assign(this, init);\n  }\n\n  static fromHttpResponse(response) {\n    return new Token({\n      identifier: response.token,\n      name: response.name,\n      type: TokenType[response.type],\n      owner: new address_1.Address(response.owner),\n      minted: new bignumber_js_1.default(response.minted),\n      burnt: new bignumber_js_1.default(response.burnt),\n      decimals: response.decimals,\n      isPaused: response.isPaused,\n      canUpgrade: response.canUpgrade,\n      canMint: response.canMint,\n      canBurn: response.canBurn,\n      canChangeOwner: response.canChangeOwner,\n      canPause: response.canPause,\n      canFreeze: response.canFreeze,\n      canWipe: response.canWipe\n    });\n  }\n\n  static fromTokenProperties(tokenIdentifier, results) {\n    let [tokenName, tokenType, owner, totalMinted, totalBurned, ...propertiesBuffers] = results;\n    let properties = parseTokenProperties(propertiesBuffers);\n    return new Token({\n      identifier: tokenIdentifier,\n      type: TokenType[tokenType.toString()],\n      name: tokenName.toString(),\n      owner,\n      minted: new bignumber_js_1.default(totalMinted),\n      burnt: new bignumber_js_1.default(totalBurned),\n      decimals: properties.NumDecimals.toNumber(),\n      isPaused: properties.IsPaused,\n      canUpgrade: properties.CanUpgrade,\n      canMint: properties.CanMint,\n      canBurn: properties.CanBurn,\n      canChangeOwner: properties.CanChangeOwner,\n      canPause: properties.CanPause,\n      canFreeze: properties.CanFreeze,\n      canWipe: properties.CanWipe,\n      canAddSpecialRoles: properties.CanAddSpecialRoles,\n      canTransferNftCreateRole: properties.CanTransferNFTCreateRole,\n      nftCreateStopped: properties.NFTCreateStopped,\n      wiped: properties.NumWiped\n    });\n  }\n\n  getTokenName() {\n    return this.name;\n  }\n\n  typeAsString() {\n    return TokenType[this.type];\n  }\n\n  getTokenIdentifier() {\n    return this.identifier;\n  }\n\n  isEgld() {\n    return this.getTokenIdentifier() == \"EGLD\";\n  }\n\n  isFungible() {\n    return !this.isNft();\n  }\n\n  isNft() {\n    switch (this.type) {\n      case TokenType.Fungible:\n        return false;\n\n      case TokenType.Semifungible:\n      case TokenType.Nonfungible:\n        return true;\n    }\n  }\n\n}\n\nexports.Token = Token;\n\nfunction parseValue(value) {\n  switch (value) {\n    case \"true\":\n      return true;\n\n    case \"false\":\n      return false;\n\n    default:\n      return new bignumber_js_1.default(value);\n  }\n}\n\nfunction parseTokenProperties(propertiesBuffers) {\n  let properties = {};\n\n  for (let buffer of propertiesBuffers) {\n    let [name, value] = buffer.toString().split(\"-\");\n    properties[name] = parseValue(value);\n  }\n\n  return properties;\n}","map":{"version":3,"mappings":"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","names":["TokenType","exports","Token","constructor","init","Fungible","address_1","bignumber_js_1","Object","assign","fromHttpResponse","response","identifier","token","name","type","owner","minted","burnt","decimals","isPaused","canUpgrade","canMint","canBurn","canChangeOwner","canPause","canFreeze","canWipe","fromTokenProperties","tokenIdentifier","results","tokenName","tokenType","totalMinted","totalBurned","propertiesBuffers","properties","parseTokenProperties","toString","NumDecimals","toNumber","IsPaused","CanUpgrade","CanMint","CanBurn","CanChangeOwner","CanPause","CanFreeze","CanWipe","canAddSpecialRoles","CanAddSpecialRoles","canTransferNftCreateRole","CanTransferNFTCreateRole","nftCreateStopped","NFTCreateStopped","wiped","NumWiped","getTokenName","typeAsString","getTokenIdentifier","isEgld","isFungible","isNft","Semifungible","Nonfungible","parseValue","value","buffer","split"],"sourceRoot":"","sources":["../src/token.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}