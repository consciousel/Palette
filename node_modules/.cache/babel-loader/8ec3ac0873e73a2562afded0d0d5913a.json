{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\masho\\\\OneDrive\\\\Desktop\\\\Blockchain\\\\Biconomy\\\\Projects\\\\NFT_minter\\\\src\\\\utils\\\\file-upload.js\";\nimport { useState } from 'react';\nimport { create } from 'ipfs-http-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = create('https://ipfs.infura.io:5001/api/v0');\nconst fileUrl = \"\";\nexport const upload = async file => {\n  try {\n    const added = await client.add(file);\n    fileUrl = `https://ipfs.infura.io/ipfs/${added.path}`;\n  } catch (error) {\n    console.log('Error uploading file: ', error);\n  }\n\n  return {\n    url: fileUrl,\n    status: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"IPFS Example\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }, this), fileUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: fileUrl,\n        width: \"600px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  };\n};","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/NFT_minter/src/utils/file-upload.js"],"names":["useState","create","client","fileUrl","upload","file","added","add","path","error","console","log","url","status","onChange"],"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,kBAAvB;;AAEA,MAAMC,MAAM,GAAGD,MAAM,CAAC,oCAAD,CAArB;AACA,MAAME,OAAO,GAAG,EAAhB;AAEA,OAAO,MAAMC,MAAM,GAAE,MAAMC,IAAN,IAAe;AAClC,MAAI;AACF,UAAMC,KAAK,GAAG,MAAMJ,MAAM,CAACK,GAAP,CAAWF,IAAX,CAApB;AACAF,IAAAA,OAAO,GAAI,+BAA8BG,KAAK,CAACE,IAAK,EAApD;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCF,KAAtC;AACD;;AAED,SAAO;AACLG,IAAAA,GAAG,EAAET,OADA;AAELU,IAAAA,MAAM,eACJ;AAAA,8BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,QAAQ,EAAEC;AAFZ;AAAA;AAAA;AAAA;AAAA,cAFA,EAOEX,OAAO,iBACL;AAAK,QAAA,GAAG,EAAEA,OAAV;AAAmB,QAAA,KAAK,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAHG,GAAP;AAiBD,CAzBM","sourcesContent":["import { useState } from 'react'\r\nimport { create } from 'ipfs-http-client'\r\n\r\nconst client = create('https://ipfs.infura.io:5001/api/v0')\r\nconst fileUrl = \"\"\r\n\r\nexport const upload= async(file) => {\r\n  try {\r\n    const added = await client.add(file)\r\n    fileUrl = `https://ipfs.infura.io/ipfs/${added.path}`\r\n  } catch (error) {\r\n    console.log('Error uploading file: ', error)\r\n  }  \r\n\r\n  return {\r\n    url: fileUrl,\r\n    status: (\r\n      <div>\r\n      <p>IPFS Example</p>\r\n      <input\r\n        type=\"file\"\r\n        onChange={onChange}\r\n      />\r\n      {\r\n        fileUrl && (\r\n          <img src={fileUrl} width=\"600px\" />\r\n        )\r\n      }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}