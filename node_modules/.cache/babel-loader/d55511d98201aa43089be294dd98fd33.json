{"ast":null,"code":"\"use strict\";\n/* eslint-disable func-style */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transactionID = exports.sha512Half = exports.binaryToJSON = exports.signingClaimData = exports.signingData = exports.multiSigningData = exports.readJSON = exports.serializeObject = exports.makeParser = exports.BytesList = exports.BinarySerializer = exports.BinaryParser = void 0;\n\nvar types_1 = require(\"./types\");\n\nvar binary_parser_1 = require(\"./serdes/binary-parser\");\n\nObject.defineProperty(exports, \"BinaryParser\", {\n  enumerable: true,\n  get: function () {\n    return binary_parser_1.BinaryParser;\n  }\n});\n\nvar hash_prefixes_1 = require(\"./hash-prefixes\");\n\nvar binary_serializer_1 = require(\"./serdes/binary-serializer\");\n\nObject.defineProperty(exports, \"BinarySerializer\", {\n  enumerable: true,\n  get: function () {\n    return binary_serializer_1.BinarySerializer;\n  }\n});\nObject.defineProperty(exports, \"BytesList\", {\n  enumerable: true,\n  get: function () {\n    return binary_serializer_1.BytesList;\n  }\n});\n\nvar hashes_1 = require(\"./hashes\");\n\nObject.defineProperty(exports, \"sha512Half\", {\n  enumerable: true,\n  get: function () {\n    return hashes_1.sha512Half;\n  }\n});\nObject.defineProperty(exports, \"transactionID\", {\n  enumerable: true,\n  get: function () {\n    return hashes_1.transactionID;\n  }\n});\n\nvar bigInt = require(\"big-integer\");\n/**\n * Construct a BinaryParser\n *\n * @param bytes hex-string to construct BinaryParser from\n * @returns A BinaryParser\n */\n\n\nvar makeParser = function (bytes) {\n  return new binary_parser_1.BinaryParser(bytes);\n};\n\nexports.makeParser = makeParser;\n/**\n * Parse BinaryParser into JSON\n *\n * @param parser BinaryParser object\n * @returns JSON for the bytes in the BinaryParser\n */\n\nvar readJSON = function (parser) {\n  return parser.readType(types_1.coreTypes.STObject).toJSON();\n};\n\nexports.readJSON = readJSON;\n/**\n * Parse a hex-string into its JSON interpretation\n *\n * @param bytes hex-string to parse into JSON\n * @returns JSON\n */\n\nvar binaryToJSON = function (bytes) {\n  return readJSON(makeParser(bytes));\n};\n\nexports.binaryToJSON = binaryToJSON;\n/**\n * Function to serialize JSON object representing a transaction\n *\n * @param object JSON object to serialize\n * @param opts options for serializing, including optional prefix, suffix, and signingFieldOnly\n * @returns A Buffer containing the serialized object\n */\n\nfunction serializeObject(object, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  var prefix = opts.prefix,\n      suffix = opts.suffix,\n      _a = opts.signingFieldsOnly,\n      signingFieldsOnly = _a === void 0 ? false : _a;\n  var bytesList = new binary_serializer_1.BytesList();\n\n  if (prefix) {\n    bytesList.put(prefix);\n  }\n\n  var filter = signingFieldsOnly ? function (f) {\n    return f.isSigningField;\n  } : undefined;\n  types_1.coreTypes.STObject.from(object, filter).toBytesSink(bytesList);\n\n  if (suffix) {\n    bytesList.put(suffix);\n  }\n\n  return bytesList.toBytes();\n}\n\nexports.serializeObject = serializeObject;\n/**\n * Serialize an object for signing\n *\n * @param transaction Transaction to serialize\n * @param prefix Prefix bytes to put before the serialized object\n * @returns A Buffer with the serialized object\n */\n\nfunction signingData(transaction, prefix) {\n  if (prefix === void 0) {\n    prefix = hash_prefixes_1.HashPrefix.transactionSig;\n  }\n\n  return serializeObject(transaction, {\n    prefix: prefix,\n    signingFieldsOnly: true\n  });\n}\n\nexports.signingData = signingData;\n/**\n * Serialize a signingClaim\n *\n * @param claim A claim object to serialize\n * @returns the serialized object with appropriate prefix\n */\n\nfunction signingClaimData(claim) {\n  var num = bigInt(String(claim.amount));\n  var prefix = hash_prefixes_1.HashPrefix.paymentChannelClaim;\n  var channel = types_1.coreTypes.Hash256.from(claim.channel).toBytes();\n  var amount = types_1.coreTypes.UInt64.from(num).toBytes();\n  var bytesList = new binary_serializer_1.BytesList();\n  bytesList.put(prefix);\n  bytesList.put(channel);\n  bytesList.put(amount);\n  return bytesList.toBytes();\n}\n\nexports.signingClaimData = signingClaimData;\n/**\n * Serialize a transaction object for multiSigning\n *\n * @param transaction transaction to serialize\n * @param signingAccount Account to sign the transaction with\n * @returns serialized transaction with appropriate prefix and suffix\n */\n\nfunction multiSigningData(transaction, signingAccount) {\n  var prefix = hash_prefixes_1.HashPrefix.transactionMultiSig;\n  var suffix = types_1.coreTypes.AccountID.from(signingAccount).toBytes();\n  return serializeObject(transaction, {\n    prefix: prefix,\n    suffix: suffix,\n    signingFieldsOnly: true\n  });\n}\n\nexports.multiSigningData = multiSigningData;","map":{"version":3,"mappings":"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","names":["Object","enumerable","get","binary_parser_1","binary_serializer_1","hashes_1","makeParser","bytes","exports","readJSON","parser","readType","types_1","STObject","toJSON","binaryToJSON","serializeObject","object","opts","suffix","_a","signingFieldsOnly","bytesList","prefix","put","filter","f","isSigningField","undefined","from","toBytesSink","toBytes","signingData","transaction","hash_prefixes_1","transactionSig","signingClaimData","claim","num","bigInt","String","amount","paymentChannelClaim","channel","Hash256","UInt64","multiSigningData","signingAccount","transactionMultiSig","AccountID"],"sourceRoot":"","sources":["../src/binary.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}