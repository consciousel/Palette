{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prepareLitecoinSignedOffchainTransaction = exports.signLitecoinOffchainKMSTransaction = exports.sendLitecoinOffchainTransaction = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\")); // @ts-ignore\n\n\nconst bitcore_lib_ltc_1 = require(\"bitcore-lib-ltc\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst model_1 = require(\"../model\");\n\nconst wallet_1 = require(\"../wallet\");\n\nconst common_1 = require(\"./common\");\n\nconst kms_1 = require(\"./kms\");\n/**\n * Send Litecoin transaction from Tatum Ledger account to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain or id of the withdrawal, if it was not cancelled automatically\n */\n\n\nconst sendLitecoinOffchainTransaction = async (testnet, body) => {\n  if (body.signatureId) {\n    return kms_1.offchainTransferLtcKMS(body);\n  }\n\n  await tatum_1.validateBody(body, model_1.TransferBtcBasedOffchain);\n\n  const {\n    mnemonic,\n    keyPair,\n    attr: changeAddress,\n    xpub\n  } = body,\n        withdrawal = __rest(body, [\"mnemonic\", \"keyPair\", \"attr\", \"xpub\"]);\n\n  if (!withdrawal.fee) {\n    withdrawal.fee = '0.0005';\n  }\n\n  const {\n    id,\n    data\n  } = await common_1.offchainStoreWithdrawal(withdrawal);\n  const {\n    amount,\n    address\n  } = withdrawal;\n  let txData;\n\n  try {\n    txData = await exports.prepareLitecoinSignedOffchainTransaction(testnet, data, amount, address, mnemonic, keyPair, changeAddress, xpub, withdrawal.multipleAmounts);\n  } catch (e) {\n    console.error(e);\n    await common_1.offchainCancelWithdrawal(id);\n    throw e;\n  }\n\n  try {\n    return Object.assign(Object.assign({}, await common_1.offchainBroadcast({\n      txData,\n      withdrawalId: id,\n      currency: model_1.Currency.LTC\n    })), {\n      id\n    });\n  } catch (e) {\n    console.error(e);\n\n    try {\n      await common_1.offchainCancelWithdrawal(id);\n    } catch (e1) {\n      console.log(e);\n      return {\n        id\n      };\n    }\n\n    throw e;\n  }\n};\n\nexports.sendLitecoinOffchainTransaction = sendLitecoinOffchainTransaction;\n/**\n * Sign Litecoin pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param mnemonic mnemonic to generate private keys to sign transaction with.\n * @param testnet mainnet or testnet version\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst signLitecoinOffchainKMSTransaction = async (tx, mnemonic, testnet) => {\n  var _a;\n\n  if (tx.chain !== model_1.Currency.LTC || !tx.withdrawalResponses) {\n    throw Error('Unsupported chain.');\n  }\n\n  const builder = new bitcore_lib_ltc_1.Transaction(JSON.parse(tx.serializedTransaction));\n\n  for (const response of tx.withdrawalResponses) {\n    if (response.vIn === '-1') {\n      continue;\n    }\n\n    builder.sign(bitcore_lib_ltc_1.PrivateKey.fromWIF(await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.LTC, testnet, mnemonic, ((_a = response.address) === null || _a === void 0 ? void 0 : _a.derivationKey) || 0)));\n  }\n\n  return builder.serialize(true);\n};\n\nexports.signLitecoinOffchainKMSTransaction = signLitecoinOffchainKMSTransaction;\n/**\n * Sign Litecoin transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param data data from Tatum system to prepare transaction from\n * @param amount amount to send\n * @param address recipient address, if multiple recipients are present, it should be string separated by ','\n * @param mnemonic mnemonic to sign transaction from. mnemonic or keyPair must be present\n * @param keyPair keyPair to sign transaction from. keyPair or mnemonic must be present\n * @param changeAddress address to send the rest of the unused coins\n * @param xpub xpub of the wallet\n * @param multipleAmounts if multiple recipients are present in the address separated by ',', this should be list of amounts to send\n * @param signatureId if using KMS, this is signatureId of the wallet representing mnemonic\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareLitecoinSignedOffchainTransaction = async (testnet, data, amount, address, mnemonic, keyPair, changeAddress, xpub, multipleAmounts, signatureId) => {\n  var _a;\n\n  const tx = new bitcore_lib_ltc_1.Transaction();\n  data.forEach(input => {\n    if (input.vIn !== '-1') {\n      tx.from({\n        txId: input.vIn,\n        outputIndex: input.vInIndex,\n        script: bitcore_lib_ltc_1.Script.fromAddress(input.address.address).toString(),\n        satoshis: Number(new bignumber_js_1.default(input.amount).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR))\n      });\n    }\n  });\n  const lastVin = data.find(d => d.vIn === '-1');\n\n  if (multipleAmounts === null || multipleAmounts === void 0 ? void 0 : multipleAmounts.length) {\n    for (const [i, multipleAmount] of multipleAmounts.entries()) {\n      tx.to(address.split(',')[i], Number(new bignumber_js_1.default(multipleAmount).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR)));\n    }\n  } else {\n    tx.to(address, Number(new bignumber_js_1.default(amount).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR)));\n  }\n\n  if (new bignumber_js_1.default(lastVin.amount).isGreaterThan(0)) {\n    if (xpub) {\n      tx.to(wallet_1.generateAddressFromXPub(model_1.Currency.LTC, testnet, xpub, 0), Number(new bignumber_js_1.default(lastVin.amount).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR)));\n    } else if (changeAddress) {\n      tx.to(changeAddress, Number(new bignumber_js_1.default(lastVin.amount).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR)));\n    } else {\n      throw new Error('Impossible to prepare transaction. Either mnemonic or keyPair and attr must be present.');\n    }\n  }\n\n  if (signatureId) {\n    return JSON.stringify(tx);\n  }\n\n  for (const input of data) {\n    // when there is no address field present, input is pool transfer to 0\n    if (input.vIn === '-1') {\n      continue;\n    }\n\n    if (mnemonic) {\n      const derivationKey = ((_a = input.address) === null || _a === void 0 ? void 0 : _a.derivationKey) || 0;\n      tx.sign(bitcore_lib_ltc_1.PrivateKey.fromWIF(await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.LTC, testnet, mnemonic, derivationKey)));\n    } else if (keyPair) {\n      const {\n        privateKey\n      } = keyPair.find(k => k.address === input.address.address);\n      tx.sign(bitcore_lib_ltc_1.PrivateKey.fromWIF(privateKey));\n    } else {\n      throw new Error('Impossible to prepare transaction. Either mnemonic or keyPair and attr must be present.');\n    }\n  }\n\n  return tx.serialize(true);\n};\n\nexports.prepareLitecoinSignedOffchainTransaction = prepareLitecoinSignedOffchainTransaction;","map":{"version":3,"mappings":"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","names":["sendLitecoinOffchainTransaction","testnet","body","signatureId","kms_1","tatum_1","model_1","mnemonic","keyPair","attr","changeAddress","xpub","withdrawal","fee","id","data","common_1","amount","address","txData","exports","multipleAmounts","e","console","error","withdrawalId","currency","LTC","e1","log","signLitecoinOffchainKMSTransaction","tx","chain","withdrawalResponses","Error","builder","bitcore_lib_ltc_1","JSON","parse","serializedTransaction","response","vIn","sign","fromWIF","wallet_1","_a","derivationKey","serialize","prepareLitecoinSignedOffchainTransaction","forEach","input","from","txId","outputIndex","vInIndex","script","fromAddress","toString","satoshis","Number","bignumber_js_1","multipliedBy","toFixed","ROUND_FLOOR","lastVin","find","d","length","i","multipleAmount","entries","to","split","isGreaterThan","stringify","privateKey","k"],"sourceRoot":"","sources":["../../../src/offchain/litecoin.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}