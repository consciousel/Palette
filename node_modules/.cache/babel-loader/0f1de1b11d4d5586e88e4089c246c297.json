{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSettings = exports.parseAccountFlags = void 0;\n\nconst fields_1 = __importDefault(require(\"./parse/fields\"));\n\nconst common_1 = require(\"../common\");\n\nconst AccountFlags = common_1.constants.AccountFlags;\n\nfunction parseAccountFlags(value) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const settings = {};\n\n  for (const flagName in AccountFlags) {\n    if (value & AccountFlags[flagName]) {\n      settings[flagName] = true;\n    } else {\n      if (!options.excludeFalse) {\n        settings[flagName] = false;\n      }\n    }\n  }\n\n  return settings;\n}\n\nexports.parseAccountFlags = parseAccountFlags;\n\nfunction formatSettings(response) {\n  const data = response.account_data;\n  const parsedFlags = parseAccountFlags(data.Flags, {\n    excludeFalse: true\n  });\n  const parsedFields = fields_1.default(data);\n  return Object.assign({}, parsedFlags, parsedFields);\n}\n\nfunction getSettings(address) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return __awaiter(this, void 0, void 0, function* () {\n    common_1.validate.getSettings({\n      address,\n      options\n    });\n    address = common_1.ensureClassicAddress(address);\n    const response = yield this.request('account_info', {\n      account: address,\n      ledger_index: options.ledgerVersion || 'validated',\n      signer_lists: true\n    });\n    return formatSettings(response);\n  });\n}\n\nexports.getSettings = getSettings;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAMA,MAAMA,YAAY,GAAGC,mBAAUD,YAA/B;;AAMA,SAAgBE,iBAAhB,CACEC,KADF,EAEwC;AAAA,MAAtCC,OAAsC,uEAAF,EAAE;AAEtC,QAAMC,QAAQ,GAAG,EAAjB;;AACA,OAAK,MAAMC,QAAX,IAAuBN,YAAvB,EAAqC;AACnC,QAAIG,KAAK,GAAGH,YAAY,CAACM,QAAD,CAAxB,EAAoC;AAClCD,cAAQ,CAACC,QAAD,CAAR,GAAqB,IAArB;AACD,KAFD,MAEO;AACL,UAAI,CAACF,OAAO,CAACG,YAAb,EAA2B;AACzBF,gBAAQ,CAACC,QAAD,CAAR,GAAqB,KAArB;AACD;AACF;AACF;;AACD,SAAOD,QAAP;AACD;;AAfDG;;AAiBA,SAASC,cAAT,CAAwBC,QAAxB,EAAqD;AACnD,QAAMC,IAAI,GAAGD,QAAQ,CAACE,YAAtB;AACA,QAAMC,WAAW,GAAGX,iBAAiB,CAACS,IAAI,CAACG,KAAN,EAAa;AAACP,gBAAY,EAAE;AAAf,GAAb,CAArC;AACA,QAAMQ,YAAY,GAAGC,iBAAYL,IAAZ,CAArB;AACA,SAAOM,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,WAAlB,EAA+BE,YAA/B,CAAP;AACD;;AAED,SAAsBI,WAAtB,CAEEC,OAFF,EAG+B;AAAA,MAA7BhB,OAA6B,uEAAF,EAAE;;AAG7BH,sBAASkB,WAAT,CAAqB;AAACC,aAAD;AAAUhB;AAAV,KAArB;AAIAgB,WAAO,GAAGnB,8BAAqBmB,OAArB,CAAV;AAGA,UAAMV,QAAQ,GAAG,MAAM,KAAKW,OAAL,CAAa,cAAb,EAA6B;AAClDC,aAAO,EAAEF,OADyC;AAElDG,kBAAY,EAAEnB,OAAO,CAACoB,aAAR,IAAyB,WAFW;AAGlDC,kBAAY,EAAE;AAHoC,KAA7B,CAAvB;AAMA,WAAOhB,cAAc,CAACC,QAAD,CAArB;AACD;AAAA;;AApBDF","names":["AccountFlags","common_1","parseAccountFlags","value","options","settings","flagName","excludeFalse","exports","formatSettings","response","data","account_data","parsedFlags","Flags","parsedFields","fields_1","Object","assign","getSettings","address","request","account","ledger_index","ledgerVersion","signer_lists"],"sourceRoot":"","sources":["../../../src/ledger/settings.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}