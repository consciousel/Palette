{"ast":null,"code":"import { __read, __spreadArray, __values } from \"tslib\";\nimport { isResponse } from \"../types\";\nexport function makeWebSocketSender(ws) {\n  var contextsById = new Map();\n  ws.addEventListener(\"message\", function (message) {\n    var response = JSON.parse(message.data);\n\n    if (!isResponse(response)) {\n      return;\n    }\n\n    var id = getIdFromResponse(response);\n\n    if (id === undefined) {\n      return;\n    }\n\n    var context = contextsById.get(id);\n\n    if (!context) {\n      return;\n    }\n\n    var resolve = context.resolve;\n    contextsById.delete(id);\n\n    if (!Array.isArray(response) && response.error && response.error.code === 429) {\n      resolve({\n        type: \"rateLimit\"\n      });\n    } else {\n      resolve({\n        response: response,\n        type: \"jsonrpc\"\n      });\n    }\n  });\n  ws.addEventListener(\"down\", function () {\n    __spreadArray([], __read(contextsById)).forEach(function (_a) {\n      var _b = __read(_a, 2),\n          id = _b[0],\n          _c = _b[1],\n          request = _c.request,\n          resolve = _c.resolve;\n\n      if (isWrite(request)) {\n        // Writes cannot be resent because they will fail for a duplicate nonce.\n        contextsById.delete(id);\n        resolve({\n          type: \"networkError\",\n          status: 0,\n          message: \"WebSocket closed before receiving a response for write request with id: \" + id + \".\"\n        });\n      }\n    });\n  });\n  ws.addEventListener(\"reopen\", function () {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(contextsById.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var request = _c.value.request;\n        ws.send(JSON.stringify(request));\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  });\n  return function (request) {\n    return new Promise(function (resolve) {\n      var id = getIdFromRequest(request);\n\n      if (id !== undefined) {\n        var existingContext = contextsById.get(id);\n\n        if (existingContext) {\n          var message = \"Another WebSocket request was made with the same id (\" + id + \") before a response was received.\";\n          console.error(message);\n          existingContext.resolve({\n            message: message,\n            type: \"networkError\",\n            status: 0\n          });\n        }\n\n        contextsById.set(id, {\n          request: request,\n          resolve: resolve\n        });\n      }\n\n      ws.send(JSON.stringify(request));\n    });\n  };\n}\n\nfunction getIdFromRequest(request) {\n  if (!Array.isArray(request)) {\n    return request.id;\n  }\n\n  return getCanonicalIdFromList(request.map(function (p) {\n    return p.id;\n  }));\n}\n\nfunction getIdFromResponse(response) {\n  if (!Array.isArray(response)) {\n    return response.id;\n  }\n\n  return getCanonicalIdFromList(response.map(function (p) {\n    return p.id;\n  }));\n}\n/**\n * Since the JSON-RPC spec allows responses to be returned in a different order\n * than sent, we need a mechanism for choosing a canonical id from a list that\n * doesn't depend on the order. This chooses the \"minimum\" id by an arbitrary\n * ordering: the smallest string if possible, otherwise the smallest number,\n * otherwise null.\n */\n\n\nfunction getCanonicalIdFromList(ids) {\n  var stringIds = ids.filter(function (id) {\n    return typeof id === \"string\";\n  });\n\n  if (stringIds.length > 0) {\n    return stringIds.reduce(function (bestId, id) {\n      return bestId < id ? bestId : id;\n    });\n  }\n\n  var numberIds = ids.filter(function (id) {\n    return typeof id === \"number\";\n  });\n\n  if (numberIds.length > 0) {\n    return Math.min.apply(Math, __spreadArray([], __read(numberIds)));\n  }\n\n  return ids.indexOf(null) >= 0 ? null : undefined;\n}\n\nfunction isWrite(request) {\n  return Array.isArray(request) ? request.every(isSingleWrite) : isSingleWrite(request);\n}\n\nvar WRITE_METHODS = [\"eth_sendTransaction\", \"eth_sendRawTransaction\"];\n\nfunction isSingleWrite(request) {\n  return WRITE_METHODS.includes(request.method);\n}","map":{"version":3,"mappings":"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","names":["isResponse","makeWebSocketSender","ws","contextsById","Map","addEventListener","message","response","JSON","parse","data","id","getIdFromResponse","undefined","context","get","delete","Array","isArray","error","code","resolve","type","__spreadArray","forEach","_a","_b","_c","request","isWrite","status","values","send","stringify","Promise","getIdFromRequest","existingContext","console","set","getCanonicalIdFromList","map","p","ids","stringIds","filter","length","reduce","bestId","numberIds","Math","min","apply","indexOf","every","isSingleWrite","WRITE_METHODS","includes","method"],"sourceRoot":"","sources":["../../../src/web3-adapter/alchemySendWebSocket.ts"],"sourcesContent":["import SturdyWebSocket from \"sturdy-websocket\";\nimport {\n  isResponse,\n  JsonRpcId,\n  JsonRpcRequest,\n  SingleOrBatchRequest,\n  SingleOrBatchResponse,\n  WebSocketMessage,\n} from \"../types\";\nimport {\n  AlchemySendJsonRpcFunction,\n  AlchemySendJsonRpcResult,\n} from \"./alchemySend\";\n\ninterface RequestContext {\n  request: SingleOrBatchRequest;\n  resolve(response: AlchemySendJsonRpcResult): void;\n}\n\nexport function makeWebSocketSender(\n  ws: SturdyWebSocket,\n): AlchemySendJsonRpcFunction {\n  const contextsById = new Map<JsonRpcId, RequestContext>();\n  ws.addEventListener(\"message\", (message) => {\n    const response: WebSocketMessage = JSON.parse(message.data);\n    if (!isResponse(response)) {\n      return;\n    }\n    const id = getIdFromResponse(response);\n    if (id === undefined) {\n      return;\n    }\n    const context = contextsById.get(id);\n    if (!context) {\n      return;\n    }\n    const { resolve } = context;\n    contextsById.delete(id);\n    if (\n      !Array.isArray(response) &&\n      response.error &&\n      response.error.code === 429\n    ) {\n      resolve({ type: \"rateLimit\" });\n    } else {\n      resolve({ response, type: \"jsonrpc\" });\n    }\n  });\n  ws.addEventListener(\"down\", () => {\n    [...contextsById].forEach(([id, { request, resolve }]) => {\n      if (isWrite(request)) {\n        // Writes cannot be resent because they will fail for a duplicate nonce.\n        contextsById.delete(id);\n        resolve({\n          type: \"networkError\",\n          status: 0,\n          message: `WebSocket closed before receiving a response for write request with id: ${id}.`,\n        });\n      }\n    });\n  });\n  ws.addEventListener(\"reopen\", () => {\n    for (const { request } of contextsById.values()) {\n      ws.send(JSON.stringify(request));\n    }\n  });\n\n  return (request) =>\n    new Promise((resolve) => {\n      const id = getIdFromRequest(request);\n      if (id !== undefined) {\n        const existingContext = contextsById.get(id);\n        if (existingContext) {\n          const message = `Another WebSocket request was made with the same id (${id}) before a response was received.`;\n          console.error(message);\n          existingContext.resolve({\n            message,\n            type: \"networkError\",\n            status: 0,\n          });\n        }\n        contextsById.set(id, { request, resolve });\n      }\n      ws.send(JSON.stringify(request));\n    });\n}\n\nfunction getIdFromRequest(\n  request: SingleOrBatchRequest,\n): JsonRpcId | undefined {\n  if (!Array.isArray(request)) {\n    return request.id;\n  }\n  return getCanonicalIdFromList(request.map((p) => p.id));\n}\n\nfunction getIdFromResponse(\n  response: SingleOrBatchResponse,\n): JsonRpcId | undefined {\n  if (!Array.isArray(response)) {\n    return response.id;\n  }\n  return getCanonicalIdFromList(response.map((p) => p.id));\n}\n\n/**\n * Since the JSON-RPC spec allows responses to be returned in a different order\n * than sent, we need a mechanism for choosing a canonical id from a list that\n * doesn't depend on the order. This chooses the \"minimum\" id by an arbitrary\n * ordering: the smallest string if possible, otherwise the smallest number,\n * otherwise null.\n */\nfunction getCanonicalIdFromList(\n  ids: Array<JsonRpcId | undefined>,\n): JsonRpcId | undefined {\n  const stringIds: string[] = ids.filter((id) => typeof id === \"string\") as any;\n  if (stringIds.length > 0) {\n    return stringIds.reduce((bestId, id) => (bestId < id ? bestId : id));\n  }\n  const numberIds: number[] = ids.filter((id) => typeof id === \"number\") as any;\n  if (numberIds.length > 0) {\n    return Math.min(...numberIds);\n  }\n  return ids.indexOf(null) >= 0 ? null : undefined;\n}\n\nfunction isWrite(request: SingleOrBatchRequest): boolean {\n  return Array.isArray(request)\n    ? request.every(isSingleWrite)\n    : isSingleWrite(request);\n}\n\nconst WRITE_METHODS = [\"eth_sendTransaction\", \"eth_sendRawTransaction\"];\n\nfunction isSingleWrite(request: JsonRpcRequest): boolean {\n  return WRITE_METHODS.includes(request.method);\n}\n"]},"metadata":{},"sourceType":"module"}