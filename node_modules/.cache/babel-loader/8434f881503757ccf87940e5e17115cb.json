{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prepareXlmSignedOffchainTransaction = exports.signXlmOffchainKMSTransaction = exports.sendXlmOffchainTransaction = void 0;\n\nconst stellar_sdk_1 = require(\"stellar-sdk\");\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst model_1 = require(\"../model\");\n\nconst common_1 = require(\"./common\");\n/**\n * Send Stellar transaction from Tatum Ledger account to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain or id of the withdrawal, if it was not cancelled automatically\n */\n\n\nconst sendXlmOffchainTransaction = async (testnet, body) => {\n  await tatum_1.validateBody(body, model_1.TransferXlmOffchain);\n\n  const {\n    secret\n  } = body,\n        withdrawal = __rest(body, [\"secret\"]);\n\n  if (!withdrawal.fee) {\n    withdrawal.fee = '0.00001';\n  }\n\n  const memo = withdrawal.attr ? withdrawal.attr.length > 28 ? stellar_sdk_1.Memo.hash(withdrawal.attr) : stellar_sdk_1.Memo.text(withdrawal.attr) : undefined;\n  const account = await blockchain_1.xlmGetAccountInfo(stellar_sdk_1.Keypair.fromSecret(secret).publicKey());\n  const {\n    id\n  } = await common_1.offchainStoreWithdrawal(withdrawal);\n  const {\n    amount,\n    address\n  } = withdrawal;\n  let txData;\n\n  try {\n    txData = await exports.prepareXlmSignedOffchainTransaction(testnet, account, amount, address, secret, memo);\n  } catch (e) {\n    console.error(e);\n    await common_1.offchainCancelWithdrawal(id);\n    throw e;\n  }\n\n  try {\n    return Object.assign(Object.assign({}, await common_1.offchainBroadcast({\n      txData,\n      withdrawalId: id,\n      currency: model_1.Currency.XLM\n    })), {\n      id\n    });\n  } catch (e) {\n    console.error(e);\n\n    try {\n      await common_1.offchainCancelWithdrawal(id);\n    } catch (e1) {\n      console.log(e);\n      return {\n        id\n      };\n    }\n\n    throw e;\n  }\n};\n\nexports.sendXlmOffchainTransaction = sendXlmOffchainTransaction;\n/**\n * Sign Stellar pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param secret secret key to sign transaction with.\n * @param testnet mainnet or testnet version\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst signXlmOffchainKMSTransaction = async (tx, secret, testnet) => {\n  if (tx.chain !== model_1.Currency.XLM) {\n    throw Error('Unsupported chain.');\n  }\n\n  const transaction = stellar_sdk_1.TransactionBuilder.fromXDR(tx.serializedTransaction, testnet ? stellar_sdk_1.Networks.TESTNET : stellar_sdk_1.Networks.PUBLIC);\n  transaction.sign(stellar_sdk_1.Keypair.fromSecret(secret));\n  return transaction.toEnvelope().toXDR().toString('base64');\n};\n\nexports.signXlmOffchainKMSTransaction = signXlmOffchainKMSTransaction;\n/**\n * Sign Stellar transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param account Stellar account with information\n * @param amount amount to send\n * @param address recipient address\n * @param secret secret to sign transaction with\n * @param memo short memo to include in transaction\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareXlmSignedOffchainTransaction = async (testnet, account, amount, address, secret, memo) => {\n  const builder = new stellar_sdk_1.TransactionBuilder(new stellar_sdk_1.Account(account.account_id, account.sequence), {\n    fee: '100',\n    networkPassphrase: testnet ? stellar_sdk_1.Networks.TESTNET : stellar_sdk_1.Networks.PUBLIC,\n    memo\n  }).setTimeout(300);\n  const tx = builder.addOperation(stellar_sdk_1.Operation.payment({\n    destination: address,\n    asset: stellar_sdk_1.Asset.native(),\n    amount\n  })).build();\n  tx.sign(stellar_sdk_1.Keypair.fromSecret(secret));\n  return tx.toEnvelope().toXDR().toString('base64');\n};\n\nexports.prepareXlmSignedOffchainTransaction = prepareXlmSignedOffchainTransaction;","map":{"version":3,"mappings":"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","names":["sendXlmOffchainTransaction","testnet","body","tatum_1","model_1","secret","withdrawal","fee","memo","attr","length","stellar_sdk_1","hash","text","undefined","account","blockchain_1","fromSecret","publicKey","id","common_1","amount","address","txData","exports","e","console","error","withdrawalId","currency","XLM","e1","log","signXlmOffchainKMSTransaction","tx","chain","Error","transaction","fromXDR","serializedTransaction","TESTNET","PUBLIC","sign","toEnvelope","toXDR","toString","prepareXlmSignedOffchainTransaction","builder","account_id","sequence","networkPassphrase","setTimeout","addOperation","payment","destination","asset","native","build"],"sourceRoot":"","sources":["../../../src/offchain/xlm.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}