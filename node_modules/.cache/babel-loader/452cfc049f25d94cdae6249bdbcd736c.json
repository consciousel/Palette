{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WalletProvider = void 0;\n\nconst qs_1 = __importDefault(require(\"qs\"));\n\nconst constants_1 = require(\"./constants\");\n\nconst transaction_1 = require(\"../transaction\");\n\nconst errors_1 = require(\"../errors\");\n\nconst __1 = require(\"../\");\n\nconst signature_1 = require(\"../signature\");\n\nclass WalletProvider {\n  /**\n   * Creates a new WalletProvider\n   * @param walletURL\n   */\n  constructor() {\n    let walletURL = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    this.walletUrl = walletURL;\n  }\n  /**\n   * Waits for the wallet iframe to ping that it has been initialised\n   */\n\n\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return true;\n    });\n  }\n  /**\n   * Returns if the wallet iframe is up and running\n   */\n\n\n  isInitialized() {\n    return true;\n  }\n  /**\n   * Unlike isInitialized, isConnected returns true if the user alredy went through the login process\n   *  and has the wallet session active\n   */\n\n\n  isConnected() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return false;\n    });\n  }\n  /**\n   * Fetches the login hook url and redirects the client to the wallet login.\n   */\n\n\n  login(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let callbackUrl = `callbackUrl=${window.location.href}`;\n\n      if (options && options.callbackUrl) {\n        callbackUrl = `callbackUrl=${options.callbackUrl}`;\n      }\n\n      let token = '';\n\n      if (options && options.token) {\n        token = `&token=${options.token}`;\n      }\n\n      window.location.href = `${this.baseWalletUrl()}${constants_1.WALLET_PROVIDER_CONNECT_URL}?${callbackUrl}${token}`;\n      return window.location.href;\n    });\n  }\n  /**\n  * Fetches the logout hook url and redirects the client to the wallet logout.\n  */\n\n\n  logout(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let callbackUrl = `callbackUrl=${window.location.href}`;\n\n      if (options && options.callbackUrl) {\n        callbackUrl = `callbackUrl=${options.callbackUrl}`;\n      }\n\n      window.location.href = `${this.baseWalletUrl()}${constants_1.WALLET_PROVIDER_DISCONNECT_URL}?${callbackUrl}`;\n      return true;\n    });\n  }\n  /**\n   * Returns currently connected address. Empty string if not connected\n   */\n\n\n  getAddress() {\n    return __awaiter(this, void 0, void 0, function* () {\n      throw new errors_1.ErrNotImplemented();\n    });\n  }\n  /**\n   * Packs a {@link Transaction} and fetches correct redirect URL from the wallet API. Then redirects\n   *   the client to the send transaction hook\n   * @param transaction\n   * @param options\n   */\n\n\n  sendTransaction(transaction, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let plainTransaction = WalletProvider.prepareWalletTransaction(transaction);\n      let url = `${this.baseWalletUrl()}${constants_1.WALLET_PROVIDER_SEND_TRANSACTION_URL}?${this.buildTransactionUrl(plainTransaction)}`;\n      window.location.href = `${url}&callbackUrl=${options !== undefined && options.callbackUrl !== undefined ? options.callbackUrl : window.location.href}`;\n      return transaction;\n    });\n  }\n  /**\n   * Packs an array of {$link Transaction} and redirects to the correct transaction sigining hook\n   *\n   * @param transactions\n   * @param options\n   */\n\n\n  signTransactions(transactions, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const jsonToSend = {};\n      transactions.map(tx => {\n        let plainTx = WalletProvider.prepareWalletTransaction(tx);\n\n        for (let txProp in plainTx) {\n          if (plainTx.hasOwnProperty(txProp) && !jsonToSend.hasOwnProperty(txProp)) {\n            jsonToSend[txProp] = [];\n          }\n\n          jsonToSend[txProp].push(plainTx[txProp]);\n        }\n      });\n      let url = `${this.baseWalletUrl()}${constants_1.WALLET_PROVIDER_SIGN_TRANSACTION_URL}?${qs_1.default.stringify(jsonToSend)}`;\n      window.location.href = `${url}&callbackUrl=${options !== undefined && options.callbackUrl !== undefined ? options.callbackUrl : window.location.href}`;\n      return transactions;\n    });\n  }\n  /**\n   * Packs a {@link Transaction} and fetches correct redirect URL from the wallet API. Then redirects\n   *   the client to the sign transaction hook\n   * @param transaction\n   * @param options\n   */\n\n\n  signTransaction(transaction, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let plainTransaction = WalletProvider.prepareWalletTransaction(transaction);\n      let url = `${this.baseWalletUrl()}${constants_1.WALLET_PROVIDER_SIGN_TRANSACTION_URL}?${this.buildTransactionUrl(plainTransaction)}`;\n      window.location.href = `${url}&callbackUrl=${options !== undefined && options.callbackUrl !== undefined ? options.callbackUrl : window.location.href}`;\n      return transaction;\n    });\n  }\n\n  getTransactionsFromWalletUrl() {\n    const transactions = [];\n    const urlParams = qs_1.default.parse(window.location.search.slice(1));\n\n    if (!WalletProvider.isTxSignReturnSuccess(urlParams)) {\n      return transactions;\n    }\n\n    return WalletProvider.getTxSignReturnValue(urlParams);\n  }\n  /**\n   * Method will be available once the ElrondWallet hook will be implemented\n   * @param _\n   */\n\n\n  signMessage(_) {\n    return __awaiter(this, void 0, void 0, function* () {\n      throw new errors_1.ErrNotImplemented();\n    });\n  }\n\n  static isTxSignReturnSuccess(urlParams) {\n    return urlParams.hasOwnProperty(constants_1.WALLET_PROVIDER_CALLBACK_PARAM) && urlParams[constants_1.WALLET_PROVIDER_CALLBACK_PARAM] === constants_1.WALLET_PROVIDER_CALLBACK_PARAM_TX_SIGNED;\n  }\n\n  static getTxSignReturnValue(urlParams) {\n    const expectedProps = [\"nonce\", \"value\", \"receiver\", \"sender\", \"gasPrice\", \"gasLimit\", \"data\", \"chainID\", \"version\", \"signature\"];\n\n    for (let txProp of expectedProps) {\n      if (!urlParams[txProp] || !Array.isArray(urlParams[txProp])) {\n        throw new errors_1.ErrInvalidTxSignReturnValue();\n      }\n    }\n\n    const expectedLength = urlParams[\"nonce\"].length;\n\n    for (let txProp of expectedProps) {\n      if (urlParams[txProp].length !== expectedLength) {\n        throw new errors_1.ErrInvalidTxSignReturnValue();\n      }\n    }\n\n    const transactions = [];\n\n    for (let i = 0; i < expectedLength; i++) {\n      let tx = new transaction_1.Transaction({\n        nonce: new __1.Nonce(urlParams[\"nonce\"][i]),\n        value: __1.Balance.fromString(urlParams[\"value\"][i]),\n        receiver: __1.Address.fromString(urlParams[\"receiver\"][i]),\n        gasPrice: new __1.GasPrice(parseInt(urlParams[\"gasPrice\"][i])),\n        gasLimit: new __1.GasLimit(parseInt(urlParams[\"gasLimit\"][i])),\n        data: new __1.TransactionPayload(urlParams[\"data\"][i]),\n        chainID: new __1.ChainID(urlParams[\"chainID\"][i]),\n        version: new __1.TransactionVersion(parseInt(urlParams[\"version\"][i]))\n      });\n      tx.applySignature(new signature_1.Signature(urlParams[\"signature\"][i]), __1.Address.fromString(urlParams[\"sender\"][i]));\n      transactions.push(tx);\n    }\n\n    return transactions;\n  }\n\n  static prepareWalletTransaction(transaction) {\n    let plainTransaction = transaction.toPlainObject(); // We adjust the fields, in order to make them compatible with what the wallet expected\n\n    plainTransaction[\"nonce\"] = transaction.getNonce().valueOf();\n    plainTransaction[\"data\"] = transaction.getData().valueOf().toString();\n    plainTransaction[\"value\"] = transaction.getValue().toString();\n    plainTransaction[\"gasPrice\"] = transaction.getGasPrice().valueOf();\n    plainTransaction[\"gasLimit\"] = transaction.getGasLimit().valueOf();\n    return plainTransaction;\n  }\n\n  buildTransactionUrl(transaction) {\n    let urlString = `receiver=${transaction.receiver}&value=${transaction.value}`;\n\n    if (transaction.gasLimit) {\n      urlString += `&gasLimit=${transaction.gasLimit}`;\n    }\n\n    if (transaction.gasPrice) {\n      urlString += `&gasPrice=${transaction.gasPrice}`;\n    }\n\n    if (transaction.data) {\n      urlString += `&data=${transaction.data}`;\n    }\n\n    if (transaction.nonce) {\n      urlString += `&nonce=${transaction.nonce}`;\n    }\n\n    return urlString;\n  }\n\n  baseWalletUrl() {\n    const pathArray = this.walletUrl.split('/');\n    const protocol = pathArray[0];\n    const host = pathArray[2];\n    return protocol + '//' + host;\n  }\n\n}\n\nexports.WalletProvider = WalletProvider;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAQA;;AAEA;;AACA;;AACA;;AAWA,MAAaA,cAAb,CAA2B;AAGvB;;;;AAIAC,gBAAkC;AAAA,QAAtBC,SAAsB,uEAAF,EAAE;AAC9B,SAAKC,SAAL,GAAiBD,SAAjB;AACH;AAED;;;;;AAGME,MAAI;;AACN,aAAO,IAAP;AACH;AAAA;AAED;;;;;AAGAC,eAAa;AACT,WAAO,IAAP;AACH;AAED;;;;;;AAIMC,aAAW;;AACb,aAAO,KAAP;AACH;AAAA;AAED;;;;;AAGMC,OAAK,CAACC,OAAD,EAAmD;;AAC1D,UAAIC,WAAW,GAAG,eAAeC,MAAM,CAACC,QAAP,CAAgBC,IAAI,EAArD;;AACA,UAAIJ,OAAO,IAAIA,OAAO,CAACC,WAAvB,EAAoC;AAChCA,mBAAW,GAAG,eAAeD,OAAO,CAACC,WAAW,EAAhD;AACH;;AAED,UAAII,KAAK,GAAG,EAAZ;;AACA,UAAIL,OAAO,IAAIA,OAAO,CAACK,KAAvB,EAA8B;AAC1BA,aAAK,GAAG,UAAUL,OAAO,CAACK,KAAK,EAA/B;AACH;;AAEDH,YAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAG,KAAKE,aAAL,EAAoB,GAAGC,uCAA2B,IAAIN,WAAW,GAAGI,KAAK,EAAnG;AACA,aAAOH,MAAM,CAACC,QAAP,CAAgBC,IAAvB;AACH;AAAA;AAED;;;;;AAGMI,QAAM,CAACR,OAAD,EAAmC;;AAC3C,UAAIC,WAAW,GAAG,eAAeC,MAAM,CAACC,QAAP,CAAgBC,IAAI,EAArD;;AACA,UAAIJ,OAAO,IAAIA,OAAO,CAACC,WAAvB,EAAoC;AAChCA,mBAAW,GAAG,eAAeD,OAAO,CAACC,WAAW,EAAhD;AACH;;AAEDC,YAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAG,KAAKE,aAAL,EAAoB,GAAGC,0CAA8B,IAAIN,WAAW,EAA9F;AACA,aAAO,IAAP;AACH;AAAA;AAED;;;;;AAGMQ,YAAU;;AACZ,YAAM,IAAIC,0BAAJ,EAAN;AACH;AAAA;AAED;;;;;;;;AAMMC,iBAAe,CAACC,WAAD,EAA2BZ,OAA3B,EAA6D;;AAC9E,UAAIa,gBAAgB,GAAGrB,cAAc,CAACsB,wBAAf,CAAwCF,WAAxC,CAAvB;AACA,UAAIG,GAAG,GAAG,GAAG,KAAKT,aAAL,EAAoB,GAAGC,gDAAoC,IAAI,KAAKS,mBAAL,CAAyBH,gBAAzB,CAA0C,EAAtH;AAEAX,YAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAGW,GAAG,gBAAgBf,OAAO,KAAKiB,SAAZ,IAAyBjB,OAAO,CAACC,WAAR,KAAwBgB,SAAjD,GAA6DjB,OAAO,CAACC,WAArE,GAAmFC,MAAM,CAACC,QAAP,CAAgBC,IAAI,EAApJ;AACA,aAAOQ,WAAP;AACH;AAAA;AAED;;;;;;;;AAMMM,kBAAgB,CAACC,YAAD,EAA8BnB,OAA9B,EAAgE;;AAClF,YAAMoB,UAAU,GAAQ,EAAxB;AACAD,kBAAY,CAACE,GAAb,CAAiBC,EAAE,IAAG;AAClB,YAAIC,OAAO,GAAI/B,cAAc,CAACsB,wBAAf,CAAwCQ,EAAxC,CAAf;;AACA,aAAM,IAAIE,MAAV,IAAoBD,OAApB,EAA8B;AAC1B,cAAIA,OAAO,CAACE,cAAR,CAAuBD,MAAvB,KAAkC,CAACJ,UAAU,CAACK,cAAX,CAA0BD,MAA1B,CAAvC,EAA0E;AACtEJ,sBAAU,CAACI,MAAD,CAAV,GAAqB,EAArB;AACH;;AAEDJ,oBAAU,CAACI,MAAD,CAAV,CAAmBE,IAAnB,CAAwBH,OAAO,CAACC,MAAD,CAA/B;AACH;AACJ,OATD;AAWA,UAAIT,GAAG,GAAG,GAAG,KAAKT,aAAL,EAAoB,GAAGC,gDAAoC,IAAIoB,aAAGC,SAAH,CAAaR,UAAb,CAAwB,EAApG;AACAlB,YAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAGW,GAAG,gBAAgBf,OAAO,KAAKiB,SAAZ,IAAyBjB,OAAO,CAACC,WAAR,KAAwBgB,SAAjD,GAA6DjB,OAAO,CAACC,WAArE,GAAmFC,MAAM,CAACC,QAAP,CAAgBC,IAAI,EAApJ;AACA,aAAOe,YAAP;AACH;AAAA;AAED;;;;;;;;AAMMU,iBAAe,CAACjB,WAAD,EAA2BZ,OAA3B,EAA6D;;AAC9E,UAAIa,gBAAgB,GAAGrB,cAAc,CAACsB,wBAAf,CAAwCF,WAAxC,CAAvB;AACA,UAAIG,GAAG,GAAG,GAAG,KAAKT,aAAL,EAAoB,GAAGC,gDAAoC,IAAI,KAAKS,mBAAL,CAAyBH,gBAAzB,CAA0C,EAAtH;AAEAX,YAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAGW,GAAG,gBAAgBf,OAAO,KAAKiB,SAAZ,IAAyBjB,OAAO,CAACC,WAAR,KAAwBgB,SAAjD,GAA6DjB,OAAO,CAACC,WAArE,GAAmFC,MAAM,CAACC,QAAP,CAAgBC,IAAI,EAApJ;AACA,aAAOQ,WAAP;AACH;AAAA;;AAEDkB,8BAA4B;AACxB,UAAMX,YAAY,GAAkB,EAApC;AACA,UAAMY,SAAS,GAAGJ,aAAGK,KAAH,CAAS9B,MAAM,CAACC,QAAP,CAAgB8B,MAAhB,CAAuBC,KAAvB,CAA6B,CAA7B,CAAT,CAAlB;;AACA,QAAI,CAAC1C,cAAc,CAAC2C,qBAAf,CAAqCJ,SAArC,CAAL,EAAsD;AAClD,aAAOZ,YAAP;AACH;;AAED,WAAO3B,cAAc,CAAC4C,oBAAf,CAAoCL,SAApC,CAAP;AACH;AAED;;;;;;AAIMM,aAAW,CAACC,CAAD,EAAmB;;AAChC,YAAM,IAAI5B,0BAAJ,EAAN;AACH;AAAA;;AAE2B,SAArByB,qBAAqB,CAACJ,SAAD,EAAe;AACvC,WAAOA,SAAS,CAACN,cAAV,CAAyBlB,0CAAzB,KAA4DwB,SAAS,CAACxB,0CAAD,CAAT,KAA8CA,oDAAjH;AACH;;AAE0B,SAApB6B,oBAAoB,CAACL,SAAD,EAAe;AACtC,UAAMQ,aAAa,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,UAAnB,EAA+B,QAA/B,EAAyC,UAAzC,EAClB,UADkB,EACN,MADM,EACE,SADF,EACa,SADb,EACwB,WADxB,CAAtB;;AAGA,SAAK,IAAIf,MAAT,IAAmBe,aAAnB,EAAkC;AAC9B,UAAI,CAACR,SAAS,CAACP,MAAD,CAAV,IAAsB,CAACgB,KAAK,CAACC,OAAN,CAAcV,SAAS,CAACP,MAAD,CAAvB,CAA3B,EAA6D;AACzD,cAAM,IAAId,oCAAJ,EAAN;AACH;AACJ;;AAED,UAAMgC,cAAc,GAAGX,SAAS,CAAC,OAAD,CAAT,CAAmBY,MAA1C;;AACA,SAAK,IAAInB,MAAT,IAAmBe,aAAnB,EAAkC;AAC9B,UAAIR,SAAS,CAACP,MAAD,CAAT,CAAkBmB,MAAlB,KAA6BD,cAAjC,EAAiD;AAC7C,cAAM,IAAIhC,oCAAJ,EAAN;AACH;AACJ;;AAED,UAAMS,YAAY,GAAkB,EAApC;;AACA,SAAK,IAAIyB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,cAApB,EAAoCE,CAAC,EAArC,EAAyC;AACrC,UAAItB,EAAE,GAAG,IAAIuB,yBAAJ,CAAgB;AACrBC,aAAK,EAAE,IAAIC,SAAJ,CAAUhB,SAAS,CAAC,OAAD,CAAT,CAAmBa,CAAnB,CAAV,CADc;AAErBI,aAAK,EAAED,YAAQE,UAAR,CAA2BlB,SAAS,CAAC,OAAD,CAAT,CAAmBa,CAAnB,CAA3B,CAFc;AAGrBM,gBAAQ,EAAEH,YAAQE,UAAR,CAA2BlB,SAAS,CAAC,UAAD,CAAT,CAAsBa,CAAtB,CAA3B,CAHW;AAIrBO,gBAAQ,EAAE,IAAIJ,YAAJ,CAAaK,QAAQ,CAASrB,SAAS,CAAC,UAAD,CAAT,CAAsBa,CAAtB,CAAT,CAArB,CAJW;AAKrBS,gBAAQ,EAAE,IAAIN,YAAJ,CAAaK,QAAQ,CAASrB,SAAS,CAAC,UAAD,CAAT,CAAsBa,CAAtB,CAAT,CAArB,CALW;AAMrBU,YAAI,EAAE,IAAIP,sBAAJ,CAA+BhB,SAAS,CAAC,MAAD,CAAT,CAAkBa,CAAlB,CAA/B,CANe;AAOrBW,eAAO,EAAE,IAAIR,WAAJ,CAAoBhB,SAAS,CAAC,SAAD,CAAT,CAAqBa,CAArB,CAApB,CAPY;AAQrBY,eAAO,EAAE,IAAIT,sBAAJ,CAAuBK,QAAQ,CAASrB,SAAS,CAAC,SAAD,CAAT,CAAqBa,CAArB,CAAT,CAA/B;AARY,OAAhB,CAAT;AAWAtB,QAAE,CAACmC,cAAH,CAAkB,IAAIC,qBAAJ,CAAsB3B,SAAS,CAAC,WAAD,CAAT,CAAuBa,CAAvB,CAAtB,CAAlB,EAAoEG,YAAQE,UAAR,CAA2BlB,SAAS,CAAC,QAAD,CAAT,CAAoBa,CAApB,CAA3B,CAApE;AACAzB,kBAAY,CAACO,IAAb,CAAkBJ,EAAlB;AACH;;AAED,WAAOH,YAAP;AACH;;AAE8B,SAAxBL,wBAAwB,CAACF,WAAD,EAAyB;AACpD,QAAIC,gBAAgB,GAAGD,WAAW,CAAC+C,aAAZ,EAAvB,CADoD,CAGpD;;AACA9C,oBAAgB,CAAC,OAAD,CAAhB,GAA4BD,WAAW,CAACgD,QAAZ,GAAuBC,OAAvB,EAA5B;AACAhD,oBAAgB,CAAC,MAAD,CAAhB,GAA2BD,WAAW,CAACkD,OAAZ,GAAsBD,OAAtB,GAAgCE,QAAhC,EAA3B;AACAlD,oBAAgB,CAAC,OAAD,CAAhB,GAA4BD,WAAW,CAACoD,QAAZ,GAAuBD,QAAvB,EAA5B;AACAlD,oBAAgB,CAAC,UAAD,CAAhB,GAA+BD,WAAW,CAACqD,WAAZ,GAA0BJ,OAA1B,EAA/B;AACAhD,oBAAgB,CAAC,UAAD,CAAhB,GAA+BD,WAAW,CAACsD,WAAZ,GAA0BL,OAA1B,EAA/B;AAEA,WAAOhD,gBAAP;AACH;;AAEOG,qBAAmB,CAACJ,WAAD,EAAgC;AACvD,QAAIuD,SAAS,GAAG,YAAYvD,WAAW,CAACsC,QAAQ,UAAUtC,WAAW,CAACoC,KAAK,EAA3E;;AACA,QAAIpC,WAAW,CAACyC,QAAhB,EAA0B;AACtBc,eAAS,IAAI,aAAavD,WAAW,CAACyC,QAAQ,EAA9C;AACH;;AACD,QAAIzC,WAAW,CAACuC,QAAhB,EAA0B;AACtBgB,eAAS,IAAI,aAAavD,WAAW,CAACuC,QAAQ,EAA9C;AACH;;AACD,QAAIvC,WAAW,CAAC0C,IAAhB,EAAsB;AAClBa,eAAS,IAAI,SAASvD,WAAW,CAAC0C,IAAI,EAAtC;AACH;;AACD,QAAI1C,WAAW,CAACkC,KAAhB,EAAuB;AACnBqB,eAAS,IAAI,UAAUvD,WAAW,CAACkC,KAAK,EAAxC;AACH;;AAED,WAAOqB,SAAP;AACH;;AAEO7D,eAAa;AACjB,UAAM8D,SAAS,GAAG,KAAKzE,SAAL,CAAe0E,KAAf,CAAqB,GAArB,CAAlB;AACA,UAAMC,QAAQ,GAAGF,SAAS,CAAC,CAAD,CAA1B;AACA,UAAMG,IAAI,GAAGH,SAAS,CAAC,CAAD,CAAtB;AACA,WAAOE,QAAQ,GAAG,IAAX,GAAkBC,IAAzB;AACH;;AA1NsB;;AAA3BC","names":["WalletProvider","constructor","walletURL","walletUrl","init","isInitialized","isConnected","login","options","callbackUrl","window","location","href","token","baseWalletUrl","constants_1","logout","getAddress","errors_1","sendTransaction","transaction","plainTransaction","prepareWalletTransaction","url","buildTransactionUrl","undefined","signTransactions","transactions","jsonToSend","map","tx","plainTx","txProp","hasOwnProperty","push","qs_1","stringify","signTransaction","getTransactionsFromWalletUrl","urlParams","parse","search","slice","isTxSignReturnSuccess","getTxSignReturnValue","signMessage","_","expectedProps","Array","isArray","expectedLength","length","i","transaction_1","nonce","__1","value","fromString","receiver","gasPrice","parseInt","gasLimit","data","chainID","version","applySignature","signature_1","toPlainObject","getNonce","valueOf","getData","toString","getValue","getGasPrice","getGasLimit","urlString","pathArray","split","protocol","host","exports"],"sourceRoot":"","sources":["../../src/dapp/walletProvider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}