{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-crypto\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAddress = exports.HarmonyAddress = void 0;\n\nvar utils_1 = require(\"@harmony-js/utils\");\n\nvar keyTool_1 = require(\"./keyTool\");\n\nvar bech32_1 = require(\"./bech32\");\n/**\n * ### How to use it?\n *\n * ```\n * // Step 1: import the class\n * const { HarmonyAddress } = require('@harmony-js/crypto');\n *\n * // Step 2: call functions\n * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n * const res = HarmonyAddress.isValidBech32(addr);\n * console.log(res);\n * ```\n */\n\n\nvar HarmonyAddress =\n/** @class */\nfunction () {\n  function HarmonyAddress(raw) {\n    this.raw = raw;\n    this.basic = this.getBasic(this.raw);\n  }\n  /**\n   * @example\n   * ```\n   * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const res = HarmonyAddress.isValidBech32(addr);\n   * console.log(res);\n   * ```\n   */\n\n\n  HarmonyAddress.isValidBasic = function (str) {\n    var toTest = new HarmonyAddress(str);\n    return toTest.raw === toTest.basic;\n  };\n  /**\n   * @example\n   * ```\n   * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const res = HarmonyAddress.isValidChecksum(addr);\n   * console.log(res);\n   * ```\n   */\n\n\n  HarmonyAddress.isValidChecksum = function (str) {\n    var toTest = new HarmonyAddress(str);\n    return toTest.raw === toTest.checksum;\n  };\n  /**\n   * @example\n   * ```\n   * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const res = HarmonyAddress.isValidBech32(addr);\n   * console.log(res);\n   * ```\n   */\n\n\n  HarmonyAddress.isValidBech32 = function (str) {\n    var toTest = new HarmonyAddress(str);\n    return toTest.raw === toTest.bech32;\n  };\n  /**\n   * @example\n   * ```\n   * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const res = HarmonyAddress.isValidBech32TestNet(addr);\n   * console.log(res);\n   * ```\n   */\n\n\n  HarmonyAddress.isValidBech32TestNet = function (str) {\n    var toTest = new HarmonyAddress(str);\n    return toTest.raw === toTest.bech32TestNet;\n  };\n\n  Object.defineProperty(HarmonyAddress.prototype, \"basicHex\", {\n    /**\n     * get basicHex of the address\n     *\n     * @example\n     * ```\n     * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n     * const instance = new HarmonyAddress(addr);\n     * console.log(instance.basicHex);\n     * ```\n     */\n    get: function () {\n      return \"0x\" + this.basic;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(HarmonyAddress.prototype, \"checksum\", {\n    /**\n     * @example\n     * ```\n     * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n     * const instance = new HarmonyAddress(addr);\n     * console.log(instance.checksum);\n     * ```\n     */\n    get: function () {\n      return keyTool_1.toChecksumAddress(\"0x\" + this.basic);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(HarmonyAddress.prototype, \"bech32\", {\n    /**\n     * @example\n     * ```\n     * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n     * const instance = new HarmonyAddress(addr);\n     * console.log(instance.bech32);\n     * ```\n     */\n    get: function () {\n      return bech32_1.toBech32(this.basic, bech32_1.HRP);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(HarmonyAddress.prototype, \"bech32TestNet\", {\n    /**\n     * @example\n     * ```\n     * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n     * const instance = new HarmonyAddress(addr);\n     * console.log(instance.bech32TestNet);\n     * ```\n     */\n    get: function () {\n      return bech32_1.toBech32(this.basic, bech32_1.tHRP);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Check whether the address has an valid address format\n   *\n   * @param addr string, the address\n   *\n   * @example\n   * ```\n   * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const instance = new HarmonyAddress(addr);\n   * const res = instance.getBasic(addr);\n   * console.log(res)\n   * ```\n   */\n\n  HarmonyAddress.prototype.getBasic = function (addr) {\n    var basicBool = utils_1.isAddress(addr);\n    var bech32Bool = utils_1.isBech32Address(addr);\n    var bech32TestNetBool = utils_1.isBech32TestNetAddress(addr);\n\n    if (basicBool) {\n      return addr.replace('0x', '').toLowerCase();\n    }\n\n    if (bech32Bool) {\n      var fromB32 = bech32_1.fromBech32(addr, bech32_1.HRP);\n      return fromB32.replace('0x', '').toLowerCase();\n    }\n\n    if (bech32TestNetBool) {\n      var fromB32TestNet = bech32_1.fromBech32(addr, bech32_1.tHRP);\n      return fromB32TestNet.replace('0x', '').toLowerCase();\n    }\n\n    throw new Error(\"\\\"\" + addr + \"\\\" is an invalid address format\");\n  };\n\n  return HarmonyAddress;\n}();\n\nexports.HarmonyAddress = HarmonyAddress;\n/**\n * Using this function to get Harmony format address\n *\n * @param address\n *\n * @example\n * ```javascript\n * const { Harmony } = require('@harmony-js/core');\n * const { ChainID, ChainType } = require('@harmony-js/utils');\n * const { randomBytes } = require('@harmony-js/crypto')\n *\n * const hmy = new Harmony(\n *   'http://localhost:9500',\n *   {\n *   chainType: ChainType.Harmony,\n *   chainId: ChainID.HmyLocal,\n *   },\n * );\n *\n * const bytes = randomBytes(20);\n * const hAddress = hmy.crypto.getAddress(bytes);\n * console.log(hAddress)\n * ```\n */\n\nfunction getAddress(address) {\n  try {\n    return new HarmonyAddress(address);\n  } catch (error) {\n    throw error;\n  }\n}\n\nexports.getAddress = getAddress;","map":{"version":3,"mappings":"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","names":["raw","basic","getBasic","HarmonyAddress","str","toTest","checksum","bech32","bech32TestNet","Object","keyTool_1","bech32_1","addr","basicBool","utils_1","bech32Bool","bech32TestNetBool","replace","toLowerCase","fromB32","fromB32TestNet","Error","exports","getAddress","address","error"],"sourceRoot":"","sources":["../src/address.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}