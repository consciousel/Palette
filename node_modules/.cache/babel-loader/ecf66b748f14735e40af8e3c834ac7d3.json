{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateAddressFromPrivatekey = exports.generatePrivateKeyFromMnemonic = exports.generateAddressFromXPub = exports.generateAlgodAddressFromPrivatetKey = exports.toLegacyAddress = exports.generateFlowPublicKeyFromPrivateKey = exports.generateEgldAddress = void 0;\n\nconst crypto_1 = require(\"@binance-chain/javascript-sdk/lib/crypto\");\n\nconst crypto_2 = require(\"@harmony-js/crypto\"); // @ts-ignore\n// import {ECDSA_secp256k1, encodeKey, SHA3_256} from '@onflow/util-encode-key';\n\n\nconst bech32 = __importStar(require(\"bech32\"));\n\nconst bip32_1 = require(\"bip32\");\n\nconst bip39_1 = require(\"bip39\");\n\nconst bitcoinjs_lib_1 = require(\"bitcoinjs-lib\");\n\nconst ed25519_hd_key_1 = require(\"ed25519-hd-key\");\n\nconst elliptic = __importStar(require(\"elliptic\"));\n\nconst ethereumjs_wallet_1 = __importStar(require(\"ethereumjs-wallet\")); // @ts-ignore\n\n\nconst constants_1 = require(\"../constants\");\n\nconst model_1 = require(\"../model\");\n\nconst cardano_crypto_1 = __importDefault(require(\"./cardano.crypto\"));\n\nconst tron_crypto_1 = require(\"./tron.crypto\");\n\nconst algosdk = require('algosdk');\n\nconst base32 = require('base32.js');\n\nconst sha512_256 = require('js-sha512').sha512_256; // tslint:disable:no-var-requires\n\n\nconst bcash = require('@tatumio/bitcoincashjs2-lib');\n\nconst cashaddr = require('cashaddrjs');\n\nconst coininfo = require('coininfo'); // tslint:disable-next-line:no-var-requires\n\n\nconst TronWeb = require('tronweb');\n/**\n * Generate Bitcoin address\n * @param testnet testnet or mainnet version of address\n * @param xpub extended public key to generate address from\n * @param i derivation index of address to generate. Up to 2^31 addresses can be generated.\n * @returns blockchain address\n */\n\n\nconst generateBtcAddress = (testnet, xpub, i) => {\n  const network = testnet ? bitcoinjs_lib_1.networks.testnet : bitcoinjs_lib_1.networks.bitcoin;\n  const w = bip32_1.fromBase58(xpub, network).derivePath(String(i));\n  return bitcoinjs_lib_1.payments.p2wpkh({\n    pubkey: w.publicKey,\n    network\n  }).address;\n};\n/**\n * Generate Dogecoin address\n * @param testnet testnet or mainnet version of address\n * @param xpub extended public key to generate address from\n * @param i derivation index of address to generate. Up to 2^31 addresses can be generated.\n * @returns blockchain address\n */\n\n\nconst generateDogeAddress = (testnet, xpub, i) => {\n  const network = testnet ? constants_1.DOGE_TEST_NETWORK : constants_1.DOGE_NETWORK;\n  const w = bip32_1.fromBase58(xpub, network).derivePath(String(i));\n  return bitcoinjs_lib_1.payments.p2pkh({\n    pubkey: w.publicKey,\n    network\n  }).address;\n};\n/**\n * Generate Tron address\n * @param xpub extended public key to generate address from\n * @param i derivation index of address to generate. Up to 2^31 addresses can be generated.\n * @returns blockchain address\n */\n\n\nconst generateTronAddress = (xpub, i) => {\n  const w = bip32_1.fromPublicKey(Buffer.from(xpub.slice(0, 66), 'hex'), Buffer.from(xpub.slice(-64), 'hex'));\n  return TronWeb.address.fromHex(tron_crypto_1.generateAddress(w.derive(i).publicKey));\n};\n/**\n * Generate Litecoin address\n * @param testnet testnet or mainnet version of address\n * @param xpub extended public key to generate address from\n * @param i derivation index of address to generate. Up to 2^31 addresses can be generated.\n * @returns blockchain address\n */\n\n\nconst generateLtcAddress = (testnet, xpub, i) => {\n  const network = testnet ? constants_1.LTC_TEST_NETWORK : constants_1.LTC_NETWORK;\n  const w = bip32_1.fromBase58(xpub, network).derivePath(String(i));\n  return bitcoinjs_lib_1.payments.p2pkh({\n    pubkey: w.publicKey,\n    network\n  }).address;\n};\n/**\n * Generate Bitcoin Cash address\n * @param testnet testnet or mainnet version of address\n * @param xpub extended public key to generate address from\n * @param i derivation index of address to generate. Up to 2^31 addresses can be generated.\n * @returns blockchain address\n */\n\n\nconst generateBchAddress = (testnet, xpub, i) => {\n  const network = testnet ? bitcoinjs_lib_1.networks.testnet : bitcoinjs_lib_1.networks.bitcoin;\n  const hdNode = bcash.HDNode.fromBase58(xpub, network);\n  const legacy = hdNode.derivePath(String(i)).getAddress();\n\n  const decoded = _decode(legacy);\n\n  return cashaddr.encode(decoded.prefix, decoded.type, decoded.hash);\n};\n/**\n * Generate Ethereum or any other ERC20 address\n * @param testnet testnet or mainnet version of address\n * @param xpub extended public key to generate address from\n * @param i derivation index of address to generate. Up to 2^31 addresses can be generated.\n * @returns blockchain address\n */\n\n\nconst generateEthAddress = (testnet, xpub, i) => {\n  const w = ethereumjs_wallet_1.hdkey.fromExtendedKey(xpub);\n  const wallet = w.deriveChild(i).getWallet();\n  return '0x' + wallet.getAddress().toString('hex').toLowerCase();\n};\n/**\n * Generate XDC address\n * @param testnet testnet or mainnet version of address\n * @param xpub extended public key to generate address from\n * @param i derivation index of address to generate. Up to 2^31 addresses can be generated.\n * @returns blockchain address\n */\n\n\nconst generateXdcAddress = (testnet, xpub, i) => {\n  const w = ethereumjs_wallet_1.hdkey.fromExtendedKey(xpub);\n  const wallet = w.deriveChild(i).getWallet();\n  return 'xdc' + wallet.getAddress().toString('hex').toLowerCase();\n};\n/**\n * Generate ONE address\n * @param testnet testnet or mainnet version of address\n * @param xpub extended public key to generate address from\n * @param i derivation index of address to generate. Up to 2^31 addresses can be generated.\n * @returns blockchain address\n */\n\n\nconst generateOneAddress = (testnet, xpub, i) => {\n  const w = ethereumjs_wallet_1.hdkey.fromExtendedKey(xpub);\n  const wallet = w.deriveChild(i).getWallet();\n  const harmonyAddress = new crypto_2.HarmonyAddress('0x' + wallet.getAddress().toString('hex'));\n  return harmonyAddress.basicHex;\n};\n/**\n * Generate EGLD address\n * @param testnet testnet or mainnet version of address\n * @param xpub extended public key to generate address from\n * @param i derivation index of address to generate. Up to 2^31 addresses can be generated.\n * @returns blockchain address\n */\n\n\nconst generateEgldAddress = async (testnet, mnem, i) => {\n  const path = (testnet ? constants_1.TESTNET_DERIVATION_PATH + '\\'' : constants_1.EGLD_DERIVATION_PATH) + `/${i}'`;\n  const seed = await bip39_1.mnemonicToSeed(mnem);\n  const {\n    key\n  } = ed25519_hd_key_1.derivePath(path, seed.toString('hex'));\n  const words = bech32.toWords(ed25519_hd_key_1.getPublicKey(key, false));\n  const address = bech32.encode('erd', words);\n  return address;\n};\n\nexports.generateEgldAddress = generateEgldAddress;\n/**\n * Generate Celo or any other ERC20 address\n * @param testnet testnet or mainnet version of address\n * @param xpub extended public key to generate address from\n * @param i derivation index of address to generate. Up to 2^31 addresses can be generated.\n * @returns blockchain address\n */\n\nconst generateCeloAddress = (testnet, xpub, i) => {\n  const w = ethereumjs_wallet_1.hdkey.fromExtendedKey(xpub);\n  const wallet = w.deriveChild(i).getWallet();\n  return '0x' + wallet.getAddress().toString('hex').toLowerCase();\n};\n/**\n * Generate QTUM address\n * @param testnet testnet or mainnet version of address\n * @param xpub extended public key to generate address from\n * @param i derivation index of address to generate. Up to 2^31 addresses can be generated.\n * @returns blockchain address\n */\n\n\nconst generateQtumAddress = (testnet, xpub, i) => {\n  const network = testnet ? constants_1.QTUM_NETWORK_TESTNET : constants_1.QTUM_NETWORK_MAINNET;\n  const w = bip32_1.fromBase58(xpub, network).derivePath(String(i));\n  return bitcoinjs_lib_1.payments.p2pkh({\n    pubkey: w.publicKey,\n    network\n  }).address;\n};\n/**\n * Generate FLOW or FUSD public key\n * @param xpub extended public key to generate address from\n * @param i derivation index of address to generate. Up to 2^31 addresses can be generated.\n * @returns blockchain address\n */\n\n\nconst generateFlowPublicKey = (xpub, i) => {\n  const w = bip32_1.fromBase58(xpub).derivePath(String(i));\n  const s = new elliptic.ec('secp256k1').keyFromPublic(w.publicKey).getPublic().encode('hex', false);\n  return s.slice(2);\n};\n/**\n * Generate FLOW or FUSD public key from private key\n * @returns blockchain address\n */\n\n\nconst generateFlowPublicKeyFromPrivateKey = pk => {\n  const s = new elliptic.ec('secp256k1').keyFromPrivate(pk).getPublic().encode('hex', false);\n  return s.slice(2);\n};\n\nexports.generateFlowPublicKeyFromPrivateKey = generateFlowPublicKeyFromPrivateKey;\n/**\n * Generate VeChain address\n * @param testnet testnet or mainnet version of address\n * @param xpub extended public key to generate address from\n * @param i derivation index of address to generate. Up to 2^31 addresses can be generated.\n * @returns blockchain address\n */\n\nconst generateVetAddress = (testnet, xpub, i) => {\n  const w = ethereumjs_wallet_1.hdkey.fromExtendedKey(xpub);\n  const wallet = w.deriveChild(i).getWallet();\n  return '0x' + wallet.getAddress().toString('hex').toLowerCase();\n};\n/**\n * Generate Bitcoin address\n * @param testnet testnet or mainnet version of address\n * @param xpub extended public key to generate address from\n * @param i derivation index of address to generate. Up to 2^31 addresses can be generated.\n * @returns blockchain address\n */\n\n\nconst generateLyraAddress = (testnet, xpub, i) => {\n  const network = testnet ? constants_1.LYRA_TEST_NETWORK : constants_1.LYRA_NETWORK;\n  const w = bip32_1.fromBase58(xpub, network).derivePath(String(i));\n  return bitcoinjs_lib_1.payments.p2pkh({\n    pubkey: w.publicKey,\n    network\n  }).address;\n};\n/**\n * Generate Bitcoin private key from mnemonic seed\n * @param testnet testnet or mainnet version of address\n * @param mnemonic mnemonic to generate private key from\n * @param i derivation index of private key to generate.\n * @returns blockchain private key to the address\n */\n\n\nconst generateBtcPrivateKey = async (testnet, mnemonic, i) => {\n  const network = testnet ? bitcoinjs_lib_1.networks.testnet : bitcoinjs_lib_1.networks.bitcoin;\n  return bip32_1.fromSeed(await bip39_1.mnemonicToSeed(mnemonic), network).derivePath(testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.BTC_DERIVATION_PATH).derive(i).toWIF();\n};\n/**\n * Generate Tron private key from mnemonic seed\n * @param mnemonic mnemonic to generate private key from\n * @param i derivation index of private key to generate.\n * @returns blockchain private key to the address\n */\n\n\nconst generateTronPrivateKey = async (mnemonic, i) => {\n  var _a, _b;\n\n  return (_b = (_a = bip32_1.fromSeed(await bip39_1.mnemonicToSeed(mnemonic)).derivePath(constants_1.TRON_DERIVATION_PATH).derive(i).privateKey) === null || _a === void 0 ? void 0 : _a.toString('hex')) !== null && _b !== void 0 ? _b : '';\n};\n/**\n * Generate QTUM private key from mnemonic seed\n * @param mnemonic mnemonic to generate private key from\n * @param i derivation index of private key to generate.\n * @returns blockchain private key to the address\n */\n\n\nconst generateQtumPrivateKey = async (testnet, mnem, i) => {\n  const network = testnet ? constants_1.QTUM_NETWORK_TESTNET : constants_1.QTUM_NETWORK_MAINNET;\n  return bip32_1.fromSeed(await bip39_1.mnemonicToSeed(mnem), network).derivePath(testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.QTUM_DERIVATION_PATH).derive(i).toWIF();\n};\n/**\n * Generate Flow private key from mnemonic seed\n * @returns blockchain private key to the address\n */\n\n\nconst generateFlowPrivateKey = async function (mnemonic, i) {\n  let alg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'secp256k1';\n  const key = bip32_1.fromSeed(await bip39_1.mnemonicToSeed(mnemonic)).derivePath(constants_1.FLOW_DERIVATION_PATH).derive(i).privateKey;\n  return new elliptic.ec(alg).keyFromPrivate(key).getPrivate().toString(16);\n};\n/**\n * Generate Litecoin private key from mnemonic seed\n * @param testnet testnet or mainnet version of address\n * @param mnemonic mnemonic to generate private key from\n * @param i derivation index of private key to generate.\n * @returns blockchain private key to the address\n */\n\n\nconst generateLtcPrivateKey = async (testnet, mnemonic, i) => {\n  const network = testnet ? constants_1.LTC_TEST_NETWORK : constants_1.LTC_NETWORK;\n  return bip32_1.fromSeed(await bip39_1.mnemonicToSeed(mnemonic), network).derivePath(testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.LTC_DERIVATION_PATH).derive(i).toWIF();\n};\n/**\n * Generate Dogecoin private key from mnemonic seed\n * @param testnet testnet or mainnet version of address\n * @param mnemonic mnemonic to generate private key from\n * @param i derivation index of private key to generate.\n * @returns blockchain private key to the address\n */\n\n\nconst generateDogePrivateKey = async (testnet, mnemonic, i) => {\n  const network = testnet ? constants_1.DOGE_TEST_NETWORK : constants_1.DOGE_NETWORK;\n  return bip32_1.fromSeed(await bip39_1.mnemonicToSeed(mnemonic), network).derivePath(testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.DOGE_DERIVATION_PATH).derive(i).toWIF();\n};\n/**\n * Generate Bitcoin Cash private key from mnemonic seed\n * @param testnet testnet or mainnet version of address\n * @param mnemonic mnemonic to generate private key from\n * @param i derivation index of private key to generate.\n * @returns blockchain private key to the address\n */\n\n\nconst generateBchPrivateKey = async (testnet, mnemonic, i) => {\n  const network = testnet ? bitcoinjs_lib_1.networks.testnet : bitcoinjs_lib_1.networks.bitcoin;\n  return bip32_1.fromSeed(await bip39_1.mnemonicToSeed(mnemonic), network).derivePath(constants_1.BCH_DERIVATION_PATH).derive(i).toWIF();\n};\n\nconst toLegacyAddress = address => {\n  const {\n    prefix,\n    type,\n    hash\n  } = _decode(address);\n\n  let bitcoincash = coininfo.bitcoincash.main;\n\n  switch (prefix) {\n    case 'bitcoincash':\n      bitcoincash = coininfo.bitcoincash.main;\n      break;\n\n    case 'bchtest':\n      bitcoincash = coininfo.bitcoincash.test;\n      break;\n  }\n\n  let version = bitcoincash.versions.public;\n\n  switch (type) {\n    case 'P2PKH':\n      version = bitcoincash.versions.public;\n      break;\n\n    case 'P2SH':\n      version = bitcoincash.versions.scripthash;\n      break;\n  }\n\n  const hashBuf = Buffer.from(hash);\n  return bcash.address.toBase58Check(hashBuf, version);\n};\n\nexports.toLegacyAddress = toLegacyAddress;\n\nconst _decode = address => {\n  const {\n    version,\n    hash\n  } = bcash.address.fromBase58Check(address);\n  let decoded = {\n    prefix: '',\n    type: '',\n    hash,\n    format: ''\n  };\n\n  switch (version) {\n    case bitcoinjs_lib_1.networks.bitcoin.pubKeyHash:\n      decoded = {\n        prefix: 'bitcoincash',\n        type: 'P2PKH',\n        hash,\n        format: 'legacy'\n      };\n      break;\n\n    case bitcoinjs_lib_1.networks.bitcoin.scriptHash:\n      decoded = {\n        prefix: 'bitcoincash',\n        type: 'P2SH',\n        hash,\n        format: 'legacy'\n      };\n      break;\n\n    case bitcoinjs_lib_1.networks.testnet.pubKeyHash:\n      decoded = {\n        prefix: 'bchtest',\n        type: 'P2PKH',\n        hash,\n        format: 'legacy'\n      };\n      break;\n\n    case bitcoinjs_lib_1.networks.testnet.scriptHash:\n      decoded = {\n        prefix: 'bchtest',\n        type: 'P2SH',\n        hash,\n        format: 'legacy'\n      };\n      break;\n  }\n\n  return decoded;\n};\n/**\n * Generate Ethereum or any other ERC20 private key from mnemonic seed\n * @param testnet testnet or mainnet version of address\n * @param mnemonic mnemonic to generate private key from\n * @param i derivation index of private key to generate.\n * @returns blockchain private key to the address\n */\n\n\nconst generateEthPrivateKey = async (testnet, mnemonic, i) => {\n  const path = testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.ETH_DERIVATION_PATH;\n  const hdwallet = ethereumjs_wallet_1.hdkey.fromMasterSeed(await bip39_1.mnemonicToSeed(mnemonic));\n  const derivePath = hdwallet.derivePath(path).deriveChild(i);\n  return derivePath.getWallet().getPrivateKeyString();\n};\n/**\n * Generate Klaytn private key from mnemonic seed\n * @param testnet testnet or mainnet version of address\n * @param mnemonic mnemonic to generate private key from\n * @param i derivation index of private key to generate.\n * @returns blockchain private key to the address\n */\n\n\nconst generateKlayPrivateKey = async (testnet, mnemonic, i) => {\n  const path = testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.KLAYTN_DERIVATION_PATH;\n  const hdwallet = ethereumjs_wallet_1.hdkey.fromMasterSeed(await bip39_1.mnemonicToSeed(mnemonic));\n  const derivePath = hdwallet.derivePath(path).deriveChild(i);\n  return derivePath.getWallet().getPrivateKeyString();\n};\n/**\n * Generate Harmony or any other ERC20 private key from mnemonic seed\n * @param testnet testnet or mainnet version of address\n * @param mnemonic mnemonic to generate private key from\n * @param i derivation index of private key to generate.\n * @returns blockchain private key to the address\n */\n\n\nconst generateOnePrivateKey = async (testnet, mnemonic, i) => {\n  const path = testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.ONE_DERIVATION_PATH;\n  const hdwallet = ethereumjs_wallet_1.hdkey.fromMasterSeed(await bip39_1.mnemonicToSeed(mnemonic));\n  const derivePath = hdwallet.derivePath(path).deriveChild(i);\n  return derivePath.getWallet().getPrivateKeyString();\n};\n/**\n * Generate EGLD private key from mnemonic seed\n * @param testnet testnet or mainnet version of address\n * @param mnemonic mnemonic to generate private key from\n * @param i derivation index of private key to generate.\n * @returns blockchain private key to the address\n */\n\n\nconst generateEgldPrivateKey = async (testnet, mnemonic, i) => {\n  const path = (testnet ? constants_1.TESTNET_DERIVATION_PATH + '\\'' : constants_1.EGLD_DERIVATION_PATH) + `/${i}'`;\n  const seed = await bip39_1.mnemonicToSeed(mnemonic);\n  const {\n    key\n  } = ed25519_hd_key_1.derivePath(path, seed.toString('hex'));\n  return key.toString('hex');\n};\n/**\n * Generate Polygon or any other ERC20 private key from mnemonic seed\n * @param testnet testnet or mainnet version of address\n * @param mnemonic mnemonic to generate private key from\n * @param i derivation index of private key to generate.\n * @returns blockchain private key to the address\n */\n\n\nconst generatePolygonPrivateKey = async (testnet, mnemonic, i) => {\n  const path = testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.MATIC_DERIVATION_PATH;\n  const hdwallet = ethereumjs_wallet_1.hdkey.fromMasterSeed(await bip39_1.mnemonicToSeed(mnemonic));\n  const derivePath = hdwallet.derivePath(path).deriveChild(i);\n  return derivePath.getWallet().getPrivateKeyString();\n};\n/**\n * Generate BSC or any other BEP-20 or BEP721 private key from mnemonic seed\n * @param testnet testnet or mainnet version of address\n * @param mnemonic mnemonic to generate private key from\n * @param i derivation index of private key to generate.\n * @returns blockchain private key to the address\n */\n\n\nconst generateBscPrivateKey = async (testnet, mnemonic, i) => {\n  return generateEthPrivateKey(testnet, mnemonic, i);\n};\n/**\n * Generate XDC private key from mnemonic seed\n * @param testnet testnet or mainnet version of address\n * @param mnemonic mnemonic to generate private key from\n * @param i derivation index of private key to generate.\n * @returns blockchain private key to the address\n */\n\n\nconst generateXdcPrivateKey = async (testnet, mnemonic, i) => {\n  const path = testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.XDC_DERIVATION_PATH;\n  const hdwallet = ethereumjs_wallet_1.hdkey.fromMasterSeed(await bip39_1.mnemonicToSeed(mnemonic));\n  const derivePath = hdwallet.derivePath(path).deriveChild(i);\n  return derivePath.getWallet().getPrivateKeyString();\n};\n/**\n * Generate Celo or any other ERC20 private key from mnemonic seed\n * @param testnet testnet or mainnet version of address\n * @param mnemonic mnemonic to generate private key from\n * @param i derivation index of private key to generate.\n * @returns blockchain private key to the address\n */\n\n\nconst generateCeloPrivateKey = async (testnet, mnemonic, i) => {\n  const path = testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.CELO_DERIVATION_PATH;\n  const hdwallet = ethereumjs_wallet_1.hdkey.fromMasterSeed(await bip39_1.mnemonicToSeed(mnemonic));\n  const derivePath = hdwallet.derivePath(path).deriveChild(i);\n  return derivePath.getWallet().getPrivateKeyString();\n};\n/**\n * Generate VeChain private key from mnemonic seed\n * @param testnet testnet or mainnet version of address\n * @param mnemonic mnemonic to generate private key from\n * @param i derivation index of private key to generate.\n * @returns blockchain private key to the address\n */\n\n\nconst generateVetPrivateKey = async (testnet, mnemonic, i) => {\n  const path = testnet ? constants_1.TESTNET_DERIVATION_PATH : constants_1.VET_DERIVATION_PATH;\n  const hdwallet = ethereumjs_wallet_1.hdkey.fromMasterSeed(await bip39_1.mnemonicToSeed(mnemonic));\n  const derivePath = hdwallet.derivePath(path).deriveChild(i);\n  return derivePath.getWallet().getPrivateKeyString();\n};\n/**\n * Convert Bitcoin Private Key to Address\n * @param testnet testnet or mainnet version of address\n * @param privkey private key to use\n * @returns blockchain address\n */\n\n\nconst convertBtcPrivateKey = (testnet, privkey) => {\n  const network = testnet ? bitcoinjs_lib_1.networks.testnet : bitcoinjs_lib_1.networks.bitcoin;\n  const keyPair = bitcoinjs_lib_1.ECPair.fromWIF(privkey, network);\n  return bitcoinjs_lib_1.payments.p2pkh({\n    pubkey: keyPair.publicKey,\n    network\n  }).address;\n};\n/**\n * Generate QTUM private key from mnemonic seed\n * @param testnet testnet or mainnet version of address\n * @param mnemonic mnemonic to generate private key from\n * @param i derivation index of private key to generate.\n * @returns blockchain private key to the address\n */\n\n\nconst convertQTUMPrivateKey = (testnet, privkey) => {\n  const network = testnet ? constants_1.QTUM_NETWORK_TESTNET : constants_1.QTUM_NETWORK_MAINNET;\n  const keyPair = bitcoinjs_lib_1.ECPair.fromWIF(privkey, network);\n  return bitcoinjs_lib_1.payments.p2pkh({\n    pubkey: keyPair.publicKey,\n    network\n  }).address;\n};\n/**\n * Convert Scrypta Private Key to Address\n * @param testnet testnet or mainnet version of address\n * @param privkey private key to use\n * @returns blockchain address\n */\n\n\nconst convertLyraPrivateKey = (testnet, privkey) => {\n  const network = testnet ? constants_1.LYRA_TEST_NETWORK : constants_1.LYRA_NETWORK;\n  const keyPair = bitcoinjs_lib_1.ECPair.fromWIF(privkey, network);\n  return bitcoinjs_lib_1.payments.p2pkh({\n    pubkey: keyPair.publicKey,\n    network\n  }).address;\n};\n/**\n * Convert Ethereum Private Key to Address\n * @param testnet testnet or mainnet version of address\n * @param privkey private key to use\n * @returns blockchain address\n */\n\n\nconst convertEthPrivateKey = (testnet, privkey) => {\n  const wallet = ethereumjs_wallet_1.default.fromPrivateKey(Buffer.from(privkey.replace('0x', ''), 'hex'));\n  return wallet.getAddressString();\n};\n/**\n * Convert Harmony Private Key to Address\n * @param testnet testnet or mainnet version of address\n * @param privKey private key to use\n * @returns blockchain address\n */\n\n\nconst convertOnePrivateKey = (testnet, privKey) => {\n  const wallet = ethereumjs_wallet_1.default.fromPrivateKey(Buffer.from(privKey.replace('0x', ''), 'hex'));\n  return wallet.getAddressString();\n};\n/**\n * Convert EGLD Private Key to Address\n * @param testnet testnet or mainnet version of address\n * @param privKey private key to use\n * @returns blockchain address\n */\n\n\nconst convertEgldPrivateKey = (testnet, privKey) => {\n  const publicKey = ed25519_hd_key_1.getPublicKey(Buffer.from(privKey, 'hex'), false).toString('hex');\n  const words = bech32.toWords(Buffer.from(publicKey.slice(-64), 'hex'));\n  const address = bech32.encode('erd', words);\n  return address;\n};\n/**\n * Convert XDC Private Key to Address\n * @param testnet testnet or mainnet version of address\n * @param privKey private key to use\n * @returns blockchain address\n */\n\n\nconst convertXdcPrivateKey = (testnet, privKey) => {\n  const wallet = ethereumjs_wallet_1.default.fromPrivateKey(Buffer.from(privKey.replace('0x', ''), 'hex'));\n  return wallet.getAddressString().replace('0x', 'xdc');\n};\n/**\n * Generate Algo Address From Private Key\n * @param privKey Private key to use\n * @returns blockchain address\n */\n\n\nconst generateAlgodAddressFromPrivatetKey = privKey => {\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const secretKey = decoder.write(privKey).buf;\n  const mn = algosdk.secretKeyToMnemonic(secretKey);\n  return algosdk.mnemonicToSecretKey(mn).addr;\n};\n\nexports.generateAlgodAddressFromPrivatetKey = generateAlgodAddressFromPrivatetKey;\n/**\n * Generate address\n * @param currency type of blockchain\n * @param testnet testnet or mainnet version of address\n * @param xpub extended public key to generate address from\n * @param i derivation index of address to generate. Up to 2^31 addresses can be generated.\n * @returns blockchain address\n */\n\nconst generateAddressFromXPub = (currency, testnet, xpub, i) => {\n  switch (currency) {\n    case model_1.Currency.BTC:\n      return generateBtcAddress(testnet, xpub, i);\n\n    case model_1.Currency.TRON:\n    case model_1.Currency.USDT_TRON:\n    case model_1.Currency.INRT_TRON:\n      return generateTronAddress(xpub, i);\n\n    case model_1.Currency.FLOW:\n    case model_1.Currency.FUSD:\n      return generateFlowPublicKey(xpub, i);\n\n    case model_1.Currency.LTC:\n      return generateLtcAddress(testnet, xpub, i);\n\n    case model_1.Currency.DOGE:\n      return generateDogeAddress(testnet, xpub, i);\n\n    case model_1.Currency.CELO:\n    case model_1.Currency.CEUR:\n    case model_1.Currency.CUSD:\n      return generateCeloAddress(testnet, xpub, i);\n\n    case model_1.Currency.BCH:\n      return generateBchAddress(testnet, xpub, i);\n\n    case model_1.Currency.QTUM:\n      return generateQtumAddress(testnet, xpub, i);\n\n    case model_1.Currency.USDT:\n    case model_1.Currency.WBTC:\n    case model_1.Currency.LEO:\n    case model_1.Currency.LINK:\n    case model_1.Currency.UNI:\n    case model_1.Currency.FREE:\n    case model_1.Currency.MKR:\n    case model_1.Currency.USDC:\n    case model_1.Currency.BAT:\n    case model_1.Currency.TUSD:\n    case model_1.Currency.PAX:\n    case model_1.Currency.PAXG:\n    case model_1.Currency.MATIC_ETH:\n    case model_1.Currency.PLTC:\n    case model_1.Currency.XCON:\n    case model_1.Currency.REVV:\n    case model_1.Currency.SAND:\n    case model_1.Currency.ETH:\n    case model_1.Currency.BSC:\n    case model_1.Currency.MATIC:\n    case model_1.Currency.USDT_MATIC:\n    case model_1.Currency.USDC_MATIC:\n    case model_1.Currency.LATOKEN:\n    case model_1.Currency.COIIN:\n    case model_1.Currency.BETH:\n    case model_1.Currency.GAMEE:\n    case model_1.Currency.BUSD:\n    case model_1.Currency.KLAY:\n    case model_1.Currency.USDC_BSC:\n    case model_1.Currency.COIIN_BSC:\n    case model_1.Currency.B2U_BSC:\n    case model_1.Currency.CAKE:\n    case model_1.Currency.HAG:\n    case model_1.Currency.BUSD_BSC:\n    case model_1.Currency.GMC_BSC:\n    case model_1.Currency.GMC:\n    case model_1.Currency.BBTC:\n    case model_1.Currency.BADA:\n    case model_1.Currency.RMD:\n    case model_1.Currency.WBNB:\n    case model_1.Currency.BDOT:\n    case model_1.Currency.BXRP:\n    case model_1.Currency.BLTC:\n    case model_1.Currency.BBCH:\n    case model_1.Currency.MMY:\n      return generateEthAddress(testnet, xpub, i);\n\n    case model_1.Currency.ONE:\n      return generateOneAddress(testnet, xpub, i);\n\n    case model_1.Currency.XDC:\n      return generateXdcAddress(testnet, xpub, i);\n\n    case model_1.Currency.EGLD:\n      return exports.generateEgldAddress(testnet, xpub, i);\n\n    case model_1.Currency.VET:\n      return generateVetAddress(testnet, xpub, i);\n\n    case model_1.Currency.ADA:\n      return cardano_crypto_1.default.generateAddress(testnet, xpub, i);\n\n    default:\n      throw new Error('Unsupported blockchain.');\n  }\n};\n\nexports.generateAddressFromXPub = generateAddressFromXPub;\n/**\n * Generate private key from mnemonic seed\n * @param currency type of blockchain\n * @param testnet testnet or mainnet version of address\n * @param mnemonic mnemonic to generate private key from\n * @param i derivation index of private key to generate.\n * @returns blockchain private key to the address\n */\n\nconst generatePrivateKeyFromMnemonic = (currency, testnet, mnemonic, i) => {\n  switch (currency) {\n    case model_1.Currency.BTC:\n      return generateBtcPrivateKey(testnet, mnemonic, i);\n\n    case model_1.Currency.LTC:\n      return generateLtcPrivateKey(testnet, mnemonic, i);\n\n    case model_1.Currency.DOGE:\n      return generateDogePrivateKey(testnet, mnemonic, i);\n\n    case model_1.Currency.BCH:\n      return generateBchPrivateKey(testnet, mnemonic, i);\n\n    case model_1.Currency.TRON:\n    case model_1.Currency.USDT_TRON:\n    case model_1.Currency.INRT_TRON:\n      return generateTronPrivateKey(mnemonic, i);\n\n    case model_1.Currency.QTUM:\n      return generateQtumPrivateKey(testnet, mnemonic, i);\n\n    case model_1.Currency.MATIC:\n    case model_1.Currency.USDT_MATIC:\n    case model_1.Currency.USDC_MATIC:\n      return generatePolygonPrivateKey(testnet, mnemonic, i);\n\n    case model_1.Currency.FLOW:\n    case model_1.Currency.FUSD:\n      return generateFlowPrivateKey(mnemonic, i);\n\n    case model_1.Currency.CELO:\n    case model_1.Currency.CEUR:\n    case model_1.Currency.CUSD:\n      return generateCeloPrivateKey(testnet, mnemonic, i);\n\n    case model_1.Currency.USDT:\n    case model_1.Currency.WBTC:\n    case model_1.Currency.LEO:\n    case model_1.Currency.LINK:\n    case model_1.Currency.UNI:\n    case model_1.Currency.FREE:\n    case model_1.Currency.MKR:\n    case model_1.Currency.LATOKEN:\n    case model_1.Currency.COIIN:\n    case model_1.Currency.USDC:\n    case model_1.Currency.RMD:\n    case model_1.Currency.BAT:\n    case model_1.Currency.TUSD:\n    case model_1.Currency.PAX:\n    case model_1.Currency.PAXG:\n    case model_1.Currency.PLTC:\n    case model_1.Currency.XCON:\n    case model_1.Currency.REVV:\n    case model_1.Currency.SAND:\n    case model_1.Currency.ETH:\n    case model_1.Currency.MATIC_ETH:\n    case model_1.Currency.BSC:\n    case model_1.Currency.BETH:\n    case model_1.Currency.GAMEE:\n    case model_1.Currency.BBTC:\n    case model_1.Currency.BADA:\n    case model_1.Currency.WBNB:\n    case model_1.Currency.BUSD:\n    case model_1.Currency.USDC_BSC:\n    case model_1.Currency.COIIN_BSC:\n    case model_1.Currency.B2U_BSC:\n    case model_1.Currency.CAKE:\n    case model_1.Currency.HAG:\n    case model_1.Currency.BUSD_BSC:\n    case model_1.Currency.GMC:\n    case model_1.Currency.GMC_BSC:\n    case model_1.Currency.BDOT:\n    case model_1.Currency.BXRP:\n    case model_1.Currency.BLTC:\n    case model_1.Currency.BBCH:\n    case model_1.Currency.MMY:\n      return generateEthPrivateKey(testnet, mnemonic, i);\n\n    case model_1.Currency.ONE:\n      return generateOnePrivateKey(testnet, mnemonic, i);\n\n    case model_1.Currency.KLAY:\n      return generateKlayPrivateKey(testnet, mnemonic, i);\n\n    case model_1.Currency.XDC:\n      return generateXdcPrivateKey(testnet, mnemonic, i);\n\n    case model_1.Currency.EGLD:\n      return generateEgldPrivateKey(testnet, mnemonic, i);\n\n    case model_1.Currency.VET:\n      return generateVetPrivateKey(testnet, mnemonic, i);\n\n    case model_1.Currency.ADA:\n      return cardano_crypto_1.default.generatePrivateKey(mnemonic, i);\n\n    default:\n      throw new Error('Unsupported blockchain.');\n  }\n};\n\nexports.generatePrivateKeyFromMnemonic = generatePrivateKeyFromMnemonic;\n/**\n * Generate address from private key\n * @param currency type of blockchain\n * @param testnet testnet or mainnet version of address\n * @param privateKey private key to use\n * @returns blockchain private key to the address\n */\n\nconst generateAddressFromPrivatekey = (currency, testnet, privateKey) => {\n  switch (currency) {\n    case model_1.Currency.BTC:\n      return convertBtcPrivateKey(testnet, privateKey);\n\n    case model_1.Currency.QTUM:\n      return convertQTUMPrivateKey(testnet, privateKey);\n\n    case model_1.Currency.BNB:\n      return crypto_1.getAddressFromPrivateKey(privateKey, testnet ? 'tbnb' : 'bnb');\n\n    case model_1.Currency.TRON:\n    case model_1.Currency.USDT_TRON:\n    case model_1.Currency.INRT_TRON:\n      return TronWeb.address.fromPrivateKey(privateKey);\n\n    case model_1.Currency.ETH:\n    case model_1.Currency.USDT:\n    case model_1.Currency.GMC:\n    case model_1.Currency.GMC_BSC:\n    case model_1.Currency.RMD:\n    case model_1.Currency.WBTC:\n    case model_1.Currency.LEO:\n    case model_1.Currency.LINK:\n    case model_1.Currency.UNI:\n    case model_1.Currency.FREE:\n    case model_1.Currency.MKR:\n    case model_1.Currency.USDC:\n    case model_1.Currency.BAT:\n    case model_1.Currency.TUSD:\n    case model_1.Currency.PAX:\n    case model_1.Currency.PAXG:\n    case model_1.Currency.PLTC:\n    case model_1.Currency.XCON:\n    case model_1.Currency.LATOKEN:\n    case model_1.Currency.COIIN:\n    case model_1.Currency.REVV:\n    case model_1.Currency.SAND:\n    case model_1.Currency.MATIC_ETH:\n    case model_1.Currency.BSC:\n    case model_1.Currency.MMY:\n    case model_1.Currency.MATIC:\n    case model_1.Currency.KLAY:\n      return convertEthPrivateKey(testnet, privateKey);\n\n    case model_1.Currency.ONE:\n      return convertOnePrivateKey(testnet, privateKey);\n\n    case model_1.Currency.XDC:\n      return convertXdcPrivateKey(testnet, privateKey);\n\n    case model_1.Currency.EGLD:\n      return convertEgldPrivateKey(testnet, privateKey);\n\n    default:\n      throw new Error('Unsupported blockchain.');\n  }\n};\n\nexports.generateAddressFromPrivatekey = generateAddressFromPrivatekey;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA,+C,CACA;AACA;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA,uE,CACA;;;AACA;;AA0BA;;AACA;;AACA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,WAAD,CAAP,CAAqBE,UAAxC,C,CACA;;;AACA,MAAMC,KAAK,GAAGH,OAAO,CAAC,6BAAD,CAArB;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMK,QAAQ,GAAGL,OAAO,CAAC,UAAD,CAAxB,C,CACA;;;AACA,MAAMM,OAAO,GAAGN,OAAO,CAAC,SAAD,CAAvB;AAiBA;;;;;;;;;AAOA,MAAMO,kBAAkB,GAAG,CAACC,OAAD,EAAmBC,IAAnB,EAAiCC,CAAjC,KAA8C;AACvE,QAAMC,OAAO,GAAGH,OAAO,GAAGI,yBAASJ,OAAZ,GAAsBI,yBAASC,OAAtD;AACA,QAAMC,CAAC,GAAGC,mBAAWN,IAAX,EAAiBE,OAAjB,EAA0BK,UAA1B,CAAqCC,MAAM,CAACP,CAAD,CAA3C,CAAV;AACA,SAAOE,yBAASM,MAAT,CAAgB;AAAEC,UAAM,EAAEL,CAAC,CAACM,SAAZ;AAAuBT;AAAvB,GAAhB,EAAkDU,OAAzD;AACD,CAJD;AAMA;;;;;;;;;AAOA,MAAMC,mBAAmB,GAAG,CAACd,OAAD,EAAmBC,IAAnB,EAAiCC,CAAjC,KAA8C;AACxE,QAAMC,OAAO,GAAGH,OAAO,GAAGe,6BAAH,GAAuBA,wBAA9C;AACA,QAAMT,CAAC,GAAGC,mBAAWN,IAAX,EAAiBE,OAAjB,EAA0BK,UAA1B,CAAqCC,MAAM,CAACP,CAAD,CAA3C,CAAV;AACA,SAAOE,yBAASY,KAAT,CAAe;AAAEL,UAAM,EAAEL,CAAC,CAACM,SAAZ;AAAuBT;AAAvB,GAAf,EAAiDU,OAAxD;AACD,CAJD;AAMA;;;;;;;;AAMA,MAAMI,mBAAmB,GAAG,CAAChB,IAAD,EAAeC,CAAf,KAA4B;AACtD,QAAMI,CAAC,GAAGC,sBAAcW,MAAM,CAACC,IAAP,CAAYlB,IAAI,CAACmB,KAAL,CAAW,CAAX,EAAc,EAAd,CAAZ,EAA+B,KAA/B,CAAd,EAAqDF,MAAM,CAACC,IAAP,CAAYlB,IAAI,CAACmB,KAAL,CAAW,CAAC,EAAZ,CAAZ,EAA6B,KAA7B,CAArD,CAAV;AACA,SAAOtB,OAAO,CAACe,OAAR,CAAgBQ,OAAhB,CAAwBC,8BAAgBhB,CAAC,CAACiB,MAAF,CAASrB,CAAT,EAAYU,SAA5B,CAAxB,CAAP;AACD,CAHD;AAKA;;;;;;;;;AAOA,MAAMY,kBAAkB,GAAG,CAACxB,OAAD,EAAmBC,IAAnB,EAAiCC,CAAjC,KAA8C;AACvE,QAAMC,OAAO,GAAGH,OAAO,GAAGe,4BAAH,GAAsBA,uBAA7C;AACA,QAAMT,CAAC,GAAGC,mBAAWN,IAAX,EAAiBE,OAAjB,EAA0BK,UAA1B,CAAqCC,MAAM,CAACP,CAAD,CAA3C,CAAV;AACA,SAAOE,yBAASY,KAAT,CAAe;AAAEL,UAAM,EAAEL,CAAC,CAACM,SAAZ;AAAuBT;AAAvB,GAAf,EAAiDU,OAAxD;AACD,CAJD;AAMA;;;;;;;;;AAOA,MAAMY,kBAAkB,GAAG,CAACzB,OAAD,EAAmBC,IAAnB,EAAiCC,CAAjC,KAA8C;AACvE,QAAMC,OAAO,GAAGH,OAAO,GAAGI,yBAASJ,OAAZ,GAAsBI,yBAASC,OAAtD;AACA,QAAMqB,MAAM,GAAG/B,KAAK,CAACgC,MAAN,CAAaC,UAAb,CAAwB3B,IAAxB,EAA8BE,OAA9B,CAAf;AACA,QAAM0B,MAAM,GAAGH,MAAM,CAAClB,UAAP,CAAkBC,MAAM,CAACP,CAAD,CAAxB,EAA6B4B,UAA7B,EAAf;;AAEA,QAAMC,OAAO,GAAYC,OAAO,CAACH,MAAD,CAAhC;;AAEA,SAAOjC,QAAQ,CAACqC,MAAT,CACLF,OAAO,CAACG,MADH,EAELH,OAAO,CAACI,IAFH,EAGLJ,OAAO,CAACK,IAHH,CAAP;AAKD,CAZD;AAcA;;;;;;;;;AAOA,MAAMC,kBAAkB,GAAG,CAACrC,OAAD,EAAmBC,IAAnB,EAAiCC,CAAjC,KAA8C;AACvE,QAAMI,CAAC,GAAGgC,0BAASC,eAAT,CAAyBtC,IAAzB,CAAV;AACA,QAAMuC,MAAM,GAAGlC,CAAC,CAACmC,WAAF,CAAcvC,CAAd,EAAiBwC,SAAjB,EAAf;AACA,SAAO,OAAOF,MAAM,CAACV,UAAP,GAAoBa,QAApB,CAA6B,KAA7B,EAAoCC,WAApC,EAAd;AACD,CAJD;AAMA;;;;;;;;;AAOA,MAAMC,kBAAkB,GAAG,CAAC7C,OAAD,EAAmBC,IAAnB,EAAiCC,CAAjC,KAA8C;AACvE,QAAMI,CAAC,GAAGgC,0BAASC,eAAT,CAAyBtC,IAAzB,CAAV;AACA,QAAMuC,MAAM,GAAGlC,CAAC,CAACmC,WAAF,CAAcvC,CAAd,EAAiBwC,SAAjB,EAAf;AACA,SAAO,QAAQF,MAAM,CAACV,UAAP,GAAoBa,QAApB,CAA6B,KAA7B,EAAoCC,WAApC,EAAf;AACD,CAJD;AAMA;;;;;;;;;AAOA,MAAME,kBAAkB,GAAG,CAAC9C,OAAD,EAAmBC,IAAnB,EAAiCC,CAAjC,KAA8C;AACvE,QAAMI,CAAC,GAAGgC,0BAASC,eAAT,CAAyBtC,IAAzB,CAAV;AACA,QAAMuC,MAAM,GAAGlC,CAAC,CAACmC,WAAF,CAAcvC,CAAd,EAAiBwC,SAAjB,EAAf;AACA,QAAMK,cAAc,GAAG,IAAIC,uBAAJ,CAAmB,OAAOR,MAAM,CAACV,UAAP,GAAoBa,QAApB,CAA6B,KAA7B,CAA1B,CAAvB;AACA,SAAOI,cAAc,CAACE,QAAtB;AACD,CALD;AAOA;;;;;;;;;AAOO,MAAMC,mBAAmB,GAAG,OAAOlD,OAAP,EAAyBmD,IAAzB,EAAuCjD,CAAvC,KAAqE;AACtG,QAAMkD,IAAI,GAAG,CAACpD,OAAO,GAAGe,sCAA0B,IAA7B,GAAoCA,gCAA5C,IAAoE,IAAIb,CAAC,GAAtF;AACA,QAAMmD,IAAI,GAAG,MAAMC,uBAAeH,IAAf,CAAnB;AACA,QAAM;AAAEI;AAAF,MAAUC,4BAAWJ,IAAX,EAAiBC,IAAI,CAACV,QAAL,CAAc,KAAd,CAAjB,CAAhB;AACA,QAAMc,KAAK,GAAGC,MAAM,CAACC,OAAP,CAAeH,8BAAaD,GAAb,EAAkB,KAAlB,CAAf,CAAd;AACA,QAAM1C,OAAO,GAAG6C,MAAM,CAACzB,MAAP,CAAc,KAAd,EAAqBwB,KAArB,CAAhB;AACA,SAAO5C,OAAP;AACD,CAPM;;AAAM+C,8BAAmBV,mBAAnB;AASb;;;;;;;;AAOA,MAAMW,mBAAmB,GAAG,CAAC7D,OAAD,EAAmBC,IAAnB,EAAiCC,CAAjC,KAA8C;AACxE,QAAMI,CAAC,GAAGgC,0BAASC,eAAT,CAAyBtC,IAAzB,CAAV;AACA,QAAMuC,MAAM,GAAGlC,CAAC,CAACmC,WAAF,CAAcvC,CAAd,EAAiBwC,SAAjB,EAAf;AACA,SAAO,OAAOF,MAAM,CAACV,UAAP,GAAoBa,QAApB,CAA6B,KAA7B,EAAoCC,WAApC,EAAd;AACD,CAJD;AAMA;;;;;;;;;AAOA,MAAMkB,mBAAmB,GAAG,CAAC9D,OAAD,EAAmBC,IAAnB,EAAiCC,CAAjC,KAA8C;AACxE,QAAMC,OAAO,GAAGH,OAAO,GAAGe,gCAAH,GAA0BA,gCAAjD;AACA,QAAMT,CAAC,GAAGC,mBAAWN,IAAX,EAAiBE,OAAjB,EAA0BK,UAA1B,CAAqCC,MAAM,CAACP,CAAD,CAA3C,CAAV;AACA,SAAOE,yBAASY,KAAT,CAAe;AAAEL,UAAM,EAAEL,CAAC,CAACM,SAAZ;AAAuBT;AAAvB,GAAf,EAAiDU,OAAxD;AACD,CAJD;AAMA;;;;;;;;AAMA,MAAMkD,qBAAqB,GAAG,CAAC9D,IAAD,EAAeC,CAAf,KAA4B;AACxD,QAAMI,CAAC,GAAGC,mBAAWN,IAAX,EAAiBO,UAAjB,CAA4BC,MAAM,CAACP,CAAD,CAAlC,CAAV;AACA,QAAM8D,CAAC,GAAG,IAAIC,QAAQ,CAACC,EAAb,CAAgB,WAAhB,EAA6BC,aAA7B,CAA2C7D,CAAC,CAACM,SAA7C,EAAwDwD,SAAxD,GAAoEnC,MAApE,CAA2E,KAA3E,EAAkF,KAAlF,CAAV;AACA,SAAO+B,CAAC,CAAC5C,KAAF,CAAQ,CAAR,CAAP;AACD,CAJD;AAMA;;;;;;AAIO,MAAMiD,mCAAmC,GAAIC,EAAD,IAAe;AAChE,QAAMN,CAAC,GAAG,IAAIC,QAAQ,CAACC,EAAb,CAAgB,WAAhB,EAA6BK,cAA7B,CAA4CD,EAA5C,EAAgDF,SAAhD,GAA4DnC,MAA5D,CAAmE,KAAnE,EAA0E,KAA1E,CAAV;AACA,SAAO+B,CAAC,CAAC5C,KAAF,CAAQ,CAAR,CAAP;AACD,CAHM;;AAAMwC,8CAAmCS,mCAAnC;AAKb;;;;;;;;AAOA,MAAMG,kBAAkB,GAAG,CAACxE,OAAD,EAAmBC,IAAnB,EAAiCC,CAAjC,KAA8C;AACvE,QAAMI,CAAC,GAAGgC,0BAASC,eAAT,CAAyBtC,IAAzB,CAAV;AACA,QAAMuC,MAAM,GAAGlC,CAAC,CAACmC,WAAF,CAAcvC,CAAd,EAAiBwC,SAAjB,EAAf;AACA,SAAO,OAAOF,MAAM,CAACV,UAAP,GAAoBa,QAApB,CAA6B,KAA7B,EAAoCC,WAApC,EAAd;AACD,CAJD;AAMA;;;;;;;;;AAOA,MAAM6B,mBAAmB,GAAG,CAACzE,OAAD,EAAmBC,IAAnB,EAAiCC,CAAjC,KAA8C;AACxE,QAAMC,OAAO,GAAGH,OAAO,GAAGe,6BAAH,GAAuBA,wBAA9C;AACA,QAAMT,CAAC,GAAGC,mBAAWN,IAAX,EAAiBE,OAAjB,EAA0BK,UAA1B,CAAqCC,MAAM,CAACP,CAAD,CAA3C,CAAV;AACA,SAAOE,yBAASY,KAAT,CAAe;AAAEL,UAAM,EAAEL,CAAC,CAACM,SAAZ;AAAuBT;AAAvB,GAAf,EAAiDU,OAAxD;AACD,CAJD;AAMA;;;;;;;;;AAOA,MAAM6D,qBAAqB,GAAG,OAAO1E,OAAP,EAAyB2E,QAAzB,EAA2CzE,CAA3C,KAAwD;AACpF,QAAMC,OAAO,GAAGH,OAAO,GAAGI,yBAASJ,OAAZ,GAAsBI,yBAASC,OAAtD;AACA,SAAOE,iBAAS,MAAM+C,uBAAeqB,QAAf,CAAf,EAAyCxE,OAAzC,EACJK,UADI,CACOR,OAAO,GAAGe,mCAAH,GAA6BA,+BAD3C,EAEJQ,MAFI,CAEGrB,CAFH,EAGJ0E,KAHI,EAAP;AAID,CAND;AAQA;;;;;;;;AAMA,MAAMC,sBAAsB,GAAG,OAAOF,QAAP,EAAyBzE,CAAzB,KAAsC;;;AACnE,SAAO,6BAAS,MAAMoD,uBAAeqB,QAAf,CAAf,EACJnE,UADI,CACOO,gCADP,EAEJQ,MAFI,CAEGrB,CAFH,EAGJ4E,UAHI,MAGM,IAHN,IAGMC,aAHN,GAGM,MAHN,GAGMA,GAAEpC,QAAF,CAAW,KAAX,CAHN,MAGuB,IAHvB,IAGuBqC,aAHvB,GAGuBA,EAHvB,GAG2B,EAHlC;AAID,CALD;AAOA;;;;;;;;AAMA,MAAMC,sBAAsB,GAAG,OAAOjF,OAAP,EAAyBmD,IAAzB,EAAuCjD,CAAvC,KAAoD;AACjF,QAAMC,OAAO,GAAGH,OAAO,GAAGe,gCAAH,GAA0BA,gCAAjD;AACA,SAAOR,iBAAS,MAAM+C,uBAAeH,IAAf,CAAf,EAAqChD,OAArC,EACJK,UADI,CACOR,OAAO,GAAGe,mCAAH,GAA6BA,gCAD3C,EAEJQ,MAFI,CAEGrB,CAFH,EAGJ0E,KAHI,EAAP;AAID,CAND;AAQA;;;;;;AAIA,MAAMM,sBAAsB,GAAG,gBAAOP,QAAP,EAAyBzE,CAAzB,EAAyD;AAAA,MAArBiF,GAAqB,uEAAf,WAAe;AACtF,QAAM5B,GAAG,GAAGhD,iBAAS,MAAM+C,uBAAeqB,QAAf,CAAf,EACTnE,UADS,CACEO,gCADF,EAETQ,MAFS,CAEFrB,CAFE,EAGT4E,UAHH;AAIA,SAAO,IAAIb,QAAQ,CAACC,EAAb,CAAgBiB,GAAhB,EAAqBZ,cAArB,CAAoChB,GAApC,EAAyC6B,UAAzC,GAAsDzC,QAAtD,CAA+D,EAA/D,CAAP;AACD,CAND;AAQA;;;;;;;;;AAOA,MAAM0C,qBAAqB,GAAG,OAAOrF,OAAP,EAAyB2E,QAAzB,EAA2CzE,CAA3C,KAAwD;AACpF,QAAMC,OAAO,GAAGH,OAAO,GAAGe,4BAAH,GAAsBA,uBAA7C;AACA,SAAOR,iBAAS,MAAM+C,uBAAeqB,QAAf,CAAf,EAAyCxE,OAAzC,EACJK,UADI,CACOR,OAAO,GAAGe,mCAAH,GAA6BA,+BAD3C,EAEJQ,MAFI,CAEGrB,CAFH,EAGJ0E,KAHI,EAAP;AAID,CAND;AAQA;;;;;;;;;AAOA,MAAMU,sBAAsB,GAAG,OAAOtF,OAAP,EAAyB2E,QAAzB,EAA2CzE,CAA3C,KAAwD;AACrF,QAAMC,OAAO,GAAGH,OAAO,GAAGe,6BAAH,GAAuBA,wBAA9C;AACA,SAAOR,iBAAS,MAAM+C,uBAAeqB,QAAf,CAAf,EAAyCxE,OAAzC,EACJK,UADI,CACOR,OAAO,GAAGe,mCAAH,GAA6BA,gCAD3C,EAEJQ,MAFI,CAEGrB,CAFH,EAGJ0E,KAHI,EAAP;AAID,CAND;AAQA;;;;;;;;;AAOA,MAAMW,qBAAqB,GAAG,OAAOvF,OAAP,EAAyB2E,QAAzB,EAA2CzE,CAA3C,KAAwD;AACpF,QAAMC,OAAO,GAAGH,OAAO,GAAGI,yBAASJ,OAAZ,GAAsBI,yBAASC,OAAtD;AACA,SAAOE,iBAAS,MAAM+C,uBAAeqB,QAAf,CAAf,EAAyCxE,OAAzC,EACJK,UADI,CACOO,+BADP,EAEJQ,MAFI,CAEGrB,CAFH,EAGJ0E,KAHI,EAAP;AAID,CAND;;AAQO,MAAMY,eAAe,GAAI3E,OAAD,IAAoB;AACjD,QAAM;AAAEqB,UAAF;AAAUC,QAAV;AAAgBC;AAAhB,MAAkCJ,OAAO,CAACnB,OAAD,CAA/C;;AACA,MAAI4E,WAAW,GAAG5F,QAAQ,CAAC4F,WAAT,CAAqBC,IAAvC;;AACA,UAAQxD,MAAR;AACE,SAAK,aAAL;AACEuD,iBAAW,GAAG5F,QAAQ,CAAC4F,WAAT,CAAqBC,IAAnC;AACA;;AACF,SAAK,SAAL;AACED,iBAAW,GAAG5F,QAAQ,CAAC4F,WAAT,CAAqBE,IAAnC;AACA;AANJ;;AASA,MAAIC,OAAO,GAAWH,WAAW,CAACI,QAAZ,CAAqBC,MAA3C;;AACA,UAAQ3D,IAAR;AACE,SAAK,OAAL;AACEyD,aAAO,GAAGH,WAAW,CAACI,QAAZ,CAAqBC,MAA/B;AACA;;AACF,SAAK,MAAL;AACEF,aAAO,GAAGH,WAAW,CAACI,QAAZ,CAAqBE,UAA/B;AACA;AANJ;;AASA,QAAMC,OAAO,GAAW9E,MAAM,CAACC,IAAP,CAAYiB,IAAZ,CAAxB;AAEA,SAAOzC,KAAK,CAACkB,OAAN,CAAcoF,aAAd,CAA4BD,OAA5B,EAAqCJ,OAArC,CAAP;AACD,CAzBM;;AAAMhC,0BAAe4B,eAAf;;AA2Bb,MAAMxD,OAAO,GAAInB,OAAD,IAA6B;AAC3C,QAAM;AAAE+E,WAAF;AAAWxD;AAAX,MAA2BzC,KAAK,CAACkB,OAAN,CAAcqF,eAAd,CAA8BrF,OAA9B,CAAjC;AAEA,MAAIkB,OAAO,GAAY;AACrBG,UAAM,EAAE,EADa;AAErBC,QAAI,EAAE,EAFe;AAGrBC,QAHqB;AAIrB+D,UAAM,EAAE;AAJa,GAAvB;;AAMA,UAAQP,OAAR;AACE,SAAKxF,yBAASC,OAAT,CAAiB+F,UAAtB;AACErE,aAAO,GAAG;AACRG,cAAM,EAAE,aADA;AAERC,YAAI,EAAE,OAFE;AAGRC,YAHQ;AAIR+D,cAAM,EAAE;AAJA,OAAV;AAMA;;AACF,SAAK/F,yBAASC,OAAT,CAAiBgG,UAAtB;AACEtE,aAAO,GAAG;AACRG,cAAM,EAAE,aADA;AAERC,YAAI,EAAE,MAFE;AAGRC,YAHQ;AAIR+D,cAAM,EAAE;AAJA,OAAV;AAMA;;AACF,SAAK/F,yBAASJ,OAAT,CAAiBoG,UAAtB;AACErE,aAAO,GAAG;AACRG,cAAM,EAAE,SADA;AAERC,YAAI,EAAE,OAFE;AAGRC,YAHQ;AAIR+D,cAAM,EAAE;AAJA,OAAV;AAMA;;AACF,SAAK/F,yBAASJ,OAAT,CAAiBqG,UAAtB;AACEtE,aAAO,GAAG;AACRG,cAAM,EAAE,SADA;AAERC,YAAI,EAAE,MAFE;AAGRC,YAHQ;AAIR+D,cAAM,EAAE;AAJA,OAAV;AAMA;AAhCJ;;AAkCA,SAAOpE,OAAP;AACD,CA5CD;AA8CA;;;;;;;;;AAOA,MAAMuE,qBAAqB,GAAG,OAAOtG,OAAP,EAAyB2E,QAAzB,EAA2CzE,CAA3C,KAAyE;AACrG,QAAMkD,IAAI,GAAGpD,OAAO,GAAGe,mCAAH,GAA6BA,+BAAjD;AACA,QAAMwF,QAAQ,GAAGjE,0BAASkE,cAAT,CAAwB,MAAMlD,uBAAeqB,QAAf,CAA9B,CAAjB;AACA,QAAMnE,UAAU,GAAG+F,QAAQ,CAAC/F,UAAT,CAAoB4C,IAApB,EAA0BX,WAA1B,CAAsCvC,CAAtC,CAAnB;AACA,SAAOM,UAAU,CAACkC,SAAX,GAAuB+D,mBAAvB,EAAP;AACD,CALD;AAOA;;;;;;;;;AAOA,MAAMC,sBAAsB,GAAG,OAAO1G,OAAP,EAAyB2E,QAAzB,EAA2CzE,CAA3C,KAAyE;AACtG,QAAMkD,IAAI,GAAGpD,OAAO,GAAGe,mCAAH,GAA6BA,kCAAjD;AACA,QAAMwF,QAAQ,GAAGjE,0BAASkE,cAAT,CAAwB,MAAMlD,uBAAeqB,QAAf,CAA9B,CAAjB;AACA,QAAMnE,UAAU,GAAG+F,QAAQ,CAAC/F,UAAT,CAAoB4C,IAApB,EAA0BX,WAA1B,CAAsCvC,CAAtC,CAAnB;AACA,SAAOM,UAAU,CAACkC,SAAX,GAAuB+D,mBAAvB,EAAP;AACD,CALD;AAOA;;;;;;;;;AAOA,MAAME,qBAAqB,GAAG,OAAO3G,OAAP,EAAyB2E,QAAzB,EAA2CzE,CAA3C,KAAyE;AACrG,QAAMkD,IAAI,GAAGpD,OAAO,GAAGe,mCAAH,GAA6BA,+BAAjD;AACA,QAAMwF,QAAQ,GAAGjE,0BAASkE,cAAT,CAAwB,MAAMlD,uBAAeqB,QAAf,CAA9B,CAAjB;AACA,QAAMnE,UAAU,GAAG+F,QAAQ,CAAC/F,UAAT,CAAoB4C,IAApB,EAA0BX,WAA1B,CAAsCvC,CAAtC,CAAnB;AACA,SAAOM,UAAU,CAACkC,SAAX,GAAuB+D,mBAAvB,EAAP;AACD,CALD;AAOA;;;;;;;;;AAOA,MAAMG,sBAAsB,GAAG,OAAO5G,OAAP,EAAyB2E,QAAzB,EAA2CzE,CAA3C,KAAyE;AACtG,QAAMkD,IAAI,GAAG,CAACpD,OAAO,GAAGe,sCAA0B,IAA7B,GAAoCA,gCAA5C,IAAoE,IAAIb,CAAC,GAAtF;AACA,QAAMmD,IAAI,GAAG,MAAMC,uBAAeqB,QAAf,CAAnB;AACA,QAAM;AAAEpB;AAAF,MAAUC,4BAAWJ,IAAX,EAAiBC,IAAI,CAACV,QAAL,CAAc,KAAd,CAAjB,CAAhB;AACA,SAAOY,GAAG,CAACZ,QAAJ,CAAa,KAAb,CAAP;AACD,CALD;AAOA;;;;;;;;;AAOA,MAAMkE,yBAAyB,GAAG,OAAO7G,OAAP,EAAyB2E,QAAzB,EAA2CzE,CAA3C,KAAyE;AACzG,QAAMkD,IAAI,GAAGpD,OAAO,GAAGe,mCAAH,GAA6BA,iCAAjD;AACA,QAAMwF,QAAQ,GAAGjE,0BAASkE,cAAT,CAAwB,MAAMlD,uBAAeqB,QAAf,CAA9B,CAAjB;AACA,QAAMnE,UAAU,GAAG+F,QAAQ,CAAC/F,UAAT,CAAoB4C,IAApB,EAA0BX,WAA1B,CAAsCvC,CAAtC,CAAnB;AACA,SAAOM,UAAU,CAACkC,SAAX,GAAuB+D,mBAAvB,EAAP;AACD,CALD;AAOA;;;;;;;;;AAOA,MAAMK,qBAAqB,GAAG,OAAO9G,OAAP,EAAyB2E,QAAzB,EAA2CzE,CAA3C,KAAyE;AACrG,SAAOoG,qBAAqB,CAACtG,OAAD,EAAU2E,QAAV,EAAoBzE,CAApB,CAA5B;AACD,CAFD;AAIA;;;;;;;;;AAOA,MAAM6G,qBAAqB,GAAG,OAAO/G,OAAP,EAAyB2E,QAAzB,EAA2CzE,CAA3C,KAAyE;AACrG,QAAMkD,IAAI,GAAGpD,OAAO,GAAGe,mCAAH,GAA6BA,+BAAjD;AACA,QAAMwF,QAAQ,GAAGjE,0BAASkE,cAAT,CAAwB,MAAMlD,uBAAeqB,QAAf,CAA9B,CAAjB;AACA,QAAMnE,UAAU,GAAG+F,QAAQ,CAAC/F,UAAT,CAAoB4C,IAApB,EAA0BX,WAA1B,CAAsCvC,CAAtC,CAAnB;AACA,SAAOM,UAAU,CAACkC,SAAX,GAAuB+D,mBAAvB,EAAP;AACD,CALD;AAOA;;;;;;;;;AAOA,MAAMO,sBAAsB,GAAG,OAAOhH,OAAP,EAAyB2E,QAAzB,EAA2CzE,CAA3C,KAAyE;AACtG,QAAMkD,IAAI,GAAGpD,OAAO,GAAGe,mCAAH,GAA6BA,gCAAjD;AACA,QAAMwF,QAAQ,GAAGjE,0BAASkE,cAAT,CAAwB,MAAMlD,uBAAeqB,QAAf,CAA9B,CAAjB;AACA,QAAMnE,UAAU,GAAG+F,QAAQ,CAAC/F,UAAT,CAAoB4C,IAApB,EAA0BX,WAA1B,CAAsCvC,CAAtC,CAAnB;AACA,SAAOM,UAAU,CAACkC,SAAX,GAAuB+D,mBAAvB,EAAP;AACD,CALD;AAOA;;;;;;;;;AAOA,MAAMQ,qBAAqB,GAAG,OAAOjH,OAAP,EAAyB2E,QAAzB,EAA2CzE,CAA3C,KAAyE;AACrG,QAAMkD,IAAI,GAAGpD,OAAO,GAAGe,mCAAH,GAA6BA,+BAAjD;AACA,QAAMwF,QAAQ,GAAGjE,0BAASkE,cAAT,CAAwB,MAAMlD,uBAAeqB,QAAf,CAA9B,CAAjB;AACA,QAAMnE,UAAU,GAAG+F,QAAQ,CAAC/F,UAAT,CAAoB4C,IAApB,EAA0BX,WAA1B,CAAsCvC,CAAtC,CAAnB;AACA,SAAOM,UAAU,CAACkC,SAAX,GAAuB+D,mBAAvB,EAAP;AACD,CALD;AAOA;;;;;;;;AAMA,MAAMS,oBAAoB,GAAG,CAAClH,OAAD,EAAmBmH,OAAnB,KAAsC;AACjE,QAAMhH,OAAO,GAAGH,OAAO,GAAGI,yBAASJ,OAAZ,GAAsBI,yBAASC,OAAtD;AACA,QAAM+G,OAAO,GAAGhH,uBAAOiH,OAAP,CAAeF,OAAf,EAAwBhH,OAAxB,CAAhB;AACA,SAAOC,yBAASY,KAAT,CAAe;AAAEL,UAAM,EAAEyG,OAAO,CAACxG,SAAlB;AAA6BT;AAA7B,GAAf,EAAuDU,OAA9D;AACD,CAJD;AAMA;;;;;;;;;AAOA,MAAMyG,qBAAqB,GAAG,CAACtH,OAAD,EAAmBmH,OAAnB,KAAsC;AAClE,QAAMhH,OAAO,GAAGH,OAAO,GAAGe,gCAAH,GAA0BA,gCAAjD;AACA,QAAMqG,OAAO,GAAGhH,uBAAOiH,OAAP,CAAeF,OAAf,EAAwBhH,OAAxB,CAAhB;AACA,SAAOC,yBAASY,KAAT,CAAe;AAAEL,UAAM,EAAEyG,OAAO,CAACxG,SAAlB;AAA6BT;AAA7B,GAAf,EAAuDU,OAA9D;AACD,CAJD;AAMA;;;;;;;;AAMA,MAAM0G,qBAAqB,GAAG,CAACvH,OAAD,EAAmBmH,OAAnB,KAAsC;AAClE,QAAMhH,OAAO,GAAGH,OAAO,GAAGe,6BAAH,GAAuBA,wBAA9C;AACA,QAAMqG,OAAO,GAAGhH,uBAAOiH,OAAP,CAAeF,OAAf,EAAwBhH,OAAxB,CAAhB;AACA,SAAOC,yBAASY,KAAT,CAAe;AAAEL,UAAM,EAAEyG,OAAO,CAACxG,SAAlB;AAA6BT;AAA7B,GAAf,EAAuDU,OAA9D;AACD,CAJD;AAMA;;;;;;;;AAMA,MAAM2G,oBAAoB,GAAG,CAACxH,OAAD,EAAmBmH,OAAnB,KAAsC;AACjE,QAAM3E,MAAM,GAAGF,4BAAUmF,cAAV,CAAyBvG,MAAM,CAACC,IAAP,CAAYgG,OAAO,CAACO,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,CAAZ,EAAuC,KAAvC,CAAzB,CAAf;AACA,SAAOlF,MAAM,CAACmF,gBAAP,EAAP;AACD,CAHD;AAKA;;;;;;;;AAMA,MAAMC,oBAAoB,GAAG,CAAC5H,OAAD,EAAmB6H,OAAnB,KAAsC;AACjE,QAAMrF,MAAM,GAAGF,4BAAUmF,cAAV,CAAyBvG,MAAM,CAACC,IAAP,CAAY0G,OAAO,CAACH,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,CAAZ,EAAuC,KAAvC,CAAzB,CAAf;AACA,SAAOlF,MAAM,CAACmF,gBAAP,EAAP;AACD,CAHD;AAKA;;;;;;;;AAMA,MAAMG,qBAAqB,GAAG,CAAC9H,OAAD,EAAmB6H,OAAnB,KAAsC;AAClE,QAAMjH,SAAS,GAAG4C,8BAAatC,MAAM,CAACC,IAAP,CAAY0G,OAAZ,EAAqB,KAArB,CAAb,EAA0C,KAA1C,EAAiDlF,QAAjD,CAA0D,KAA1D,CAAlB;AACA,QAAMc,KAAK,GAAGC,MAAM,CAACC,OAAP,CAAezC,MAAM,CAACC,IAAP,CAAYP,SAAS,CAACQ,KAAV,CAAgB,CAAC,EAAjB,CAAZ,EAAkC,KAAlC,CAAf,CAAd;AACA,QAAMP,OAAO,GAAG6C,MAAM,CAACzB,MAAP,CAAc,KAAd,EAAqBwB,KAArB,CAAhB;AACA,SAAO5C,OAAP;AACD,CALD;AAOA;;;;;;;;AAMA,MAAMkH,oBAAoB,GAAG,CAAC/H,OAAD,EAAmB6H,OAAnB,KAAsC;AACjE,QAAMrF,MAAM,GAAGF,4BAAUmF,cAAV,CAAyBvG,MAAM,CAACC,IAAP,CAAY0G,OAAO,CAACH,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,CAAZ,EAAuC,KAAvC,CAAzB,CAAf;AACA,SAAOlF,MAAM,CAACmF,gBAAP,GAA0BD,OAA1B,CAAkC,IAAlC,EAAwC,KAAxC,CAAP;AACD,CAHD;AAKA;;;;;;;AAKO,MAAMM,mCAAmC,GAAIH,OAAD,IAAoB;AACrE,QAAMI,OAAO,GAAG,IAAIxI,MAAM,CAACyI,OAAX,CAAmB;AAAE/F,QAAI,EAAE;AAAR,GAAnB,CAAhB;AACA,QAAMgG,SAAS,GAAGF,OAAO,CAACG,KAAR,CAAcP,OAAd,EAAuBQ,GAAzC;AACA,QAAMC,EAAE,GAAG/I,OAAO,CAACgJ,mBAAR,CAA4BJ,SAA5B,CAAX;AACA,SAAO5I,OAAO,CAACiJ,mBAAR,CAA4BF,EAA5B,EAAgCG,IAAvC;AACD,CALM;;AAAM7E,8CAAmCoE,mCAAnC;AAQb;;;;;;;;;AAQO,MAAMU,uBAAuB,GAAG,CAACC,QAAD,EAAqB3I,OAArB,EAAuCC,IAAvC,EAAqDC,CAArD,KAAkE;AACvG,UAAQyI,QAAR;AACE,SAAKC,iBAASC,GAAd;AACE,aAAO9I,kBAAkB,CAACC,OAAD,EAAUC,IAAV,EAAgBC,CAAhB,CAAzB;;AACF,SAAK0I,iBAASE,IAAd;AACA,SAAKF,iBAASG,SAAd;AACA,SAAKH,iBAASI,SAAd;AACE,aAAO/H,mBAAmB,CAAChB,IAAD,EAAOC,CAAP,CAA1B;;AACF,SAAK0I,iBAASK,IAAd;AACA,SAAKL,iBAASM,IAAd;AACE,aAAOnF,qBAAqB,CAAC9D,IAAD,EAAOC,CAAP,CAA5B;;AACF,SAAK0I,iBAASO,GAAd;AACE,aAAO3H,kBAAkB,CAACxB,OAAD,EAAUC,IAAV,EAAgBC,CAAhB,CAAzB;;AACF,SAAK0I,iBAASQ,IAAd;AACE,aAAOtI,mBAAmB,CAACd,OAAD,EAAUC,IAAV,EAAgBC,CAAhB,CAA1B;;AACF,SAAK0I,iBAASS,IAAd;AACA,SAAKT,iBAASU,IAAd;AACA,SAAKV,iBAASW,IAAd;AACE,aAAO1F,mBAAmB,CAAC7D,OAAD,EAAUC,IAAV,EAAgBC,CAAhB,CAA1B;;AACF,SAAK0I,iBAASY,GAAd;AACE,aAAO/H,kBAAkB,CAACzB,OAAD,EAAUC,IAAV,EAAgBC,CAAhB,CAAzB;;AACF,SAAK0I,iBAASa,IAAd;AACE,aAAO3F,mBAAmB,CAAC9D,OAAD,EAAUC,IAAV,EAAgBC,CAAhB,CAA1B;;AACF,SAAK0I,iBAASc,IAAd;AACA,SAAKd,iBAASe,IAAd;AACA,SAAKf,iBAASgB,GAAd;AACA,SAAKhB,iBAASiB,IAAd;AACA,SAAKjB,iBAASkB,GAAd;AACA,SAAKlB,iBAASmB,IAAd;AACA,SAAKnB,iBAASoB,GAAd;AACA,SAAKpB,iBAASqB,IAAd;AACA,SAAKrB,iBAASsB,GAAd;AACA,SAAKtB,iBAASuB,IAAd;AACA,SAAKvB,iBAASwB,GAAd;AACA,SAAKxB,iBAASyB,IAAd;AACA,SAAKzB,iBAAS0B,SAAd;AACA,SAAK1B,iBAAS2B,IAAd;AACA,SAAK3B,iBAAS4B,IAAd;AACA,SAAK5B,iBAAS6B,IAAd;AACA,SAAK7B,iBAAS8B,IAAd;AACA,SAAK9B,iBAAS+B,GAAd;AACA,SAAK/B,iBAASgC,GAAd;AACA,SAAKhC,iBAASiC,KAAd;AACA,SAAKjC,iBAASkC,UAAd;AACA,SAAKlC,iBAASmC,UAAd;AACA,SAAKnC,iBAASoC,OAAd;AACA,SAAKpC,iBAASqC,KAAd;AACA,SAAKrC,iBAASsC,IAAd;AACA,SAAKtC,iBAASuC,KAAd;AACA,SAAKvC,iBAASwC,IAAd;AACA,SAAKxC,iBAASyC,IAAd;AACA,SAAKzC,iBAAS0C,QAAd;AACA,SAAK1C,iBAAS2C,SAAd;AACA,SAAK3C,iBAAS4C,OAAd;AACA,SAAK5C,iBAAS6C,IAAd;AACA,SAAK7C,iBAAS8C,GAAd;AACA,SAAK9C,iBAAS+C,QAAd;AACA,SAAK/C,iBAASgD,OAAd;AACA,SAAKhD,iBAASiD,GAAd;AACA,SAAKjD,iBAASkD,IAAd;AACA,SAAKlD,iBAASmD,IAAd;AACA,SAAKnD,iBAASoD,GAAd;AACA,SAAKpD,iBAASqD,IAAd;AACA,SAAKrD,iBAASsD,IAAd;AACA,SAAKtD,iBAASuD,IAAd;AACA,SAAKvD,iBAASwD,IAAd;AACA,SAAKxD,iBAASyD,IAAd;AACA,SAAKzD,iBAAS0D,GAAd;AACE,aAAOjK,kBAAkB,CAACrC,OAAD,EAAUC,IAAV,EAAgBC,CAAhB,CAAzB;;AACF,SAAK0I,iBAAS2D,GAAd;AACE,aAAOzJ,kBAAkB,CAAC9C,OAAD,EAAUC,IAAV,EAAgBC,CAAhB,CAAzB;;AACF,SAAK0I,iBAAS4D,GAAd;AACE,aAAO3J,kBAAkB,CAAC7C,OAAD,EAAUC,IAAV,EAAgBC,CAAhB,CAAzB;;AACF,SAAK0I,iBAAS6D,IAAd;AACE,aAAO7I,4BAAoB5D,OAApB,EAA6BC,IAA7B,EAAmCC,CAAnC,CAAP;;AACF,SAAK0I,iBAAS8D,GAAd;AACE,aAAOlI,kBAAkB,CAACxE,OAAD,EAAUC,IAAV,EAAgBC,CAAhB,CAAzB;;AACF,SAAK0I,iBAAS+D,GAAd;AACE,aAAOC,yBAAQC,eAAR,CAAwB7M,OAAxB,EAAiCC,IAAjC,EAAuCC,CAAvC,CAAP;;AACF;AACE,YAAM,IAAI4M,KAAJ,CAAU,yBAAV,CAAN;AA/EJ;AAiFD,CAlFM;;AAAMlJ,kCAAuB8E,uBAAvB;AAoFb;;;;;;;;;AAQO,MAAMqE,8BAA8B,GAAG,CAACpE,QAAD,EAAqB3I,OAArB,EAAuC2E,QAAvC,EAAyDzE,CAAzD,KAAsE;AAClH,UAAQyI,QAAR;AACE,SAAKC,iBAASC,GAAd;AACE,aAAOnE,qBAAqB,CAAC1E,OAAD,EAAU2E,QAAV,EAAoBzE,CAApB,CAA5B;;AACF,SAAK0I,iBAASO,GAAd;AACE,aAAO9D,qBAAqB,CAACrF,OAAD,EAAU2E,QAAV,EAAoBzE,CAApB,CAA5B;;AACF,SAAK0I,iBAASQ,IAAd;AACE,aAAO9D,sBAAsB,CAACtF,OAAD,EAAU2E,QAAV,EAAoBzE,CAApB,CAA7B;;AACF,SAAK0I,iBAASY,GAAd;AACE,aAAOjE,qBAAqB,CAACvF,OAAD,EAAU2E,QAAV,EAAoBzE,CAApB,CAA5B;;AACF,SAAK0I,iBAASE,IAAd;AACA,SAAKF,iBAASG,SAAd;AACA,SAAKH,iBAASI,SAAd;AACE,aAAOnE,sBAAsB,CAACF,QAAD,EAAWzE,CAAX,CAA7B;;AACF,SAAK0I,iBAASa,IAAd;AACE,aAAOxE,sBAAsB,CAACjF,OAAD,EAAU2E,QAAV,EAAoBzE,CAApB,CAA7B;;AACF,SAAK0I,iBAASiC,KAAd;AACA,SAAKjC,iBAASkC,UAAd;AACA,SAAKlC,iBAASmC,UAAd;AACE,aAAOlE,yBAAyB,CAAC7G,OAAD,EAAU2E,QAAV,EAAoBzE,CAApB,CAAhC;;AACF,SAAK0I,iBAASK,IAAd;AACA,SAAKL,iBAASM,IAAd;AACE,aAAOhE,sBAAsB,CAACP,QAAD,EAAWzE,CAAX,CAA7B;;AACF,SAAK0I,iBAASS,IAAd;AACA,SAAKT,iBAASU,IAAd;AACA,SAAKV,iBAASW,IAAd;AACE,aAAOvC,sBAAsB,CAAChH,OAAD,EAAU2E,QAAV,EAAoBzE,CAApB,CAA7B;;AACF,SAAK0I,iBAASc,IAAd;AACA,SAAKd,iBAASe,IAAd;AACA,SAAKf,iBAASgB,GAAd;AACA,SAAKhB,iBAASiB,IAAd;AACA,SAAKjB,iBAASkB,GAAd;AACA,SAAKlB,iBAASmB,IAAd;AACA,SAAKnB,iBAASoB,GAAd;AACA,SAAKpB,iBAASoC,OAAd;AACA,SAAKpC,iBAASqC,KAAd;AACA,SAAKrC,iBAASqB,IAAd;AACA,SAAKrB,iBAASoD,GAAd;AACA,SAAKpD,iBAASsB,GAAd;AACA,SAAKtB,iBAASuB,IAAd;AACA,SAAKvB,iBAASwB,GAAd;AACA,SAAKxB,iBAASyB,IAAd;AACA,SAAKzB,iBAAS2B,IAAd;AACA,SAAK3B,iBAAS4B,IAAd;AACA,SAAK5B,iBAAS6B,IAAd;AACA,SAAK7B,iBAAS8B,IAAd;AACA,SAAK9B,iBAAS+B,GAAd;AACA,SAAK/B,iBAAS0B,SAAd;AACA,SAAK1B,iBAASgC,GAAd;AACA,SAAKhC,iBAASsC,IAAd;AACA,SAAKtC,iBAASuC,KAAd;AACA,SAAKvC,iBAASkD,IAAd;AACA,SAAKlD,iBAASmD,IAAd;AACA,SAAKnD,iBAASqD,IAAd;AACA,SAAKrD,iBAASwC,IAAd;AACA,SAAKxC,iBAAS0C,QAAd;AACA,SAAK1C,iBAAS2C,SAAd;AACA,SAAK3C,iBAAS4C,OAAd;AACA,SAAK5C,iBAAS6C,IAAd;AACA,SAAK7C,iBAAS8C,GAAd;AACA,SAAK9C,iBAAS+C,QAAd;AACA,SAAK/C,iBAASiD,GAAd;AACA,SAAKjD,iBAASgD,OAAd;AACA,SAAKhD,iBAASsD,IAAd;AACA,SAAKtD,iBAASuD,IAAd;AACA,SAAKvD,iBAASwD,IAAd;AACA,SAAKxD,iBAASyD,IAAd;AACA,SAAKzD,iBAAS0D,GAAd;AACE,aAAOhG,qBAAqB,CAACtG,OAAD,EAAU2E,QAAV,EAAoBzE,CAApB,CAA5B;;AACF,SAAK0I,iBAAS2D,GAAd;AACE,aAAO5F,qBAAqB,CAAC3G,OAAD,EAAU2E,QAAV,EAAoBzE,CAApB,CAA5B;;AACF,SAAK0I,iBAASyC,IAAd;AACE,aAAO3E,sBAAsB,CAAC1G,OAAD,EAAU2E,QAAV,EAAoBzE,CAApB,CAA7B;;AACF,SAAK0I,iBAAS4D,GAAd;AACE,aAAOzF,qBAAqB,CAAC/G,OAAD,EAAU2E,QAAV,EAAoBzE,CAApB,CAA5B;;AACF,SAAK0I,iBAAS6D,IAAd;AACE,aAAO7F,sBAAsB,CAAC5G,OAAD,EAAU2E,QAAV,EAAoBzE,CAApB,CAA7B;;AACF,SAAK0I,iBAAS8D,GAAd;AACE,aAAOzF,qBAAqB,CAACjH,OAAD,EAAU2E,QAAV,EAAoBzE,CAApB,CAA5B;;AACF,SAAK0I,iBAAS+D,GAAd;AACE,aAAOC,yBAAQI,kBAAR,CAA2BrI,QAA3B,EAAqCzE,CAArC,CAAP;;AACF;AACE,YAAM,IAAI4M,KAAJ,CAAU,yBAAV,CAAN;AAjFJ;AAmFD,CApFM;;AAAMlJ,yCAA8BmJ,8BAA9B;AAsFb;;;;;;;;AAOO,MAAME,6BAA6B,GAAG,CAACtE,QAAD,EAAqB3I,OAArB,EAAuC8E,UAAvC,KAA6D;AACxG,UAAQ6D,QAAR;AACE,SAAKC,iBAASC,GAAd;AACE,aAAO3B,oBAAoB,CAAClH,OAAD,EAAU8E,UAAV,CAA3B;;AACF,SAAK8D,iBAASa,IAAd;AACE,aAAOnC,qBAAqB,CAACtH,OAAD,EAAU8E,UAAV,CAA5B;;AACF,SAAK8D,iBAASsE,GAAd;AACE,aAAOC,kCAAyBrI,UAAzB,EAAqC9E,OAAO,GAAG,MAAH,GAAY,KAAxD,CAAP;;AACF,SAAK4I,iBAASE,IAAd;AACA,SAAKF,iBAASG,SAAd;AACA,SAAKH,iBAASI,SAAd;AACE,aAAOlJ,OAAO,CAACe,OAAR,CAAgB4G,cAAhB,CAA+B3C,UAA/B,CAAP;;AACF,SAAK8D,iBAAS+B,GAAd;AACA,SAAK/B,iBAASc,IAAd;AACA,SAAKd,iBAASiD,GAAd;AACA,SAAKjD,iBAASgD,OAAd;AACA,SAAKhD,iBAASoD,GAAd;AACA,SAAKpD,iBAASe,IAAd;AACA,SAAKf,iBAASgB,GAAd;AACA,SAAKhB,iBAASiB,IAAd;AACA,SAAKjB,iBAASkB,GAAd;AACA,SAAKlB,iBAASmB,IAAd;AACA,SAAKnB,iBAASoB,GAAd;AACA,SAAKpB,iBAASqB,IAAd;AACA,SAAKrB,iBAASsB,GAAd;AACA,SAAKtB,iBAASuB,IAAd;AACA,SAAKvB,iBAASwB,GAAd;AACA,SAAKxB,iBAASyB,IAAd;AACA,SAAKzB,iBAAS2B,IAAd;AACA,SAAK3B,iBAAS4B,IAAd;AACA,SAAK5B,iBAASoC,OAAd;AACA,SAAKpC,iBAASqC,KAAd;AACA,SAAKrC,iBAAS6B,IAAd;AACA,SAAK7B,iBAAS8B,IAAd;AACA,SAAK9B,iBAAS0B,SAAd;AACA,SAAK1B,iBAASgC,GAAd;AACA,SAAKhC,iBAAS0D,GAAd;AACA,SAAK1D,iBAASiC,KAAd;AACA,SAAKjC,iBAASyC,IAAd;AACE,aAAO7D,oBAAoB,CAACxH,OAAD,EAAU8E,UAAV,CAA3B;;AACF,SAAK8D,iBAAS2D,GAAd;AACE,aAAO3E,oBAAoB,CAAC5H,OAAD,EAAU8E,UAAV,CAA3B;;AACF,SAAK8D,iBAAS4D,GAAd;AACE,aAAOzE,oBAAoB,CAAC/H,OAAD,EAAU8E,UAAV,CAA3B;;AACF,SAAK8D,iBAAS6D,IAAd;AACE,aAAO3E,qBAAqB,CAAC9H,OAAD,EAAU8E,UAAV,CAA5B;;AACF;AACE,YAAM,IAAIgI,KAAJ,CAAU,yBAAV,CAAN;AA9CJ;AAgDD,CAjDM;;AAAMlJ,wCAA6BqJ,6BAA7B","names":["algosdk","require","base32","sha512_256","bcash","cashaddr","coininfo","TronWeb","generateBtcAddress","testnet","xpub","i","network","bitcoinjs_lib_1","bitcoin","w","bip32_1","derivePath","String","p2wpkh","pubkey","publicKey","address","generateDogeAddress","constants_1","p2pkh","generateTronAddress","Buffer","from","slice","fromHex","tron_crypto_1","derive","generateLtcAddress","generateBchAddress","hdNode","HDNode","fromBase58","legacy","getAddress","decoded","_decode","encode","prefix","type","hash","generateEthAddress","ethereumjs_wallet_1","fromExtendedKey","wallet","deriveChild","getWallet","toString","toLowerCase","generateXdcAddress","generateOneAddress","harmonyAddress","crypto_2","basicHex","generateEgldAddress","mnem","path","seed","bip39_1","key","ed25519_hd_key_1","words","bech32","toWords","exports","generateCeloAddress","generateQtumAddress","generateFlowPublicKey","s","elliptic","ec","keyFromPublic","getPublic","generateFlowPublicKeyFromPrivateKey","pk","keyFromPrivate","generateVetAddress","generateLyraAddress","generateBtcPrivateKey","mnemonic","toWIF","generateTronPrivateKey","privateKey","_a","_b","generateQtumPrivateKey","generateFlowPrivateKey","alg","getPrivate","generateLtcPrivateKey","generateDogePrivateKey","generateBchPrivateKey","toLegacyAddress","bitcoincash","main","test","version","versions","public","scripthash","hashBuf","toBase58Check","fromBase58Check","format","pubKeyHash","scriptHash","generateEthPrivateKey","hdwallet","fromMasterSeed","getPrivateKeyString","generateKlayPrivateKey","generateOnePrivateKey","generateEgldPrivateKey","generatePolygonPrivateKey","generateBscPrivateKey","generateXdcPrivateKey","generateCeloPrivateKey","generateVetPrivateKey","convertBtcPrivateKey","privkey","keyPair","fromWIF","convertQTUMPrivateKey","convertLyraPrivateKey","convertEthPrivateKey","fromPrivateKey","replace","getAddressString","convertOnePrivateKey","privKey","convertEgldPrivateKey","convertXdcPrivateKey","generateAlgodAddressFromPrivatetKey","decoder","Decoder","secretKey","write","buf","mn","secretKeyToMnemonic","mnemonicToSecretKey","addr","generateAddressFromXPub","currency","model_1","BTC","TRON","USDT_TRON","INRT_TRON","FLOW","FUSD","LTC","DOGE","CELO","CEUR","CUSD","BCH","QTUM","USDT","WBTC","LEO","LINK","UNI","FREE","MKR","USDC","BAT","TUSD","PAX","PAXG","MATIC_ETH","PLTC","XCON","REVV","SAND","ETH","BSC","MATIC","USDT_MATIC","USDC_MATIC","LATOKEN","COIIN","BETH","GAMEE","BUSD","KLAY","USDC_BSC","COIIN_BSC","B2U_BSC","CAKE","HAG","BUSD_BSC","GMC_BSC","GMC","BBTC","BADA","RMD","WBNB","BDOT","BXRP","BLTC","BBCH","MMY","ONE","XDC","EGLD","VET","ADA","cardano_crypto_1","generateAddress","Error","generatePrivateKeyFromMnemonic","generatePrivateKey","generateAddressFromPrivatekey","BNB","crypto_1"],"sourceRoot":"","sources":["../../../src/wallet/address.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}