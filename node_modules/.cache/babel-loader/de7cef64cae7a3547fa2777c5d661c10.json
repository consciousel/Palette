{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WalletConnectProvider = void 0;\n\nconst client_1 = __importDefault(require(\"@walletconnect/client\"));\n\nconst address_1 = require(\"../address\");\n\nconst signature_1 = require(\"../signature\");\n\nconst constants_1 = require(\"./constants\");\n\nconst logger_1 = require(\"../logger\");\n\nconst errors_1 = require(\"../errors\");\n\nclass WalletConnectProvider {\n  constructor(httpProvider) {\n    let walletConnectBridge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    let onClientConnect = arguments.length > 2 ? arguments[2] : undefined;\n    this.address = \"\";\n    this.signature = \"\";\n    this.provider = httpProvider;\n    this.walletConnectBridge = walletConnectBridge;\n    this.onClientConnect = onClientConnect;\n  }\n  /**\n   * Initiates wallet connect client.\n   */\n\n\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.walletConnector = new client_1.default({\n        bridge: this.walletConnectBridge\n      });\n      this.walletConnector.on(\"connect\", this.onConnect.bind(this));\n      this.walletConnector.on(\"session_update\", this.onDisconnect.bind(this));\n      this.walletConnector.on(\"disconnect\", this.onDisconnect.bind(this));\n\n      if (this.walletConnector.connected && this.walletConnector.accounts.length) {\n        const [account] = this.walletConnector.accounts;\n        const [address, signature] = account.split(\".\");\n        yield this.loginAccount(address, signature);\n      }\n\n      return true;\n    });\n  }\n  /**\n   * Returns true if init() was previously called successfully\n   */\n\n\n  isInitialized() {\n    return !!this.walletConnector;\n  }\n  /**\n   * Mocked function, returns isInitialized as an async function\n   */\n\n\n  isConnected() {\n    return new Promise((resolve, _) => resolve(this.isInitialized()));\n  }\n  /**\n   *\n   */\n\n\n  login() {\n    var _a, _b, _c, _d;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.walletConnector) {\n        yield this.init();\n      }\n\n      if ((_a = this.walletConnector) === null || _a === void 0 ? void 0 : _a.connected) {\n        yield this.walletConnector.killSession();\n        logger_1.Logger.trace(\"WalletConnect login started but walletConnect not initialized\");\n        return \"\";\n      }\n\n      yield (_b = this.walletConnector) === null || _b === void 0 ? void 0 : _b.createSession({\n        chainId: constants_1.WALLETCONNECT_ELROND_CHAIN_ID\n      });\n\n      if (!((_c = this.walletConnector) === null || _c === void 0 ? void 0 : _c.uri)) {\n        return \"\";\n      }\n\n      return (_d = this.walletConnector) === null || _d === void 0 ? void 0 : _d.uri;\n    });\n  }\n  /**\n   * Mocks a logout request by returning true\n   */\n\n\n  logout() {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.walletConnector) {\n        logger_1.Logger.error(\"logout: Wallet Connect not initialised, call init() first\");\n        throw new Error(\"Wallet Connect not initialised, call init() first\");\n      }\n\n      if ((_a = this.walletConnector) === null || _a === void 0 ? void 0 : _a.connected) {\n        yield (_b = this.walletConnector) === null || _b === void 0 ? void 0 : _b.killSession();\n      }\n\n      return true;\n    });\n  }\n  /**\n   * Fetches the wallet connect address\n   */\n\n\n  getAddress() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.walletConnector) {\n        logger_1.Logger.error(\"getAddress: Wallet Connect not initialised, call init() first\");\n        throw new Error(\"Wallet Connect not initialised, call init() first\");\n      }\n\n      return this.address;\n    });\n  }\n  /**\n   * Fetches the wallet connect signature\n   */\n\n\n  getSignature() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.walletConnector) {\n        logger_1.Logger.error(\"getSignature: Wallet Connect not initialised, call init() first\");\n        throw new Error(\"Wallet Connect not initialised, call init() first\");\n      }\n\n      return this.signature;\n    });\n  }\n  /**\n   * Signs and sends a transaction. Returns the transaction hash\n   * @param transaction\n   */\n\n\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.walletConnector) {\n        logger_1.Logger.error(\"sendTransaction: Wallet Connect not initialised, call init() first\");\n        throw new Error(\"Wallet Connect not initialised, call init() first\");\n      }\n\n      transaction = yield this.signTransaction(transaction);\n      yield transaction.send(this.provider);\n      return transaction;\n    });\n  }\n  /**\n   * Method will be available once the Maiar wallet connect hook is implemented\n   * @param _\n   */\n\n\n  signMessage(_) {\n    return __awaiter(this, void 0, void 0, function* () {\n      throw new errors_1.ErrNotImplemented();\n    });\n  }\n  /**\n   * Signs a transaction and returns it\n   * @param transaction\n   */\n\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.walletConnector) {\n        logger_1.Logger.error(\"signTransaction: Wallet Connect not initialised, call init() first\");\n        throw new Error(\"Wallet Connect not initialised, call init() first\");\n      }\n\n      const address = yield this.getAddress();\n      const sig = yield this.walletConnector.sendCustomRequest({\n        method: \"erd_sign\",\n        params: this.prepareWalletConnectMessage(transaction, address)\n      });\n\n      if (!sig || !sig.signature) {\n        logger_1.Logger.error(\"signTransaction: Wallet Connect could not sign the transaction\");\n        throw new Error(\"Wallet Connect could not sign the transaction\");\n      }\n\n      transaction.applySignature(new signature_1.Signature(sig.signature), new address_1.Address(address));\n      return transaction;\n    });\n  }\n  /**\n   * Signs an array of transactions and returns it\n   * @param transactions\n   */\n\n\n  signTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.walletConnector) {\n        logger_1.Logger.error(\"signTransactions: Wallet Connect not initialised, call init() first\");\n        throw new Error(\"Wallet Connect not initialised, call init() first\");\n      }\n\n      const address = yield this.getAddress();\n      const params = transactions.map(transaction => this.prepareWalletConnectMessage(transaction, address));\n      const signatures = yield this.walletConnector.sendCustomRequest({\n        method: \"erd_batch_sign\",\n        params\n      });\n\n      if (!signatures) {\n        logger_1.Logger.error(\"signTransactions: Wallet Connect could not sign the transactions\");\n        throw new Error(\"Wallet Connect could not sign the transactions\");\n      }\n\n      if (Array.isArray(signatures)) {\n        if (transactions.length !== signatures.length) {\n          logger_1.Logger.error(\"signTransactions: Wallet Connect could not sign the transactions. Invalid signatures.\");\n          throw new Error(\"Wallet Connect could not sign the transactions. Invalid signatures.\");\n        }\n\n        transactions.map((transaction, key) => transaction.applySignature(new signature_1.Signature(signatures[key].signature), new address_1.Address(address)));\n        return transactions;\n      }\n\n      transactions[0].applySignature(new signature_1.Signature(signatures.signature), new address_1.Address(address));\n      return transactions;\n    });\n  }\n  /**\n   * Sends a custom method and params and returns the response object\n   */\n\n\n  sendCustomMessage(_ref) {\n    let {\n      method,\n      params\n    } = _ref;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.walletConnector) {\n        logger_1.Logger.error(\"sendCustomMessage: Wallet Connect not initialised, call init() first\");\n        throw new Error(\"Wallet Connect not initialised, call init() first\");\n      }\n\n      const customMessageResponse = yield this.walletConnector.sendCustomRequest({\n        method,\n        params\n      });\n\n      if (!customMessageResponse) {\n        logger_1.Logger.error(\"sendCustomMessage: Wallet Connect could not send the message\");\n        throw new Error(\"Wallet Connect could not send the message\");\n      }\n\n      return customMessageResponse;\n    });\n  }\n\n  onConnect(error, _ref2) {\n    let {\n      params\n    } = _ref2;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (error) {\n        throw error;\n      }\n\n      if (!params || !params[0]) {\n        logger_1.Logger.error(\"Wallet Connect missing payload\");\n        throw new Error(\"missing payload\");\n      }\n\n      const {\n        accounts: [account]\n      } = params[0];\n      const [address, signature] = account.split(\".\");\n      yield this.loginAccount(address, signature);\n    });\n  }\n\n  onDisconnect(error) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (error) {\n        throw error;\n      }\n\n      this.onClientConnect.onClientLogout();\n    });\n  }\n\n  loginAccount(address, signature) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.addressIsValid(address)) {\n        this.address = address;\n\n        if (signature) {\n          this.signature = signature;\n        }\n\n        this.onClientConnect.onClientLogin();\n        return;\n      }\n\n      logger_1.Logger.error(`Wallet Connect invalid address ${address}`);\n\n      if ((_a = this.walletConnector) === null || _a === void 0 ? void 0 : _a.connected) {\n        yield (_b = this.walletConnector) === null || _b === void 0 ? void 0 : _b.killSession();\n      }\n    });\n  }\n\n  prepareWalletConnectMessage(transaction, address) {\n    return {\n      nonce: transaction.getNonce().valueOf(),\n      from: address,\n      to: transaction.getReceiver().toString(),\n      amount: transaction.getValue().toString(),\n      gasPrice: transaction.getGasPrice().valueOf().toString(),\n      gasLimit: transaction.getGasLimit().valueOf().toString(),\n      data: Buffer.from(transaction.getData().toString().trim()).toString(),\n      chainId: transaction.getChainID().valueOf(),\n      version: transaction.getVersion().valueOf()\n    };\n  }\n\n  addressIsValid(destinationAddress) {\n    try {\n      const addr = new address_1.Address(destinationAddress);\n      return !!addr;\n    } catch (_a) {\n      return false;\n    }\n  }\n\n}\n\nexports.WalletConnectProvider = WalletConnectProvider;","map":{"version":3,"mappings":"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","names":["WalletConnectProvider","constructor","httpProvider","walletConnectBridge","onClientConnect","provider","init","walletConnector","client_1","bridge","on","onConnect","bind","onDisconnect","connected","accounts","length","account","address","signature","split","loginAccount","isInitialized","isConnected","Promise","resolve","_","login","_a","killSession","logger_1","trace","_b","createSession","chainId","constants_1","_c","uri","_d","logout","error","Error","getAddress","getSignature","sendTransaction","transaction","signTransaction","send","signMessage","errors_1","sig","sendCustomRequest","method","params","prepareWalletConnectMessage","applySignature","signature_1","address_1","signTransactions","transactions","map","signatures","Array","isArray","key","sendCustomMessage","customMessageResponse","onClientLogout","addressIsValid","onClientLogin","nonce","getNonce","valueOf","from","to","getReceiver","toString","amount","getValue","gasPrice","getGasPrice","gasLimit","getGasLimit","data","Buffer","getData","trim","getChainID","version","getVersion","destinationAddress","addr","exports"],"sourceRoot":"","sources":["../../src/dapp/walletConnectProvider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}