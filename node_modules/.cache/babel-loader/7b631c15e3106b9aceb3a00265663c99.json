{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = __importStar(require(\"lodash\"));\n\nconst ripple_binary_codec_1 = __importDefault(require(\"ripple-binary-codec\"));\n\nconst hashes_1 = require(\"../common/hashes\");\n\nconst utils = __importStar(require(\"./utils\"));\n\nconst transaction_1 = __importDefault(require(\"./parse/transaction\"));\n\nconst transaction_2 = __importDefault(require(\"./transaction\"));\n\nconst common_1 = require(\"../common\");\n\nfunction parseBinaryTransaction(transaction) {\n  const tx = ripple_binary_codec_1.default.decode(transaction.tx_blob);\n  tx.hash = hashes_1.computeTransactionHash(tx);\n  tx.ledger_index = transaction.ledger_index;\n  return {\n    tx: tx,\n    meta: ripple_binary_codec_1.default.decode(transaction.meta),\n    validated: transaction.validated\n  };\n}\n\nfunction parseAccountTxTransaction(tx, includeRawTransaction) {\n  const _tx = tx.tx_blob ? parseBinaryTransaction(tx) : tx;\n\n  return transaction_1.default(Object.assign({}, _tx.tx, {\n    meta: _tx.meta,\n    validated: _tx.validated\n  }), includeRawTransaction);\n}\n\nfunction counterpartyFilter(filters, tx) {\n  if (tx.address === filters.counterparty) {\n    return true;\n  }\n\n  const specification = tx.specification;\n\n  if (specification && (specification.destination && specification.destination.address === filters.counterparty || specification.counterparty === filters.counterparty)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction transactionFilter(address, filters, tx) {\n  if (filters.excludeFailures && tx.outcome.result !== 'tesSUCCESS') {\n    return false;\n  }\n\n  if (filters.types && !filters.types.includes(tx.type)) {\n    return false;\n  }\n\n  if (filters.initiated === true && tx.address !== address) {\n    return false;\n  }\n\n  if (filters.initiated === false && tx.address === address) {\n    return false;\n  }\n\n  if (filters.counterparty && !counterpartyFilter(filters, tx)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction orderFilter(options, tx) {\n  return !options.startTx || (options.earliestFirst ? utils.compareTransactions(tx, options.startTx) > 0 : utils.compareTransactions(tx, options.startTx) < 0);\n}\n\nfunction formatPartialResponse(address, options, data) {\n  const parse = tx => parseAccountTxTransaction(tx, options.includeRawTransactions);\n\n  return {\n    marker: data.marker,\n    results: data.transactions.filter(tx => tx.validated).map(parse).filter(_.partial(transactionFilter, address, options)).filter(_.partial(orderFilter, options))\n  };\n}\n\nfunction getAccountTx(connection, address, options, marker, limit) {\n  const request = {\n    command: 'account_tx',\n    account: address,\n    ledger_index_min: options.minLedgerVersion || -1,\n    ledger_index_max: options.maxLedgerVersion || -1,\n    forward: options.earliestFirst,\n    binary: options.binary,\n    limit: utils.clamp(limit, 10, 400),\n    marker: marker\n  };\n  return connection.request(request).then(response => formatPartialResponse(address, options, response));\n}\n\nfunction checkForLedgerGaps(connection, options, transactions) {\n  let {\n    minLedgerVersion,\n    maxLedgerVersion\n  } = options;\n\n  if (options.limit && transactions.length === options.limit) {\n    if (options.earliestFirst) {\n      maxLedgerVersion = transactions[transactions.length - 1].outcome.ledgerVersion;\n    } else {\n      minLedgerVersion = transactions[transactions.length - 1].outcome.ledgerVersion;\n    }\n  }\n\n  return utils.hasCompleteLedgerRange(connection, minLedgerVersion, maxLedgerVersion).then(hasCompleteLedgerRange => {\n    if (!hasCompleteLedgerRange) {\n      throw new common_1.errors.MissingLedgerHistoryError();\n    }\n  });\n}\n\nfunction formatResponse(connection, options, transactions) {\n  const sortedTransactions = options.earliestFirst ? transactions.sort(utils.compareTransactions) : transactions.sort(utils.compareTransactions).reverse();\n  return checkForLedgerGaps(connection, options, sortedTransactions).then(() => sortedTransactions);\n}\n\nfunction getTransactionsInternal(connection, address, options) {\n  const getter = _.partial(getAccountTx, connection, address, options);\n\n  const format = _.partial(formatResponse, connection, options);\n\n  return utils.getRecursive(getter, options.limit).then(format);\n}\n\nfunction getTransactions(address) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  common_1.validate.getTransactions({\n    address,\n    options\n  });\n  address = common_1.ensureClassicAddress(address);\n  const defaults = {\n    maxLedgerVersion: -1\n  };\n\n  if (options.start) {\n    return transaction_2.default.call(this, options.start).then(tx => {\n      const ledgerVersion = tx.outcome.ledgerVersion;\n      const bound = options.earliestFirst ? {\n        minLedgerVersion: ledgerVersion\n      } : {\n        maxLedgerVersion: ledgerVersion\n      };\n      const startOptions = Object.assign({}, defaults, options, {\n        startTx: tx\n      }, bound);\n      return getTransactionsInternal(this.connection, address, startOptions);\n    });\n  }\n\n  const newOptions = Object.assign({}, defaults, options);\n  return getTransactionsInternal(this.connection, address, newOptions);\n}\n\nexports.default = getTransactions;","map":{"version":3,"mappings":"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","names":["parseBinaryTransaction","transaction","tx","ripple_binary_codec_1","decode","tx_blob","hash","hashes_1","ledger_index","meta","validated","parseAccountTxTransaction","includeRawTransaction","_tx","transaction_1","Object","assign","counterpartyFilter","filters","address","counterparty","specification","destination","transactionFilter","excludeFailures","outcome","result","types","includes","type","initiated","orderFilter","options","startTx","earliestFirst","utils","compareTransactions","formatPartialResponse","data","parse","includeRawTransactions","marker","results","transactions","filter","map","_","partial","getAccountTx","connection","limit","request","command","account","ledger_index_min","minLedgerVersion","ledger_index_max","maxLedgerVersion","forward","binary","clamp","then","response","checkForLedgerGaps","length","ledgerVersion","hasCompleteLedgerRange","common_1","MissingLedgerHistoryError","formatResponse","sortedTransactions","sort","reverse","getTransactionsInternal","getter","format","getRecursive","getTransactions","defaults","start","transaction_2","call","bound","startOptions","newOptions","exports"],"sourceRoot":"","sources":["../../../src/ledger/transactions.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}