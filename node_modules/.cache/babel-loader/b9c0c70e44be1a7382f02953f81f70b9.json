{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StructBinaryCodec = void 0;\n\nconst typesystem_1 = require(\"../typesystem\");\n\nclass StructBinaryCodec {\n  constructor(binaryCodec) {\n    this.binaryCodec = binaryCodec;\n  }\n\n  decodeTopLevel(buffer, type) {\n    let [decoded, length] = this.decodeNested(buffer, type);\n    return decoded;\n  }\n\n  decodeNested(buffer, type) {\n    let originalBuffer = buffer;\n    let offset = 0;\n    let fieldDefinitions = type.fields;\n    let fields = [];\n\n    for (const fieldDefinition of fieldDefinitions) {\n      let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer, fieldDefinition.type);\n      let field = new typesystem_1.StructField(decoded, fieldDefinition.name);\n      fields.push(field);\n      offset += decodedLength;\n      buffer = originalBuffer.slice(offset);\n    }\n\n    let struct = new typesystem_1.Struct(type, fields);\n    return [struct, offset];\n  }\n\n  encodeNested(struct) {\n    let buffers = [];\n    let fields = struct.getFields();\n\n    for (const field of fields) {\n      let fieldBuffer = this.binaryCodec.encodeNested(field.value);\n      buffers.push(fieldBuffer);\n    }\n\n    let buffer = Buffer.concat(buffers);\n    return buffer;\n  }\n\n  encodeTopLevel(struct) {\n    return this.encodeNested(struct);\n  }\n\n}\n\nexports.StructBinaryCodec = StructBinaryCodec;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAGA,MAAaA,iBAAb,CAA8B;AAG1BC,cAAYC,WAAZ,EAAoC;AAChC,SAAKA,WAAL,GAAmBA,WAAnB;AACH;;AAEDC,gBAAc,CAACC,MAAD,EAAiBC,IAAjB,EAAiC;AAC3C,QAAI,CAACC,OAAD,EAAUC,MAAV,IAAoB,KAAKC,YAAL,CAAkBJ,MAAlB,EAA0BC,IAA1B,CAAxB;AACA,WAAOC,OAAP;AACH;;AAEDE,cAAY,CAACJ,MAAD,EAAiBC,IAAjB,EAAiC;AACzC,QAAII,cAAc,GAAGL,MAArB;AACA,QAAIM,MAAM,GAAG,CAAb;AAEA,QAAIC,gBAAgB,GAAGN,IAAI,CAACO,MAA5B;AACA,QAAIA,MAAM,GAAkB,EAA5B;;AAEA,SAAK,MAAMC,eAAX,IAA8BF,gBAA9B,EAAgD;AAC5C,UAAI,CAACL,OAAD,EAAUQ,aAAV,IAA2B,KAAKZ,WAAL,CAAiBM,YAAjB,CAA8BJ,MAA9B,EAAsCS,eAAe,CAACR,IAAtD,CAA/B;AACA,UAAIU,KAAK,GAAG,IAAIC,wBAAJ,CAAgBV,OAAhB,EAAyBO,eAAe,CAACI,IAAzC,CAAZ;AACAL,YAAM,CAACM,IAAP,CAAYH,KAAZ;AACAL,YAAM,IAAII,aAAV;AACAV,YAAM,GAAGK,cAAc,CAACU,KAAf,CAAqBT,MAArB,CAAT;AACH;;AAED,QAAIU,MAAM,GAAG,IAAIJ,mBAAJ,CAAWX,IAAX,EAAiBO,MAAjB,CAAb;AACA,WAAO,CAACQ,MAAD,EAASV,MAAT,CAAP;AACH;;AAEDW,cAAY,CAACD,MAAD,EAAe;AACvB,QAAIE,OAAO,GAAa,EAAxB;AACA,QAAIV,MAAM,GAAGQ,MAAM,CAACG,SAAP,EAAb;;AAEA,SAAK,MAAMR,KAAX,IAAoBH,MAApB,EAA4B;AACxB,UAAIY,WAAW,GAAG,KAAKtB,WAAL,CAAiBmB,YAAjB,CAA8BN,KAAK,CAACU,KAApC,CAAlB;AACAH,aAAO,CAACJ,IAAR,CAAaM,WAAb;AACH;;AAED,QAAIpB,MAAM,GAAGsB,MAAM,CAACC,MAAP,CAAcL,OAAd,CAAb;AACA,WAAOlB,MAAP;AACH;;AAEDwB,gBAAc,CAACR,MAAD,EAAe;AACzB,WAAO,KAAKC,YAAL,CAAkBD,MAAlB,CAAP;AACH;;AA9CyB;;AAA9BS","names":["StructBinaryCodec","constructor","binaryCodec","decodeTopLevel","buffer","type","decoded","length","decodeNested","originalBuffer","offset","fieldDefinitions","fields","fieldDefinition","decodedLength","field","typesystem_1","name","push","slice","struct","encodeNested","buffers","getFields","fieldBuffer","value","Buffer","concat","encodeTopLevel","exports"],"sourceRoot":"","sources":["../../../src/smartcontracts/codec/struct.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}