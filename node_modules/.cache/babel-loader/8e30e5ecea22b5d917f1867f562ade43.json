{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendBitcoinTransaction = exports.prepareBitcoinSignedTransaction = exports.signBitcoinKMSTransaction = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\")); // @ts-ignore\n\n\nconst bitcore_lib_1 = require(\"bitcore-lib\");\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst model_1 = require(\"../model\");\n/**\n * Prepare a signed Btc transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\n\nconst prepareSignedTransaction = async body => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.TransferBtcBasedBlockchain);\n  const {\n    fromUTXO,\n    fromAddress,\n    to\n  } = body;\n  const tx = new bitcore_lib_1.Transaction();\n  const privateKeysToSign = [];\n\n  if (fromAddress) {\n    for (const item of fromAddress) {\n      const txs = await blockchain_1.btcGetTxForAccount(item.address);\n\n      for (const t of txs) {\n        for (const [i, o] of t.outputs.entries()) {\n          if (o.address !== item.address) {\n            continue;\n          }\n\n          try {\n            await blockchain_1.btcGetUTXO(t.hash, i);\n            tx.from({\n              txId: t.hash,\n              outputIndex: i,\n              script: bitcore_lib_1.Script.fromAddress(item.address).toString(),\n              satoshis: o.value\n            });\n            privateKeysToSign.push(item.signatureId || item.privateKey);\n          } catch (e) {\n            console.error(e.toString());\n          }\n        }\n      }\n    }\n  } else if (fromUTXO) {\n    for (const item of fromUTXO) {\n      const t = await blockchain_1.btcGetTransaction(item.txHash);\n      const address = t.outputs ? t.outputs[item.index].address : (_a = t.vout) === null || _a === void 0 ? void 0 : _a[item.index].scriptPubKey.addresses[0];\n      const value = t.outputs ? t.outputs[item.index].value : Number(new bignumber_js_1.default(((_b = t.vout) === null || _b === void 0 ? void 0 : _b[item.index].value) || 0).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR));\n      tx.from({\n        txId: item.txHash,\n        outputIndex: item.index,\n        script: bitcore_lib_1.Script.fromAddress(address).toString(),\n        satoshis: value\n      });\n      privateKeysToSign.push(item.signatureId || item.privateKey);\n    }\n  }\n\n  for (const item of to) {\n    tx.to(item.address, Number(new bignumber_js_1.default(item.value).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR)));\n  }\n\n  if (fromAddress && fromAddress[0].signatureId || fromUTXO && fromUTXO[0].signatureId) {\n    return JSON.stringify({\n      txData: JSON.stringify(tx),\n      privateKeysToSign\n    });\n  }\n\n  for (const item of privateKeysToSign) {\n    tx.sign(bitcore_lib_1.PrivateKey.fromWIF(item));\n  }\n\n  return tx.serialize(true);\n};\n/**\n * Sign Bitcoin pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param privateKeys private keys to sign transaction with.\n * @param testnet mainnet or testnet version\n * @returns transaction data to be broadcast to blockchain.\n */\n\n\nconst signBitcoinKMSTransaction = async (tx, privateKeys) => {\n  if (tx.chain !== model_1.Currency.BTC) {\n    throw Error('Unsupported chain.');\n  }\n\n  const builder = new bitcore_lib_1.Transaction(JSON.parse(tx.serializedTransaction));\n\n  for (const privateKey of privateKeys) {\n    builder.sign(bitcore_lib_1.PrivateKey.fromWIF(privateKey));\n  }\n\n  return builder.serialize(true);\n};\n\nexports.signBitcoinKMSTransaction = signBitcoinKMSTransaction;\n/**\n * Sign Bitcoin transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBitcoinSignedTransaction = async (testnet, body) => {\n  return prepareSignedTransaction(body);\n};\n\nexports.prepareBitcoinSignedTransaction = prepareBitcoinSignedTransaction;\n/**\n * Send Bitcoin transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendBitcoinTransaction = async (testnet, body) => {\n  return blockchain_1.btcBroadcast(await exports.prepareBitcoinSignedTransaction(testnet, body));\n};\n\nexports.sendBitcoinTransaction = sendBitcoinTransaction;","map":{"version":3,"mappings":"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","names":["prepareSignedTransaction","body","tatum_1","model_1","fromUTXO","fromAddress","to","tx","bitcore_lib_1","privateKeysToSign","item","txs","blockchain_1","address","t","i","o","outputs","entries","hash","from","txId","outputIndex","script","toString","satoshis","value","push","signatureId","privateKey","e","console","error","txHash","index","vout","_a","scriptPubKey","addresses","Number","bignumber_js_1","_b","multipliedBy","toFixed","ROUND_FLOOR","JSON","stringify","txData","sign","fromWIF","serialize","signBitcoinKMSTransaction","privateKeys","chain","BTC","Error","builder","parse","serializedTransaction","exports","prepareBitcoinSignedTransaction","testnet","sendBitcoinTransaction"],"sourceRoot":"","sources":["../../../src/transaction/bitcoin.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}