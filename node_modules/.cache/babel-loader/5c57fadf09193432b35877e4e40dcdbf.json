{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiquidityPoolId = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _clone = require('lodash/clone');\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * LiquidityPoolId class represents the asset referenced by a trustline to a\n * liquidity pool.\n *\n * @constructor\n * @param {string} liquidityPoolId - The ID of the liquidity pool in string 'hex'.\n */\n\n\nvar LiquidityPoolId = exports.LiquidityPoolId = function () {\n  function LiquidityPoolId(liquidityPoolId) {\n    _classCallCheck(this, LiquidityPoolId);\n\n    if (!liquidityPoolId) {\n      throw new Error('liquidityPoolId cannot be empty');\n    }\n\n    if (!/^[a-f0-9]{64}$/.test(liquidityPoolId)) {\n      throw new Error('Liquidity pool ID is not a valid hash');\n    }\n\n    this.liquidityPoolId = liquidityPoolId;\n  }\n  /**\n   * Returns a liquidity pool ID object from its xdr.TrustLineAsset representation.\n   * @param {xdr.TrustLineAsset} tlAssetXdr - The asset XDR object.\n   * @returns {LiquidityPoolId}\n   */\n\n\n  _createClass(LiquidityPoolId, [{\n    key: 'toXDRObject',\n\n    /**\n     * Returns the `xdr.TrustLineAsset` object for this liquidity pool ID.\n     *\n     * Note: To convert from {@link Asset `Asset`} to `xdr.TrustLineAsset` please\n     * refer to the\n     * {@link Asset.toTrustLineXDRObject `Asset.toTrustLineXDRObject`} method.\n     *\n     * @returns {xdr.TrustLineAsset} XDR LiquidityPoolId object\n     */\n    value: function toXDRObject() {\n      var xdrPoolId = _stellarXdr_generated2.default.PoolId.fromXDR(this.liquidityPoolId, 'hex');\n\n      return new _stellarXdr_generated2.default.TrustLineAsset('assetTypePoolShare', xdrPoolId);\n    }\n    /**\n     * @returns {string} Liquidity pool ID.\n     */\n\n  }, {\n    key: 'getLiquidityPoolId',\n    value: function getLiquidityPoolId() {\n      return (0, _clone2.default)(this.liquidityPoolId);\n    }\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {AssetType.liquidityPoolShares} asset type. Can only be `liquidity_pool_shares`.\n     */\n\n  }, {\n    key: 'getAssetType',\n    value: function getAssetType() {\n      return 'liquidity_pool_shares';\n    }\n    /**\n     * @param {LiquidityPoolId} asset LiquidityPoolId to compare.\n     * @returns {boolean} `true` if this asset equals the given asset.\n     */\n\n  }, {\n    key: 'equals',\n    value: function equals(asset) {\n      return this.liquidityPoolId === asset.getLiquidityPoolId();\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return 'liquidity_pool:' + this.liquidityPoolId;\n    }\n  }], [{\n    key: 'fromOperation',\n    value: function fromOperation(tlAssetXdr) {\n      var assetType = tlAssetXdr.switch();\n\n      if (assetType === _stellarXdr_generated2.default.AssetType.assetTypePoolShare()) {\n        var liquidityPoolId = tlAssetXdr.liquidityPoolId().toString('hex');\n        return new this(liquidityPoolId);\n      }\n\n      throw new Error('Invalid asset type: ' + assetType.name);\n    }\n  }]);\n\n  return LiquidityPoolId;\n}();","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/NFT_minter/node_modules/stellar-base/lib/liquidity_pool_id.js"],"names":["Object","defineProperty","exports","value","LiquidityPoolId","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_clone","require","_clone2","_interopRequireDefault","_stellarXdr_generated","_stellarXdr_generated2","obj","__esModule","default","_classCallCheck","instance","TypeError","liquidityPoolId","Error","test","toXDRObject","xdrPoolId","PoolId","fromXDR","TrustLineAsset","getLiquidityPoolId","getAssetType","equals","asset","toString","fromOperation","tlAssetXdr","assetType","switch","AssetType","assetTypePoolShare","name"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,eAAR,GAA0BC,SAA1B;;AAEA,IAAIC,YAAY,GAAG,YAAY;AAAE,WAASC,gBAAT,CAA0BC,MAA1B,EAAkCC,KAAlC,EAAyC;AAAE,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAAE,UAAIE,UAAU,GAAGH,KAAK,CAACC,CAAD,CAAtB;AAA2BE,MAAAA,UAAU,CAACC,UAAX,GAAwBD,UAAU,CAACC,UAAX,IAAyB,KAAjD;AAAwDD,MAAAA,UAAU,CAACE,YAAX,GAA0B,IAA1B;AAAgC,UAAI,WAAWF,UAAf,EAA2BA,UAAU,CAACG,QAAX,GAAsB,IAAtB;AAA4Bf,MAAAA,MAAM,CAACC,cAAP,CAAsBO,MAAtB,EAA8BI,UAAU,CAACI,GAAzC,EAA8CJ,UAA9C;AAA4D;AAAE;;AAAC,SAAO,UAAUK,WAAV,EAAuBC,UAAvB,EAAmCC,WAAnC,EAAgD;AAAE,QAAID,UAAJ,EAAgBX,gBAAgB,CAACU,WAAW,CAACG,SAAb,EAAwBF,UAAxB,CAAhB;AAAqD,QAAIC,WAAJ,EAAiBZ,gBAAgB,CAACU,WAAD,EAAcE,WAAd,CAAhB;AAA4C,WAAOF,WAAP;AAAqB,GAAhN;AAAmN,CAA9hB,EAAnB;;AAEA,IAAII,MAAM,GAAGC,OAAO,CAAC,cAAD,CAApB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACH,MAAD,CAApC;;AAEA,IAAII,qBAAqB,GAAGH,OAAO,CAAC,mCAAD,CAAnC;;AAEA,IAAII,sBAAsB,GAAGF,sBAAsB,CAACC,qBAAD,CAAnD;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,SAASG,eAAT,CAAyBC,QAAzB,EAAmCd,WAAnC,EAAgD;AAAE,MAAI,EAAEc,QAAQ,YAAYd,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIe,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;AAEzJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAI5B,eAAe,GAAGF,OAAO,CAACE,eAAR,GAA0B,YAAY;AAC1D,WAASA,eAAT,CAAyB6B,eAAzB,EAA0C;AACxCH,IAAAA,eAAe,CAAC,IAAD,EAAO1B,eAAP,CAAf;;AAEA,QAAI,CAAC6B,eAAL,EAAsB;AACpB,YAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;AACD;;AACD,QAAI,CAAC,iBAAiBC,IAAjB,CAAsBF,eAAtB,CAAL,EAA6C;AAC3C,YAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,SAAKD,eAAL,GAAuBA,eAAvB;AACD;AAED;AACF;AACA;AACA;AACA;;;AAGE3B,EAAAA,YAAY,CAACF,eAAD,EAAkB,CAAC;AAC7BY,IAAAA,GAAG,EAAE,aADwB;;AAI7B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIb,IAAAA,KAAK,EAAE,SAASiC,WAAT,GAAuB;AAC5B,UAAIC,SAAS,GAAGX,sBAAsB,CAACG,OAAvB,CAA+BS,MAA/B,CAAsCC,OAAtC,CAA8C,KAAKN,eAAnD,EAAoE,KAApE,CAAhB;;AACA,aAAO,IAAIP,sBAAsB,CAACG,OAAvB,CAA+BW,cAAnC,CAAkD,oBAAlD,EAAwEH,SAAxE,CAAP;AACD;AAED;AACJ;AACA;;AApBiC,GAAD,EAsB3B;AACDrB,IAAAA,GAAG,EAAE,oBADJ;AAEDb,IAAAA,KAAK,EAAE,SAASsC,kBAAT,GAA8B;AACnC,aAAO,CAAC,GAAGlB,OAAO,CAACM,OAAZ,EAAqB,KAAKI,eAA1B,CAAP;AACD;AAED;AACJ;AACA;AACA;;AATK,GAtB2B,EAiC3B;AACDjB,IAAAA,GAAG,EAAE,cADJ;AAEDb,IAAAA,KAAK,EAAE,SAASuC,YAAT,GAAwB;AAC7B,aAAO,uBAAP;AACD;AAED;AACJ;AACA;AACA;;AATK,GAjC2B,EA4C3B;AACD1B,IAAAA,GAAG,EAAE,QADJ;AAEDb,IAAAA,KAAK,EAAE,SAASwC,MAAT,CAAgBC,KAAhB,EAAuB;AAC5B,aAAO,KAAKX,eAAL,KAAyBW,KAAK,CAACH,kBAAN,EAAhC;AACD;AAJA,GA5C2B,EAiD3B;AACDzB,IAAAA,GAAG,EAAE,UADJ;AAEDb,IAAAA,KAAK,EAAE,SAAS0C,QAAT,GAAoB;AACzB,aAAO,oBAAoB,KAAKZ,eAAhC;AACD;AAJA,GAjD2B,CAAlB,EAsDR,CAAC;AACHjB,IAAAA,GAAG,EAAE,eADF;AAEHb,IAAAA,KAAK,EAAE,SAAS2C,aAAT,CAAuBC,UAAvB,EAAmC;AACxC,UAAIC,SAAS,GAAGD,UAAU,CAACE,MAAX,EAAhB;;AACA,UAAID,SAAS,KAAKtB,sBAAsB,CAACG,OAAvB,CAA+BqB,SAA/B,CAAyCC,kBAAzC,EAAlB,EAAiF;AAC/E,YAAIlB,eAAe,GAAGc,UAAU,CAACd,eAAX,GAA6BY,QAA7B,CAAsC,KAAtC,CAAtB;AACA,eAAO,IAAI,IAAJ,CAASZ,eAAT,CAAP;AACD;;AAED,YAAM,IAAIC,KAAJ,CAAU,yBAAyBc,SAAS,CAACI,IAA7C,CAAN;AACD;AAVE,GAAD,CAtDQ,CAAZ;;AAmEA,SAAOhD,eAAP;AACD,CAzF+C,EAAhD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiquidityPoolId = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _clone = require('lodash/clone');\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * LiquidityPoolId class represents the asset referenced by a trustline to a\n * liquidity pool.\n *\n * @constructor\n * @param {string} liquidityPoolId - The ID of the liquidity pool in string 'hex'.\n */\nvar LiquidityPoolId = exports.LiquidityPoolId = function () {\n  function LiquidityPoolId(liquidityPoolId) {\n    _classCallCheck(this, LiquidityPoolId);\n\n    if (!liquidityPoolId) {\n      throw new Error('liquidityPoolId cannot be empty');\n    }\n    if (!/^[a-f0-9]{64}$/.test(liquidityPoolId)) {\n      throw new Error('Liquidity pool ID is not a valid hash');\n    }\n\n    this.liquidityPoolId = liquidityPoolId;\n  }\n\n  /**\n   * Returns a liquidity pool ID object from its xdr.TrustLineAsset representation.\n   * @param {xdr.TrustLineAsset} tlAssetXdr - The asset XDR object.\n   * @returns {LiquidityPoolId}\n   */\n\n\n  _createClass(LiquidityPoolId, [{\n    key: 'toXDRObject',\n\n\n    /**\n     * Returns the `xdr.TrustLineAsset` object for this liquidity pool ID.\n     *\n     * Note: To convert from {@link Asset `Asset`} to `xdr.TrustLineAsset` please\n     * refer to the\n     * {@link Asset.toTrustLineXDRObject `Asset.toTrustLineXDRObject`} method.\n     *\n     * @returns {xdr.TrustLineAsset} XDR LiquidityPoolId object\n     */\n    value: function toXDRObject() {\n      var xdrPoolId = _stellarXdr_generated2.default.PoolId.fromXDR(this.liquidityPoolId, 'hex');\n      return new _stellarXdr_generated2.default.TrustLineAsset('assetTypePoolShare', xdrPoolId);\n    }\n\n    /**\n     * @returns {string} Liquidity pool ID.\n     */\n\n  }, {\n    key: 'getLiquidityPoolId',\n    value: function getLiquidityPoolId() {\n      return (0, _clone2.default)(this.liquidityPoolId);\n    }\n\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {AssetType.liquidityPoolShares} asset type. Can only be `liquidity_pool_shares`.\n     */\n\n  }, {\n    key: 'getAssetType',\n    value: function getAssetType() {\n      return 'liquidity_pool_shares';\n    }\n\n    /**\n     * @param {LiquidityPoolId} asset LiquidityPoolId to compare.\n     * @returns {boolean} `true` if this asset equals the given asset.\n     */\n\n  }, {\n    key: 'equals',\n    value: function equals(asset) {\n      return this.liquidityPoolId === asset.getLiquidityPoolId();\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return 'liquidity_pool:' + this.liquidityPoolId;\n    }\n  }], [{\n    key: 'fromOperation',\n    value: function fromOperation(tlAssetXdr) {\n      var assetType = tlAssetXdr.switch();\n      if (assetType === _stellarXdr_generated2.default.AssetType.assetTypePoolShare()) {\n        var liquidityPoolId = tlAssetXdr.liquidityPoolId().toString('hex');\n        return new this(liquidityPoolId);\n      }\n\n      throw new Error('Invalid asset type: ' + assetType.name);\n    }\n  }]);\n\n  return LiquidityPoolId;\n}();"]},"metadata":{},"sourceType":"script"}