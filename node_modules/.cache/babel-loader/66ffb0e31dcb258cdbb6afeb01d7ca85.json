{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clawback = clawback;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _decode_encode_muxed_account = require('../util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Creates a clawback operation.\n *\n * @function\n * @alias Operation.clawback\n *\n * @param {object} opts - Options object\n * @param {Asset}  opts.asset - The asset being clawed back.\n * @param {string} opts.amount - The amount of the asset to claw back.\n * @param {string} opts.from - The public key of the (muxed) account to claw back from.\n *\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @return {xdr.ClawbackOp}\n *\n * @link https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#clawback-operation\n */\n\n\nfunction clawback() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var attributes = {};\n\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n\n  attributes.amount = this._toXDRAmount(opts.amount);\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.from = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.from);\n  var opAttributes = {\n    body: _stellarXdr_generated2.default.OperationBody.clawback(new _stellarXdr_generated2.default.ClawbackOp(attributes))\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/NFT_minter/node_modules/stellar-base/lib/operations/clawback.js"],"names":["Object","defineProperty","exports","value","clawback","_stellarXdr_generated","require","_stellarXdr_generated2","_interopRequireDefault","_decode_encode_muxed_account","obj","__esModule","default","opts","arguments","length","undefined","attributes","isValidAmount","amount","TypeError","constructAmountRequirementsError","_toXDRAmount","asset","toXDRObject","from","decodeAddressToMuxedAccount","opAttributes","body","OperationBody","ClawbackOp","setSourceAccount","Operation"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,QAAR,GAAmBA,QAAnB;;AAEA,IAAIC,qBAAqB,GAAGC,OAAO,CAAC,oCAAD,CAAnC;;AAEA,IAAIC,sBAAsB,GAAGC,sBAAsB,CAACH,qBAAD,CAAnD;;AAEA,IAAII,4BAA4B,GAAGH,OAAO,CAAC,qCAAD,CAA1C;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASN,QAAT,GAAoB;AAClB,MAAIS,IAAI,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;AAEA,MAAIG,UAAU,GAAG,EAAjB;;AAEA,MAAI,CAAC,KAAKC,aAAL,CAAmBL,IAAI,CAACM,MAAxB,CAAL,EAAsC;AACpC,UAAM,IAAIC,SAAJ,CAAc,KAAKC,gCAAL,CAAsC,QAAtC,CAAd,CAAN;AACD;;AACDJ,EAAAA,UAAU,CAACE,MAAX,GAAoB,KAAKG,YAAL,CAAkBT,IAAI,CAACM,MAAvB,CAApB;AACAF,EAAAA,UAAU,CAACM,KAAX,GAAmBV,IAAI,CAACU,KAAL,CAAWC,WAAX,EAAnB;AACAP,EAAAA,UAAU,CAACQ,IAAX,GAAkB,CAAC,GAAGhB,4BAA4B,CAACiB,2BAAjC,EAA8Db,IAAI,CAACY,IAAnE,CAAlB;AAEA,MAAIE,YAAY,GAAG;AACjBC,IAAAA,IAAI,EAAErB,sBAAsB,CAACK,OAAvB,CAA+BiB,aAA/B,CAA6CzB,QAA7C,CAAsD,IAAIG,sBAAsB,CAACK,OAAvB,CAA+BkB,UAAnC,CAA8Cb,UAA9C,CAAtD;AADW,GAAnB;AAGA,OAAKc,gBAAL,CAAsBJ,YAAtB,EAAoCd,IAApC;AAEA,SAAO,IAAIN,sBAAsB,CAACK,OAAvB,CAA+BoB,SAAnC,CAA6CL,YAA7C,CAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clawback = clawback;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _decode_encode_muxed_account = require('../util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Creates a clawback operation.\n *\n * @function\n * @alias Operation.clawback\n *\n * @param {object} opts - Options object\n * @param {Asset}  opts.asset - The asset being clawed back.\n * @param {string} opts.amount - The amount of the asset to claw back.\n * @param {string} opts.from - The public key of the (muxed) account to claw back from.\n *\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @return {xdr.ClawbackOp}\n *\n * @link https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#clawback-operation\n */\nfunction clawback() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var attributes = {};\n\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  attributes.amount = this._toXDRAmount(opts.amount);\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.from = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.from);\n\n  var opAttributes = {\n    body: _stellarXdr_generated2.default.OperationBody.clawback(new _stellarXdr_generated2.default.ClawbackOp(attributes))\n  };\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}"]},"metadata":{},"sourceType":"script"}