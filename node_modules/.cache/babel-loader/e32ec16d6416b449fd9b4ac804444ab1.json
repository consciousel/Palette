{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-crypto\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validatePrivateKey = exports.isValidChecksumAddress = exports.recoverAddress = exports.recoverPublicKey = exports.verifySignature = exports.getContractAddress = exports.sign = exports.toChecksumAddress = exports.getAddressFromPublicKey = exports.getPublic = exports.getAddressFromPrivateKey = exports.getPubkeyFromPrivateKey = exports.generatePrivateKey = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar elliptic_1 = tslib_1.__importDefault(require(\"elliptic\"));\n\nvar bytes = tslib_1.__importStar(require(\"./bytes\"));\n\nvar errors = tslib_1.__importStar(require(\"./errors\"));\n\nvar keccak256_1 = require(\"./keccak256\");\n\nvar random_1 = require(\"./random\");\n\nvar utils_1 = require(\"@harmony-js/utils\");\n\nvar bech32_1 = require(\"./bech32\");\n\nvar rlp_1 = require(\"./rlp\");\n\nvar secp256k1 = elliptic_1.default.ec('secp256k1');\n/**\n * @function generatePrivateKey\n * @description generatePrivate key using `eth-lib` settings\n * @return {string}\n */\n\nexports.generatePrivateKey = function () {\n  var entropy = '0x' + random_1.randomBytes(16);\n  var innerHex = keccak256_1.keccak256(bytes.concat(['0x' + random_1.randomBytes(32), entropy || '0x' + random_1.randomBytes(32)]));\n  var middleHex = bytes.concat([bytes.concat(['0x' + random_1.randomBytes(32), innerHex]), '0x' + random_1.randomBytes(32)]);\n  var outerHex = keccak256_1.keccak256(middleHex);\n  return outerHex;\n};\n/**\n * @function getPubkeyFromPrivateKey\n * @param  {string} privateKey - private key String\n * @return {string}\n */\n\n\nexports.getPubkeyFromPrivateKey = function (privateKey) {\n  return '0x' + exports.getPublic(privateKey, true);\n};\n/**\n * @function getAddressFromPrivateKey\n * @param  {string} privateKey - private key string\n * @return {string} address with `length = 40`\n */\n\n\nexports.getAddressFromPrivateKey = function (privateKey) {\n  var publicHash = '0x' + exports.getPublic(privateKey).slice(2);\n  var publicKey = keccak256_1.keccak256(publicHash);\n  var address = '0x' + publicKey.slice(-40);\n  return address;\n};\n\nexports.getPublic = function (privateKey, compress) {\n  if (!utils_1.isPrivateKey(privateKey) || !exports.validatePrivateKey(privateKey)) {\n    throw new Error(privateKey + \" is not PrivateKey\");\n  }\n\n  var ecKey = secp256k1.keyFromPrivate(utils_1.strip0x(privateKey), 'hex');\n  return ecKey.getPublic(compress || false, 'hex');\n};\n/**\n * @function getAddressFromPublicKey\n * @param  {string} publicKey - public key string\n * @return {string} address with `length = 40`\n */\n\n\nexports.getAddressFromPublicKey = function (publicKey) {\n  var ecKey = secp256k1.keyFromPublic(publicKey.slice(2), 'hex');\n  var publicHash = ecKey.getPublic(false, 'hex');\n  var address = '0x' + keccak256_1.keccak256('0x' + publicHash.slice(2)).slice(-40);\n  return address;\n};\n/**\n * @function toChecksumAddress\n * @param  {string} address - raw address\n * @return {string} checksumed address\n */\n\n\nexports.toChecksumAddress = function (address) {\n  if (typeof address === 'string' && utils_1.isBech32Address(address)) {\n    address = bech32_1.fromBech32(address);\n  }\n\n  if (typeof address !== 'string' || !address.match(/^0x[0-9A-Fa-f]{40}$/)) {\n    errors.throwError('invalid address', errors.INVALID_ARGUMENT, {\n      arg: 'address',\n      value: address\n    });\n  }\n\n  address = address.toLowerCase();\n  var chars = address.substring(2).split('');\n  var hashed = new Uint8Array(40);\n\n  for (var i = 0; i < 40; i++) {\n    hashed[i] = chars[i].charCodeAt(0);\n  }\n\n  hashed = bytes.arrayify(keccak256_1.keccak256(hashed)) || hashed;\n\n  for (var i = 0; i < 40; i += 2) {\n    if (hashed[i >> 1] >> 4 >= 8) {\n      chars[i] = chars[i].toUpperCase();\n    }\n\n    if ((hashed[i >> 1] & 0x0f) >= 8) {\n      chars[i + 1] = chars[i + 1].toUpperCase();\n    }\n  }\n\n  return '0x' + chars.join('');\n};\n\nexports.sign = function (digest, privateKey) {\n  if (!utils_1.isPrivateKey(privateKey)) {\n    throw new Error(privateKey + \" is not PrivateKey\");\n  }\n\n  var keyPair = secp256k1.keyFromPrivate(utils_1.strip0x(privateKey), 'hex');\n  var signature = keyPair.sign(bytes.arrayify(digest), {\n    canonical: true\n  });\n  var publicKey = '0x' + keyPair.getPublic(true, 'hex');\n  var result = {\n    recoveryParam: signature.recoveryParam,\n    r: bytes.hexZeroPad('0x' + signature.r.toString(16), 32),\n    s: bytes.hexZeroPad('0x' + signature.s.toString(16), 32),\n    v: 27 + signature.recoveryParam\n  };\n\n  if (verifySignature(digest, result, publicKey)) {\n    return result;\n  } else {\n    throw new Error('signing process failed');\n  }\n};\n\nfunction getContractAddress(from, nonce) {\n  if (!from) {\n    throw new Error('missing from address');\n  }\n\n  var addr = keccak256_1.keccak256(rlp_1.encode([from, bytes.stripZeros(bytes.hexlify(nonce))]));\n  return '0x' + addr.substring(26);\n}\n\nexports.getContractAddress = getContractAddress;\n\nfunction verifySignature(digest, signature, publicKey) {\n  return recoverPublicKey(digest, signature) === publicKey;\n}\n\nexports.verifySignature = verifySignature;\n\nfunction recoverPublicKey(digest, signature) {\n  var sig = bytes.splitSignature(signature);\n  var rs = {\n    r: bytes.arrayify(sig.r),\n    s: bytes.arrayify(sig.s)\n  }; ////\n\n  var recovered = secp256k1.recoverPubKey(bytes.arrayify(digest), rs, sig.recoveryParam);\n  var key = recovered.encode('hex', false);\n  var ecKey = secp256k1.keyFromPublic(key, 'hex');\n  var publicKey = '0x' + ecKey.getPublic(true, 'hex'); ///\n\n  return publicKey;\n}\n\nexports.recoverPublicKey = recoverPublicKey;\n\nfunction recoverAddress(digest, signature) {\n  return exports.getAddressFromPublicKey(recoverPublicKey(bytes.arrayify(digest) || new Uint8Array(), signature));\n}\n\nexports.recoverAddress = recoverAddress;\n/**\n * isValidChecksumAddress\n *\n * takes hex-encoded string and returns boolean if address is checksumed\n *\n * @param {string} address\n * @returns {boolean}\n */\n\nexports.isValidChecksumAddress = function (address) {\n  return utils_1.isAddress(address.replace('0x', '')) && exports.toChecksumAddress(address) === address;\n};\n\nexports.validatePrivateKey = function (privateKey) {\n  var ecKey = secp256k1.keyFromPrivate(utils_1.strip0x(privateKey), 'hex');\n  var result = ecKey.validate().result;\n  return result;\n};","map":{"version":3,"mappings":"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","names":["secp256k1","elliptic_1","ec","exports","entropy","random_1","innerHex","keccak256_1","bytes","concat","middleHex","outerHex","privateKey","publicHash","slice","publicKey","address","compress","utils_1","Error","ecKey","keyFromPrivate","getPublic","keyFromPublic","bech32_1","match","errors","throwError","INVALID_ARGUMENT","arg","value","toLowerCase","chars","substring","split","hashed","Uint8Array","i","charCodeAt","arrayify","toUpperCase","join","digest","keyPair","signature","sign","canonical","result","recoveryParam","r","hexZeroPad","toString","s","v","verifySignature","getContractAddress","from","nonce","addr","rlp_1","stripZeros","hexlify","recoverPublicKey","sig","splitSignature","rs","recovered","recoverPubKey","key","encode","recoverAddress","replace","validate"],"sourceRoot":"","sources":["../src/keyTool.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}