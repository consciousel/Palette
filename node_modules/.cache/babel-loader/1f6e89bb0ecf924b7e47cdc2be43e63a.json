{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BytesBinaryCodec = void 0;\n\nconst bytes_1 = require(\"../typesystem/bytes\");\n\nconst constants_1 = require(\"./constants\");\n/**\n * Encodes and decodes \"BytesValue\" objects\n * with respect to: {@link https://docs.elrond.com/developers/developer-reference/elrond-serialization-format/ | The Elrond Serialization Format}.\n */\n\n\nclass BytesBinaryCodec {\n  decodeNested(buffer) {\n    let length = buffer.readUInt32BE();\n    let payload = buffer.slice(constants_1.SizeOfU32, constants_1.SizeOfU32 + length);\n    let result = new bytes_1.BytesValue(payload);\n    return [result, constants_1.SizeOfU32 + length];\n  }\n\n  decodeTopLevel(buffer) {\n    return new bytes_1.BytesValue(buffer);\n  }\n\n  encodeNested(bytes) {\n    let lengthBuffer = Buffer.alloc(constants_1.SizeOfU32);\n    lengthBuffer.writeUInt32BE(bytes.getLength());\n    let buffer = Buffer.concat([lengthBuffer, bytes.valueOf()]);\n    return buffer;\n  }\n\n  encodeTopLevel(bytes) {\n    return bytes.valueOf();\n  }\n\n}\n\nexports.BytesBinaryCodec = BytesBinaryCodec;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;AAEA;;;;;;AAIA,MAAaA,gBAAb,CAA6B;AACzBC,cAAY,CAACC,MAAD,EAAe;AACvB,QAAIC,MAAM,GAAGD,MAAM,CAACE,YAAP,EAAb;AACA,QAAIC,OAAO,GAAGH,MAAM,CAACI,KAAP,CAAaC,qBAAb,EAAwBA,wBAAYJ,MAApC,CAAd;AACA,QAAIK,MAAM,GAAG,IAAIC,kBAAJ,CAAeJ,OAAf,CAAb;AACA,WAAO,CAACG,MAAD,EAASD,wBAAYJ,MAArB,CAAP;AACH;;AAEDO,gBAAc,CAACR,MAAD,EAAe;AACzB,WAAO,IAAIO,kBAAJ,CAAeP,MAAf,CAAP;AACH;;AAEDS,cAAY,CAACC,KAAD,EAAkB;AAC1B,QAAIC,YAAY,GAAGC,MAAM,CAACC,KAAP,CAAaR,qBAAb,CAAnB;AACAM,gBAAY,CAACG,aAAb,CAA2BJ,KAAK,CAACK,SAAN,EAA3B;AACA,QAAIf,MAAM,GAAGY,MAAM,CAACI,MAAP,CAAc,CAACL,YAAD,EAAeD,KAAK,CAACO,OAAN,EAAf,CAAd,CAAb;AACA,WAAOjB,MAAP;AACH;;AAEDkB,gBAAc,CAACR,KAAD,EAAkB;AAC5B,WAAOA,KAAK,CAACO,OAAN,EAAP;AACH;;AArBwB;;AAA7BE","names":["BytesBinaryCodec","decodeNested","buffer","length","readUInt32BE","payload","slice","constants_1","result","bytes_1","decodeTopLevel","encodeNested","bytes","lengthBuffer","Buffer","alloc","writeUInt32BE","getLength","concat","valueOf","encodeTopLevel","exports"],"sourceRoot":"","sources":["../../../src/smartcontracts/codec/bytes.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}