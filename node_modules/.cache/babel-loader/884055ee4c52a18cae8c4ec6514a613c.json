{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeSerializer = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst _1 = require(\".\");\n\nconst __1 = require(\"..\");\n\nconst testutils_1 = require(\"../testutils\");\n\nconst argumentErrorContext_1 = require(\"./argumentErrorContext\");\n\nconst smartContract_1 = require(\"./smartContract\");\n\nconst contractWrapper_1 = require(\"./wrapper/contractWrapper\");\n\nvar NativeSerializer;\n\n(function (NativeSerializer) {\n  /**\n   * Interprets a set of native javascript values into a set of typed values, given parameter definitions.\n   */\n  function nativeToTypedValues(args, endpoint) {\n    args = args || [];\n    args = handleVariadicArgsAndRePack(args, endpoint);\n    let parameters = endpoint.input;\n    let values = [];\n\n    for (let i in parameters) {\n      let parameter = parameters[i];\n      let errorContext = new argumentErrorContext_1.ArgumentErrorContext(endpoint.name, i, parameter);\n      let value = convertToTypedValue(args[i], parameter.type, errorContext);\n      values.push(value);\n    }\n\n    return values;\n  }\n\n  NativeSerializer.nativeToTypedValues = nativeToTypedValues;\n\n  function handleVariadicArgsAndRePack(args, endpoint) {\n    let parameters = endpoint.input;\n    let {\n      min,\n      max,\n      variadic\n    } = getArgumentsCardinality(parameters);\n\n    if (!(min <= args.length && args.length <= max)) {\n      throw new __1.ErrInvalidArgument(`Wrong number of arguments for endpoint ${endpoint.name}: expected between ${min} and ${max} arguments, have ${args.length}`);\n    }\n\n    if (variadic) {\n      let lastArgIndex = parameters.length - 1;\n      let lastArg = args.slice(lastArgIndex);\n\n      if (lastArg.length > 0) {\n        args[lastArgIndex] = lastArg;\n      }\n    }\n\n    return args;\n  } // A function may have one of the following formats:\n  // f(arg1, arg2, optional<arg3>, optional<arg4>) returns { min: 2, max: 4, variadic: false }\n  // f(arg1, variadic<bytes>) returns { min: 1, max: Infinity, variadic: true }\n  // f(arg1, arg2, optional<arg3>, arg4, optional<arg5>, variadic<bytes>) returns { min: 2, max: Infinity, variadic: true }\n\n\n  function getArgumentsCardinality(parameters) {\n    let reversed = [...parameters].reverse(); // keep the original unchanged\n\n    let min = parameters.length;\n    let max = parameters.length;\n    let variadic = false;\n\n    if (reversed.length > 0 && reversed[0].type.getCardinality().isComposite()) {\n      max = Infinity;\n      variadic = true;\n    }\n\n    for (let parameter of reversed) {\n      if (parameter.type.getCardinality().isSingular()) {\n        break;\n      }\n\n      min -= 1;\n    }\n\n    return {\n      min,\n      max,\n      variadic\n    };\n  }\n\n  function convertToTypedValue(native, type, errorContext) {\n    if (type instanceof _1.OptionType) {\n      return toOptionValue(native, type, errorContext);\n    }\n\n    if (type instanceof _1.OptionalType) {\n      return toOptionalValue(native, type, errorContext);\n    }\n\n    if (type instanceof _1.VariadicType) {\n      return toVariadicValue(native, type, errorContext);\n    }\n\n    if (type instanceof _1.CompositeType) {\n      return toCompositeValue(native, type, errorContext);\n    }\n\n    if (type instanceof _1.ListType) {\n      return toListValue(native, type, errorContext);\n    }\n\n    if (type instanceof _1.PrimitiveType) {\n      return toPrimitive(native, type, errorContext);\n    }\n\n    errorContext.throwError(`convertToTypedValue: unhandled type ${type}`);\n  }\n\n  function toOptionValue(native, type, errorContext) {\n    if (native == null) {\n      return _1.OptionValue.newMissing();\n    }\n\n    let converted = convertToTypedValue(native, type.getFirstTypeParameter(), errorContext);\n    return _1.OptionValue.newProvided(converted);\n  }\n\n  function toOptionalValue(native, type, errorContext) {\n    if (native == null) {\n      return new _1.OptionalValue(type);\n    }\n\n    let converted = convertToTypedValue(native, type.getFirstTypeParameter(), errorContext);\n    return new _1.OptionalValue(type, converted);\n  }\n\n  function toVariadicValue(native, type, errorContext) {\n    if (native == null) {\n      native = [];\n    }\n\n    if (native.map === undefined) {\n      errorContext.convertError(native, \"Variadic\");\n    }\n\n    let converted = native.map(function (item) {\n      return convertToTypedValue(item, type.getFirstTypeParameter(), errorContext);\n    });\n    return new _1.VariadicValue(type, converted);\n  }\n\n  function toListValue(native, type, errorContext) {\n    if (native.map === undefined) {\n      errorContext.convertError(native, \"List\");\n    }\n\n    let converted = native.map(function (item) {\n      return convertToTypedValue(item, type.getFirstTypeParameter(), errorContext);\n    });\n    return new _1.List(type, converted);\n  }\n\n  function toCompositeValue(native, type, errorContext) {\n    let typedValues = [];\n    let typeParameters = type.getTypeParameters();\n    errorContext.guardSameLength(native, typeParameters);\n\n    for (let i in typeParameters) {\n      typedValues.push(convertToTypedValue(native[i], typeParameters[i], errorContext));\n    }\n\n    return new _1.CompositeValue(type, typedValues);\n  }\n\n  function toPrimitive(native, type, errorContext) {\n    if (type instanceof _1.NumericalType) {\n      let number = new bignumber_js_1.default(native);\n      return convertNumericalType(number, type, errorContext);\n    }\n\n    if (type instanceof _1.BytesType) {\n      return convertNativeToBytesValue(native, errorContext);\n    }\n\n    if (type instanceof _1.AddressType) {\n      return new _1.AddressValue(convertNativeToAddress(native, errorContext));\n    }\n\n    if (type instanceof _1.BooleanType) {\n      return new _1.BooleanValue(native);\n    }\n\n    if (type instanceof _1.TokenIdentifierType) {\n      return new _1.TokenIdentifierValue(convertNativeToBuffer(native, errorContext));\n    }\n\n    errorContext.throwError(`(function: toPrimitive) unsupported type ${type}`);\n  }\n\n  function convertNativeToBytesValue(native, errorContext) {\n    if (native instanceof _1.Code) {\n      return _1.BytesValue.fromHex(native.toString());\n    }\n\n    if (native instanceof Buffer) {\n      return new _1.BytesValue(native);\n    }\n\n    if (typeof native === \"string\") {\n      return _1.BytesValue.fromUTF8(native);\n    }\n\n    if (native.getTokenIdentifier) {\n      return _1.BytesValue.fromUTF8(native.getTokenIdentifier());\n    }\n\n    errorContext.convertError(native, \"BytesValue\");\n  }\n\n  function convertNativeToBuffer(native, errorContext) {\n    if (native instanceof Buffer) {\n      return native;\n    }\n\n    if (typeof native === \"string\") {\n      return Buffer.from(native);\n    }\n\n    if (native.getTokenIdentifier) {\n      return Buffer.from(native.getTokenIdentifier());\n    }\n\n    errorContext.convertError(native, \"Buffer\");\n  }\n\n  function convertNativeToAddress(native, errorContext) {\n    switch (native.constructor) {\n      case __1.Address:\n      case Buffer:\n      case String:\n        return new __1.Address(native);\n\n      case contractWrapper_1.ContractWrapper:\n        return native.getAddress();\n\n      case smartContract_1.SmartContract:\n        return native.getAddress();\n\n      case testutils_1.TestWallet:\n        return native.address;\n\n      default:\n        errorContext.convertError(native, \"Address\");\n    }\n  }\n\n  NativeSerializer.convertNativeToAddress = convertNativeToAddress;\n\n  function convertNumericalType(number, type, errorContext) {\n    switch (type.constructor) {\n      case _1.U8Type:\n        return new _1.U8Value(number);\n\n      case _1.I8Type:\n        return new _1.I8Value(number);\n\n      case _1.U16Type:\n        return new _1.U16Value(number);\n\n      case _1.I16Type:\n        return new _1.I16Value(number);\n\n      case _1.U32Type:\n        return new _1.U32Value(number);\n\n      case _1.I32Type:\n        return new _1.I32Value(number);\n\n      case _1.U64Type:\n        return new _1.U64Value(number);\n\n      case _1.I64Type:\n        return new _1.I64Value(number);\n\n      case _1.BigUIntType:\n        return new _1.BigUIntValue(number);\n\n      case _1.BigIntType:\n        return new _1.BigIntValue(number);\n\n      default:\n        errorContext.unhandledType(\"convertNumericalType\", type);\n    }\n  }\n})(NativeSerializer = exports.NativeSerializer || (exports.NativeSerializer = {}));","map":{"version":3,"mappings":"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","names":["NativeSerializer","nativeToTypedValues","args","endpoint","handleVariadicArgsAndRePack","parameters","input","values","i","parameter","errorContext","argumentErrorContext_1","name","value","convertToTypedValue","type","push","min","max","variadic","getArgumentsCardinality","length","__1","lastArgIndex","lastArg","slice","reversed","reverse","getCardinality","isComposite","Infinity","isSingular","native","_1","toOptionValue","toOptionalValue","toVariadicValue","toCompositeValue","toListValue","toPrimitive","throwError","newMissing","converted","getFirstTypeParameter","newProvided","map","undefined","convertError","item","typedValues","typeParameters","getTypeParameters","guardSameLength","number","bignumber_js_1","convertNumericalType","convertNativeToBytesValue","convertNativeToAddress","convertNativeToBuffer","fromHex","toString","Buffer","fromUTF8","getTokenIdentifier","from","constructor","String","contractWrapper_1","getAddress","smartContract_1","testutils_1","address","unhandledType","exports"],"sourceRoot":"","sources":["../../src/smartcontracts/nativeSerializer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}