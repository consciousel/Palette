{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddImmediateResult = exports.MarkNotarized = exports.Wait = exports.MockProvider = void 0;\n\nconst transaction_1 = require(\"../transaction\");\n\nconst transactionOnNetwork_1 = require(\"../transactionOnNetwork\");\n\nconst networkConfig_1 = require(\"../networkConfig\");\n\nconst address_1 = require(\"../address\");\n\nconst nonce_1 = require(\"../nonce\");\n\nconst asyncTimer_1 = require(\"../asyncTimer\");\n\nconst account_1 = require(\"../account\");\n\nconst balance_1 = require(\"../balance\");\n\nconst errors = __importStar(require(\"../errors\"));\n\nconst queryResponse_1 = require(\"../smartcontracts/queryResponse\");\n\nconst hash_1 = require(\"../hash\");\n\nconst networkStatus_1 = require(\"../networkStatus\");\n\nconst events_1 = require(\"../events\");\n/**\n * A mock {@link IProvider}, used for tests only.\n */\n\n\nclass MockProvider {\n  constructor() {\n    this.queryResponders = [];\n    this.transactions = new Map();\n    this.onTransactionSent = new events_1.TypedEvent();\n    this.accounts = new Map();\n    this.accounts.set(MockProvider.AddressOfAlice.bech32(), new account_1.AccountOnNetwork({\n      nonce: new nonce_1.Nonce(0),\n      balance: balance_1.Balance.egld(1000)\n    }));\n    this.accounts.set(MockProvider.AddressOfBob.bech32(), new account_1.AccountOnNetwork({\n      nonce: new nonce_1.Nonce(5),\n      balance: balance_1.Balance.egld(500)\n    }));\n    this.accounts.set(MockProvider.AddressOfCarol.bech32(), new account_1.AccountOnNetwork({\n      nonce: new nonce_1.Nonce(42),\n      balance: balance_1.Balance.egld(300)\n    }));\n  }\n\n  getAccountEsdtBalance(_address, _tokenBalanceBuilder) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  doPostGeneric(_resourceUrl, _payload, _callback) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  doGetGeneric(_resourceUrl, _callback) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  mockUpdateAccount(address, mutate) {\n    let account = this.accounts.get(address.bech32());\n\n    if (account) {\n      mutate(account);\n    }\n  }\n\n  mockUpdateTransaction(hash, mutate) {\n    let transaction = this.transactions.get(hash.toString());\n\n    if (transaction) {\n      mutate(transaction);\n    }\n  }\n\n  mockPutTransaction(hash, item) {\n    this.transactions.set(hash.toString(), item);\n  }\n\n  mockQueryResponseOnFunction(functionName, response) {\n    let predicate = query => query.func.name == functionName;\n\n    this.queryResponders.push(new QueryResponder(predicate, response));\n  }\n\n  mockQueryResponse(predicate, response) {\n    this.queryResponders.push(new QueryResponder(predicate, response));\n  }\n\n  mockTransactionTimeline(transaction, timelinePoints) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield transaction.awaitHashed();\n      return this.mockTransactionTimelineByHash(transaction.getHash(), timelinePoints);\n    });\n  }\n\n  mockNextTransactionTimeline(timelinePoints) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let transaction = yield this.nextTransactionSent();\n      return this.mockTransactionTimelineByHash(transaction.getHash(), timelinePoints);\n    });\n  }\n\n  nextTransactionSent() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise((resolve, _reject) => {\n        this.onTransactionSent.on(eventArgs => resolve(eventArgs.transaction));\n      });\n    });\n  }\n\n  mockTransactionTimelineByHash(hash, timelinePoints) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let timeline = new asyncTimer_1.AsyncTimer(`mock timeline of ${hash}`);\n      yield timeline.start(0);\n\n      for (const point of timelinePoints) {\n        if (point instanceof transaction_1.TransactionStatus) {\n          this.mockUpdateTransaction(hash, transaction => {\n            transaction.status = point;\n          });\n        } else if (point instanceof MarkNotarized) {\n          this.mockUpdateTransaction(hash, transaction => {\n            transaction.hyperblockNonce = new nonce_1.Nonce(42);\n            transaction.hyperblockHash = new hash_1.Hash(\"a\".repeat(32));\n          });\n        } else if (point instanceof AddImmediateResult) {\n          this.mockUpdateTransaction(hash, transaction => {\n            transaction.getSmartContractResults().getImmediate().data = point.data;\n          });\n        } else if (point instanceof Wait) {\n          yield timeline.start(point.milliseconds);\n        }\n      }\n    });\n  }\n\n  getAccount(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let account = this.accounts.get(address.bech32());\n\n      if (account) {\n        return account;\n      }\n\n      return new account_1.AccountOnNetwork();\n    });\n  }\n\n  getAddressEsdt(_address, _tokenIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return {};\n    });\n  }\n\n  getAddressEsdtList(_address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return {};\n    });\n  }\n\n  getAddressNft(_address, _tokenIdentifier, _nonce) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return {};\n    });\n  }\n\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.mockPutTransaction(transaction.getHash(), new transactionOnNetwork_1.TransactionOnNetwork({\n        nonce: transaction.getNonce(),\n        sender: transaction.getSender(),\n        receiver: transaction.getReceiver(),\n        data: transaction.getData(),\n        status: new transaction_1.TransactionStatus(\"pending\")\n      }));\n      this.onTransactionSent.emit({\n        transaction: transaction\n      });\n      return transaction.getHash();\n    });\n  }\n\n  simulateTransaction(_transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return {};\n    });\n  }\n\n  getTransaction(txHash, _hintSender, _withResults) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let transaction = this.transactions.get(txHash.toString());\n\n      if (transaction) {\n        return transaction;\n      }\n\n      throw new errors.ErrMock(\"Transaction not found\");\n    });\n  }\n\n  getTransactionStatus(txHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let transaction = this.transactions.get(txHash.toString());\n\n      if (transaction) {\n        return transaction.status;\n      }\n\n      throw new errors.ErrMock(\"Transaction not found\");\n    });\n  }\n\n  getNetworkConfig() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new networkConfig_1.NetworkConfig();\n    });\n  }\n\n  getNetworkStatus() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new networkStatus_1.NetworkStatus();\n    });\n  }\n\n  queryContract(query) {\n    return __awaiter(this, void 0, void 0, function* () {\n      for (const responder of this.queryResponders) {\n        if (responder.matches(query)) {\n          return responder.response;\n        }\n      }\n\n      return new queryResponse_1.QueryResponse();\n    });\n  }\n\n}\n\nexports.MockProvider = MockProvider;\nMockProvider.AddressOfAlice = new address_1.Address(\"erd1qyu5wthldzr8wx5c9ucg8kjagg0jfs53s8nr3zpz3hypefsdd8ssycr6th\");\nMockProvider.AddressOfBob = new address_1.Address(\"erd1spyavw0956vq68xj8y4tenjpq2wd5a9p2c6j8gsz7ztyrnpxrruqzu66jx\");\nMockProvider.AddressOfCarol = new address_1.Address(\"erd1k2s324ww2g0yj38qn2ch2jwctdy8mnfxep94q9arncc6xecg3xaq6mjse8\");\n\nclass Wait {\n  constructor(milliseconds) {\n    this.milliseconds = milliseconds;\n  }\n\n}\n\nexports.Wait = Wait;\n\nclass MarkNotarized {}\n\nexports.MarkNotarized = MarkNotarized;\n\nclass AddImmediateResult {\n  constructor(data) {\n    this.data = data;\n  }\n\n}\n\nexports.AddImmediateResult = AddImmediateResult;\n\nclass QueryResponder {\n  constructor(matches, response) {\n    this.matches = matches || (_ => true);\n\n    this.response = response || new queryResponse_1.QueryResponse();\n  }\n\n}","map":{"version":3,"mappings":"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","names":["MockProvider","constructor","transactions","Map","onTransactionSent","events_1","accounts","set","AddressOfAlice","bech32","account_1","nonce","nonce_1","balance","balance_1","egld","AddressOfBob","AddressOfCarol","getAccountEsdtBalance","_address","_tokenBalanceBuilder","Error","doPostGeneric","_resourceUrl","_payload","_callback","doGetGeneric","mockUpdateAccount","address","mutate","account","get","mockUpdateTransaction","hash","transaction","toString","mockPutTransaction","item","mockQueryResponseOnFunction","functionName","response","predicate","query","func","name","queryResponders","push","QueryResponder","mockQueryResponse","mockTransactionTimeline","timelinePoints","awaitHashed","mockTransactionTimelineByHash","getHash","mockNextTransactionTimeline","nextTransactionSent","Promise","resolve","_reject","on","eventArgs","timeline","asyncTimer_1","start","point","transaction_1","status","MarkNotarized","hyperblockNonce","hyperblockHash","hash_1","repeat","AddImmediateResult","getSmartContractResults","getImmediate","data","Wait","milliseconds","getAccount","getAddressEsdt","_tokenIdentifier","getAddressEsdtList","getAddressNft","_nonce","sendTransaction","transactionOnNetwork_1","getNonce","sender","getSender","receiver","getReceiver","getData","emit","simulateTransaction","_transaction","getTransaction","txHash","_hintSender","_withResults","errors","ErrMock","getTransactionStatus","getNetworkConfig","networkConfig_1","getNetworkStatus","networkStatus_1","queryContract","responder","matches","queryResponse_1","exports","address_1","_"],"sourceRoot":"","sources":["../../src/testutils/mockProvider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}