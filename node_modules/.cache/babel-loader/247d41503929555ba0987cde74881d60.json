{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isJwtValidator from 'validator/lib/isJWT';\nexport var IS_JWT = 'isJwt';\n/**\n * Checks if the string is valid JWT token.\n * If given value is not a string, then it returns false.\n */\n\nexport function isJWT(value) {\n  return typeof value === 'string' && isJwtValidator(value);\n}\n/**\n * Checks if the string is valid JWT token.\n * If given value is not a string, then it returns false.\n */\n\nexport function IsJWT(validationOptions) {\n  return ValidateBy({\n    name: IS_JWT,\n    validator: {\n      validate: function (value, args) {\n        return isJWT(value);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a jwt string';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAT,EAAuBC,UAAvB,QAAyC,sBAAzC;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AAEA,OAAO,IAAMC,MAAM,GAAG,OAAf;AAEP;;;;;AAIA,OAAM,SAAUC,KAAV,CAAgBC,KAAhB,EAA8B;AAClC,SAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BH,cAAc,CAACG,KAAD,CAAlD;AACD;AAED;;;;;AAIA,OAAM,SAAUC,KAAV,CAAgBC,iBAAhB,EAAqD;AACzD,SAAON,UAAU,CACf;AACEO,QAAI,EAAEL,MADR;AAEEM,aAAS,EAAE;AACTC,cAAQ,EAAE,UAACL,KAAD,EAAQM,IAAR,EAAY;AAAc,oBAAK,CAACN,KAAD,CAAL;AAAY,OADvC;AAETO,oBAAc,EAAEZ,YAAY,CAAC,sBAAU;AAAI,yBAAU,GAAG,gCAAb;AAA6C,OAA5D,EAA8DO,iBAA9D;AAFnB;AAFb,GADe,EAQfA,iBARe,CAAjB;AAUD","names":["buildMessage","ValidateBy","isJwtValidator","IS_JWT","isJWT","value","IsJWT","validationOptions","name","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsJWT.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}