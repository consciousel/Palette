{"ast":null,"code":"import SturdyWebSocket from \"sturdy-websocket\";\nimport { w3cwebsocket } from \"websocket\";\nimport { makeJsonRpcPayloadFactory, makeJsonRpcSenders } from \"../util/jsonRpc\";\nimport { VERSION } from \"../version\";\nimport { makeJsonRpcHttpSender } from \"./alchemySendHttp\";\nimport { makeWebSocketSender } from \"./alchemySendWebSocket\";\nimport { makeAlchemyHttpProvider } from \"./httpProvider\";\nimport { makeJsonRpcPayloadSender } from \"./sendJsonRpcPayload\";\nimport { makeRestPayloadSender } from \"./sendRestPayload\";\nimport { AlchemyWebSocketProvider } from \"./webSocketProvider\";\nvar NODE_MAX_WS_FRAME_SIZE = 100 * 1024 * 1024; // 100 MB\n\nexport function makeAlchemyContext(url, config) {\n  var makeJsonRpcPayload = makeJsonRpcPayloadFactory();\n  var restSender = makeRestPayloadSender({\n    config: config,\n    url: url\n  });\n\n  if (/^https?:\\/\\//.test(url)) {\n    var alchemySendJsonrRpc = makeJsonRpcHttpSender(url);\n\n    var _a = makeJsonRpcPayloadSender(alchemySendJsonrRpc, config),\n        sendJsonRpcPayload = _a.sendJsonRpcPayload,\n        setWriteProvider = _a.setWriteProvider;\n\n    var jsonRpcSenders = makeJsonRpcSenders(sendJsonRpcPayload, makeJsonRpcPayload);\n    var provider = makeAlchemyHttpProvider(sendJsonRpcPayload);\n    return {\n      provider: provider,\n      jsonRpcSenders: jsonRpcSenders,\n      restSender: restSender,\n      setWriteProvider: setWriteProvider\n    };\n  } else if (/^wss?:\\/\\//.test(url)) {\n    var protocol = isAlchemyUrl(url) ? \"alchemy-web3-\" + VERSION : undefined;\n    var ws = new SturdyWebSocket(url, protocol, {\n      wsConstructor: getWebSocketConstructor()\n    });\n    var alchemySend = makeWebSocketSender(ws);\n\n    var _b = makeJsonRpcPayloadSender(alchemySend, config),\n        sendJsonRpcPayload = _b.sendJsonRpcPayload,\n        setWriteProvider = _b.setWriteProvider;\n\n    var jsonRpcSenders = makeJsonRpcSenders(sendJsonRpcPayload, makeJsonRpcPayload);\n    var provider = new AlchemyWebSocketProvider(ws, sendJsonRpcPayload, jsonRpcSenders);\n    return {\n      provider: provider,\n      jsonRpcSenders: jsonRpcSenders,\n      restSender: restSender,\n      setWriteProvider: setWriteProvider\n    };\n  } else {\n    throw new Error(\"Alchemy URL protocol must be one of http, https, ws, or wss. Recieved: \" + url);\n  }\n}\n\nfunction getWebSocketConstructor() {\n  return isNodeEnvironment() ? function (url, protocols) {\n    return new w3cwebsocket(url, protocols, undefined, undefined, undefined, {\n      maxReceivedMessageSize: NODE_MAX_WS_FRAME_SIZE,\n      maxReceivedFrameSize: NODE_MAX_WS_FRAME_SIZE\n    });\n  } : WebSocket;\n}\n\nfunction isNodeEnvironment() {\n  return typeof process !== \"undefined\" && process != null && process.versions != null && process.versions.node != null;\n}\n\nfunction isAlchemyUrl(url) {\n  return url.indexOf(\"alchemy.com\") >= 0 || url.indexOf(\"alchemyapi.io\") >= 0;\n}","map":{"version":3,"mappings":"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","names":["SturdyWebSocket","w3cwebsocket","makeJsonRpcPayloadFactory","makeJsonRpcSenders","VERSION","makeJsonRpcHttpSender","makeWebSocketSender","makeAlchemyHttpProvider","makeJsonRpcPayloadSender","makeRestPayloadSender","AlchemyWebSocketProvider","NODE_MAX_WS_FRAME_SIZE","makeAlchemyContext","url","config","makeJsonRpcPayload","restSender","test","alchemySendJsonrRpc","sendJsonRpcPayload","setWriteProvider","jsonRpcSenders","provider","protocol","isAlchemyUrl","undefined","ws","wsConstructor","getWebSocketConstructor","alchemySend","Error","isNodeEnvironment","protocols","maxReceivedMessageSize","maxReceivedFrameSize","WebSocket","process","versions","node","indexOf"],"sourceRoot":"","sources":["../../../src/web3-adapter/alchemyContext.ts"],"sourcesContent":["import SturdyWebSocket from \"sturdy-websocket\";\nimport { w3cwebsocket } from \"websocket\";\nimport { FullConfig, Provider } from \"../types\";\nimport {\n  JsonRpcSenders,\n  makeJsonRpcPayloadFactory,\n  makeJsonRpcSenders,\n} from \"../util/jsonRpc\";\nimport { VERSION } from \"../version\";\nimport { makeJsonRpcHttpSender } from \"./alchemySendHttp\";\nimport { makeWebSocketSender } from \"./alchemySendWebSocket\";\nimport { makeAlchemyHttpProvider } from \"./httpProvider\";\nimport { makeJsonRpcPayloadSender } from \"./sendJsonRpcPayload\";\nimport { makeRestPayloadSender, RestPayloadSender } from \"./sendRestPayload\";\nimport { AlchemyWebSocketProvider } from \"./webSocketProvider\";\n\nconst NODE_MAX_WS_FRAME_SIZE = 100 * 1024 * 1024; // 100 MB\n\nexport interface AlchemyContext {\n  provider: any;\n  restSender: RestPayloadSender;\n  jsonRpcSenders: JsonRpcSenders;\n  setWriteProvider(provider: Provider | null | undefined): void;\n}\n\nexport function makeAlchemyContext(\n  url: string,\n  config: FullConfig,\n): AlchemyContext {\n  const makeJsonRpcPayload = makeJsonRpcPayloadFactory();\n  const restSender = makeRestPayloadSender({\n    config,\n    url,\n  });\n  if (/^https?:\\/\\//.test(url)) {\n    const alchemySendJsonrRpc = makeJsonRpcHttpSender(url);\n    const { sendJsonRpcPayload, setWriteProvider } = makeJsonRpcPayloadSender(\n      alchemySendJsonrRpc,\n      config,\n    );\n    const jsonRpcSenders = makeJsonRpcSenders(\n      sendJsonRpcPayload,\n      makeJsonRpcPayload,\n    );\n    const provider = makeAlchemyHttpProvider(sendJsonRpcPayload);\n    return { provider, jsonRpcSenders, restSender, setWriteProvider };\n  } else if (/^wss?:\\/\\//.test(url)) {\n    const protocol = isAlchemyUrl(url) ? `alchemy-web3-${VERSION}` : undefined;\n    const ws = new SturdyWebSocket(url, protocol, {\n      wsConstructor: getWebSocketConstructor(),\n    });\n    const alchemySend = makeWebSocketSender(ws);\n    const { sendJsonRpcPayload, setWriteProvider } = makeJsonRpcPayloadSender(\n      alchemySend,\n      config,\n    );\n    const jsonRpcSenders = makeJsonRpcSenders(\n      sendJsonRpcPayload,\n      makeJsonRpcPayload,\n    );\n    const provider = new AlchemyWebSocketProvider(\n      ws,\n      sendJsonRpcPayload,\n      jsonRpcSenders,\n    );\n    return { provider, jsonRpcSenders, restSender, setWriteProvider };\n  } else {\n    throw new Error(\n      `Alchemy URL protocol must be one of http, https, ws, or wss. Recieved: ${url}`,\n    );\n  }\n}\n\nfunction getWebSocketConstructor(): any {\n  return isNodeEnvironment()\n    ? (url: string, protocols?: string | string[] | undefined) =>\n        new w3cwebsocket(url, protocols, undefined, undefined, undefined, {\n          maxReceivedMessageSize: NODE_MAX_WS_FRAME_SIZE,\n          maxReceivedFrameSize: NODE_MAX_WS_FRAME_SIZE,\n        })\n    : WebSocket;\n}\n\nfunction isNodeEnvironment(): boolean {\n  return (\n    typeof process !== \"undefined\" &&\n    process != null &&\n    process.versions != null &&\n    process.versions.node != null\n  );\n}\n\nfunction isAlchemyUrl(url: string): boolean {\n  return url.indexOf(\"alchemy.com\") >= 0 || url.indexOf(\"alchemyapi.io\") >= 0;\n}\n"]},"metadata":{},"sourceType":"module"}