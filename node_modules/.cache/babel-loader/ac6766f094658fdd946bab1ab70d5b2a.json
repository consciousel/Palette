{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar BN = require('../crypto/bn');\n\nvar BufferUtil = require('../util/buffer');\n\nvar BufferReader = require('../encoding/bufferreader');\n\nvar BufferWriter = require('../encoding/bufferwriter');\n\nvar Hash = require('../crypto/hash');\n\nvar JSUtil = require('../util/js');\n\nvar $ = require('../util/preconditions');\n\nvar Script = require('../script');\n\nvar GENESIS_BITS = 0x1d00ffff;\n/**\n * Instantiate a BlockHeader from a Buffer, JSON object, or Object with\n * the properties of the BlockHeader\n *\n * @param {*} - A Buffer, JSON string, or Object\n * @returns {BlockHeader} - An instance of block header\n * @constructor\n */\n\nvar BlockHeader = function BlockHeader(arg) {\n  if (!(this instanceof BlockHeader)) {\n    return new BlockHeader(arg);\n  }\n\n  var info = BlockHeader._from(arg);\n\n  this.version = info.version;\n  this.prevHash = info.prevHash;\n  this.merkleRoot = info.merkleRoot;\n  this.time = info.time;\n  this.timestamp = info.time;\n  this.bits = info.bits;\n  this.nonce = info.nonce;\n\n  if (info.hash) {\n    $.checkState(this.hash === info.hash, 'Argument object hash property does not match block hash.');\n  }\n\n  return this;\n};\n/**\n * @param {*} - A Buffer, JSON string or Object\n * @returns {Object} - An object representing block header data\n * @throws {TypeError} - If the argument was not recognized\n * @private\n */\n\n\nBlockHeader._from = function _from(arg) {\n  var info = {};\n\n  if (BufferUtil.isBuffer(arg)) {\n    info = BlockHeader._fromBufferReader(BufferReader(arg));\n  } else if (_.isObject(arg)) {\n    info = BlockHeader._fromObject(arg);\n  } else {\n    throw new TypeError('Unrecognized argument for BlockHeader');\n  }\n\n  return info;\n};\n/**\n * @param {Object} - A JSON string\n * @returns {Object} - An object representing block header data\n * @private\n */\n\n\nBlockHeader._fromObject = function _fromObject(data) {\n  $.checkArgument(data, 'data is required');\n  var prevHash = data.prevHash;\n  var merkleRoot = data.merkleRoot;\n\n  if (_.isString(data.prevHash)) {\n    prevHash = BufferUtil.reverse(Buffer.from(data.prevHash, 'hex'));\n  }\n\n  if (_.isString(data.merkleRoot)) {\n    merkleRoot = BufferUtil.reverse(Buffer.from(data.merkleRoot, 'hex'));\n  }\n\n  var info = {\n    hash: data.hash,\n    version: data.version,\n    prevHash: prevHash,\n    merkleRoot: merkleRoot,\n    time: data.time,\n    timestamp: data.time,\n    bits: data.bits,\n    nonce: data.nonce\n  };\n  return info;\n};\n/**\n * @param {Object} - A plain JavaScript object\n * @returns {BlockHeader} - An instance of block header\n */\n\n\nBlockHeader.fromObject = function fromObject(obj) {\n  var info = BlockHeader._fromObject(obj);\n\n  return new BlockHeader(info);\n};\n/**\n * @param {Binary} - Raw block binary data or buffer\n * @returns {BlockHeader} - An instance of block header\n */\n\n\nBlockHeader.fromRawBlock = function fromRawBlock(data) {\n  if (!BufferUtil.isBuffer(data)) {\n    data = Buffer.from(data, 'binary');\n  }\n\n  var br = BufferReader(data);\n  br.pos = BlockHeader.Constants.START_OF_HEADER;\n\n  var info = BlockHeader._fromBufferReader(br);\n\n  return new BlockHeader(info);\n};\n/**\n * @param {Buffer} - A buffer of the block header\n * @returns {BlockHeader} - An instance of block header\n */\n\n\nBlockHeader.fromBuffer = function fromBuffer(buf) {\n  var info = BlockHeader._fromBufferReader(BufferReader(buf));\n\n  return new BlockHeader(info);\n};\n/**\n * @param {string} - A hex encoded buffer of the block header\n * @returns {BlockHeader} - An instance of block header\n */\n\n\nBlockHeader.fromString = function fromString(str) {\n  var buf = Buffer.from(str, 'hex');\n  return BlockHeader.fromBuffer(buf);\n};\n/**\n * @param {BufferReader} - A BufferReader of the block header\n * @returns {Object} - An object representing block header data\n * @private\n */\n\n\nBlockHeader._fromBufferReader = function _fromBufferReader(br) {\n  var info = {};\n  info.version = br.readInt32LE();\n  info.prevHash = br.read(32);\n  info.merkleRoot = br.read(32);\n  info.time = br.readUInt32LE();\n  info.bits = br.readUInt32LE();\n  info.nonce = br.readUInt32LE();\n  return info;\n};\n/**\n * @param {BufferReader} - A BufferReader of the block header\n * @returns {BlockHeader} - An instance of block header\n */\n\n\nBlockHeader.fromBufferReader = function fromBufferReader(br) {\n  var info = BlockHeader._fromBufferReader(br);\n\n  const header = new BlockHeader(info);\n\n  header._parseAuxPoW(br);\n\n  return header;\n};\n/**\n * @returns {Object} - A plain object of the BlockHeader\n */\n\n\nBlockHeader.prototype.toObject = BlockHeader.prototype.toJSON = function toObject() {\n  return {\n    hash: this.hash,\n    version: this.version,\n    prevHash: BufferUtil.reverse(this.prevHash).toString('hex'),\n    merkleRoot: BufferUtil.reverse(this.merkleRoot).toString('hex'),\n    time: this.time,\n    bits: this.bits,\n    nonce: this.nonce\n  };\n};\n/**\n * @returns {Buffer} - A Buffer of the BlockHeader\n */\n\n\nBlockHeader.prototype.toBuffer = function toBuffer() {\n  return this.toBufferWriter().concat();\n};\n/**\n * @returns {string} - A hex encoded string of the BlockHeader\n */\n\n\nBlockHeader.prototype.toString = function toString() {\n  return this.toBuffer().toString('hex');\n};\n/**\n * @param {BufferWriter} - An existing instance BufferWriter\n * @returns {BufferWriter} - An instance of BufferWriter representation of the BlockHeader\n */\n\n\nBlockHeader.prototype.toBufferWriter = function toBufferWriter(bw) {\n  if (!bw) {\n    bw = new BufferWriter();\n  }\n\n  bw.writeInt32LE(this.version);\n  bw.write(this.prevHash);\n  bw.write(this.merkleRoot);\n  bw.writeUInt32LE(this.time);\n  bw.writeUInt32LE(this.bits);\n  bw.writeUInt32LE(this.nonce);\n  return bw;\n};\n/**\n * Returns the target difficulty for this block\n * @param {Number} bits\n * @returns {BN} An instance of BN with the decoded difficulty bits\n */\n\n\nBlockHeader.prototype.getTargetDifficulty = function getTargetDifficulty(bits) {\n  bits = bits || this.bits;\n  var target = new BN(bits & 0xffffff);\n  var mov = 8 * ((bits >>> 24) - 3);\n\n  while (mov-- > 0) {\n    target = target.mul(new BN(2));\n  }\n\n  return target;\n};\n/**\n * @link https://en.bitcoin.it/wiki/Difficulty\n * @return {Number}\n */\n\n\nBlockHeader.prototype.getDifficulty = function getDifficulty() {\n  var difficulty1TargetBN = this.getTargetDifficulty(GENESIS_BITS).mul(new BN(Math.pow(10, 8)));\n  var currentTargetBN = this.getTargetDifficulty();\n  var difficultyString = difficulty1TargetBN.div(currentTargetBN).toString(10);\n  var decimalPos = difficultyString.length - 8;\n  difficultyString = difficultyString.slice(0, decimalPos) + '.' + difficultyString.slice(decimalPos);\n  return parseFloat(difficultyString);\n};\n/**\n * @returns {Buffer} - The little endian hash buffer of the header\n */\n\n\nBlockHeader.prototype._getHash = function hash() {\n  var buf = this.toBuffer();\n  return Hash.sha256sha256(buf);\n};\n\nvar idProperty = {\n  configurable: false,\n  enumerable: true,\n\n  /**\n   * @returns {string} - The big endian hash buffer of the header\n   */\n  get: function () {\n    if (!this._id) {\n      this._id = BufferReader(this._getHash()).readReverse().toString('hex');\n    }\n\n    return this._id;\n  },\n  set: _.noop\n};\nObject.defineProperty(BlockHeader.prototype, 'id', idProperty);\nObject.defineProperty(BlockHeader.prototype, 'hash', idProperty);\n/**\n * @returns {Boolean} - If timestamp is not too far in the future\n */\n\nBlockHeader.prototype.validTimestamp = function validTimestamp() {\n  var currentTime = Math.round(new Date().getTime() / 1000);\n\n  if (this.time > currentTime + BlockHeader.Constants.MAX_TIME_OFFSET) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * @returns {Boolean} - If the proof-of-work hash satisfies the target difficulty\n */\n\n\nBlockHeader.prototype.validProofOfWork = function validProofOfWork() {\n  // For Litecoin, we use the scrypt hash to calculate proof of work\n  var pow = new BN(Hash.scrypt(this.toBuffer()));\n  var target = this.getTargetDifficulty();\n\n  if (pow.cmp(target) > 0) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * @returns {string} - A string formatted for the console\n */\n\n\nBlockHeader.prototype.inspect = function inspect() {\n  return '<BlockHeader ' + this.id + '>';\n};\n/**\n * Parse the Aux Proof-of-Work block in the block header\n * Ref: https://en.bitcoin.it/wiki/Merged_mining_specification#Aux_proof-of-work_block\n * @param {BufferReader} br - BufferReader containing the header\n */\n\n\nBlockHeader.prototype._parseAuxPoW = function (br) {\n  // Reference for AuxPoW bit:\n  // https://github.com/dogecoin/dogecoin/blob/0b46a40ed125d7bf4b5a485b91350bc8bdc48fc8/src/primitives/pureheader.h#L131\n  if (!(this.version & 1 << 8)) {\n    return this;\n  } // Coinbase Txn\n\n\n  const getTxn = () => {\n    const version = br.readInt32LE(); // If flag is 1, then has witness(es) (see below)\n\n    let flag = 0;\n\n    if (br.buf.readUInt16BE(br.pos) === 1) {\n      flag = br.readUInt16BE();\n    } // Tx_ins\n\n\n    const getTxIn = () => {\n      const prevOutput = {\n        hash: br.read(32),\n        index: br.read(4)\n      };\n      const scriptLen = br.readVarintNum();\n      const script = br.read(scriptLen);\n      const sequence = br.readUInt32LE();\n      return {\n        prevOutput,\n        scriptLen,\n        script,\n        sequence\n      };\n    };\n\n    const txInCount = br.readVarintNum();\n    const txIn = [];\n\n    for (let i = 0; i < txInCount; i++) {\n      txIn.push(getTxIn());\n    } // Tx_outs\n\n\n    const getTxOut = () => {\n      const value = br.read(8);\n      const pkScriptLen = br.readVarintNum();\n      const pkScript = br.read(pkScriptLen);\n      return {\n        value,\n        scriptLen: pkScriptLen,\n        script: new Script(pkScript)\n      };\n    };\n\n    const txOutCount = br.readVarintNum();\n    const txOut = [];\n\n    for (let i = 0; i < txOutCount; i++) {\n      txOut.push(getTxOut());\n    } // Tx_witnesses\n\n\n    const txWitnesses = [];\n\n    if (flag) {\n      for (let i = 0; i < txInCount; i++) {\n        const componentCnt = br.readVarintNum();\n\n        for (let j = 0; j < componentCnt; j++) {\n          const componentLen = br.readVarintNum();\n          txWitnesses.push(br.read(componentLen));\n        }\n      }\n    } // Locktime\n\n\n    const lockTime = br.readUInt32LE();\n    return {\n      version,\n      flag,\n      txInCount,\n      txIn,\n      txOutCount,\n      txOut,\n      txWitnesses,\n      lockTime\n    };\n  }; // Could possibly use Transaction().fromBufferReader(br), but it's throwing due to bnNum instanceof BN === false ??\n\n\n  const coinbaseTxn = getTxn();\n  const blockHash = br.read(32);\n\n  const merkleBranch = () => {\n    const branchLen = br.readVarintNum();\n    const branchHashes = [];\n\n    for (let j = 0; j < branchLen; j++) {\n      branchHashes.push(br.readReverse(32));\n    }\n\n    const branchSideMask = br.readInt32LE();\n    return {\n      branchLen,\n      branchHashes,\n      branchSideMask\n    };\n  };\n\n  const coinbaseBranch = merkleBranch();\n  const blockchainBranch = merkleBranch();\n  let parentBlock = br.read(80);\n  parentBlock = new BlockHeader(parentBlock);\n  this.auxpow = {\n    coinbaseTxn,\n    blockHash,\n    coinbaseBranch,\n    blockchainBranch,\n    parentBlock\n  };\n  return this;\n};\n\nBlockHeader.Constants = {\n  START_OF_HEADER: 8,\n  // Start buffer position in raw block data\n  MAX_TIME_OFFSET: 2 * 60 * 60,\n  // The max a timestamp can be in the future\n  LARGEST_HASH: new BN('10000000000000000000000000000000000000000000000000000000000000000', 'hex')\n};\nmodule.exports = BlockHeader;","map":{"version":3,"sources":["C:/Users/masho/OneDrive/Desktop/Blockchain/Biconomy/Projects/NFT_minter/node_modules/bitcore-lib-doge/lib/block/blockheader.js"],"names":["_","require","BN","BufferUtil","BufferReader","BufferWriter","Hash","JSUtil","$","Script","GENESIS_BITS","BlockHeader","arg","info","_from","version","prevHash","merkleRoot","time","timestamp","bits","nonce","hash","checkState","isBuffer","_fromBufferReader","isObject","_fromObject","TypeError","data","checkArgument","isString","reverse","Buffer","from","fromObject","obj","fromRawBlock","br","pos","Constants","START_OF_HEADER","fromBuffer","buf","fromString","str","readInt32LE","read","readUInt32LE","fromBufferReader","header","_parseAuxPoW","prototype","toObject","toJSON","toString","toBuffer","toBufferWriter","concat","bw","writeInt32LE","write","writeUInt32LE","getTargetDifficulty","target","mov","mul","getDifficulty","difficulty1TargetBN","Math","pow","currentTargetBN","difficultyString","div","decimalPos","length","slice","parseFloat","_getHash","sha256sha256","idProperty","configurable","enumerable","get","_id","readReverse","set","noop","Object","defineProperty","validTimestamp","currentTime","round","Date","getTime","MAX_TIME_OFFSET","validProofOfWork","scrypt","cmp","inspect","id","getTxn","flag","readUInt16BE","getTxIn","prevOutput","index","scriptLen","readVarintNum","script","sequence","txInCount","txIn","i","push","getTxOut","value","pkScriptLen","pkScript","txOutCount","txOut","txWitnesses","componentCnt","j","componentLen","lockTime","coinbaseTxn","blockHash","merkleBranch","branchLen","branchHashes","branchSideMask","coinbaseBranch","blockchainBranch","parentBlock","auxpow","LARGEST_HASH","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar BN = require('../crypto/bn');\nvar BufferUtil = require('../util/buffer');\nvar BufferReader = require('../encoding/bufferreader');\nvar BufferWriter = require('../encoding/bufferwriter');\nvar Hash = require('../crypto/hash');\nvar JSUtil = require('../util/js');\nvar $ = require('../util/preconditions');\nvar Script = require('../script');\n\nvar GENESIS_BITS = 0x1d00ffff;\n\n/**\n * Instantiate a BlockHeader from a Buffer, JSON object, or Object with\n * the properties of the BlockHeader\n *\n * @param {*} - A Buffer, JSON string, or Object\n * @returns {BlockHeader} - An instance of block header\n * @constructor\n */\nvar BlockHeader = function BlockHeader(arg) {\n  if (!(this instanceof BlockHeader)) {\n    return new BlockHeader(arg);\n  }\n  var info = BlockHeader._from(arg);\n  this.version = info.version;\n  this.prevHash = info.prevHash;\n  this.merkleRoot = info.merkleRoot;\n  this.time = info.time;\n  this.timestamp = info.time;\n  this.bits = info.bits;\n  this.nonce = info.nonce;\n\n  if (info.hash) {\n    $.checkState(\n      this.hash === info.hash,\n      'Argument object hash property does not match block hash.'\n    );\n  }\n\n  return this;\n};\n\n/**\n * @param {*} - A Buffer, JSON string or Object\n * @returns {Object} - An object representing block header data\n * @throws {TypeError} - If the argument was not recognized\n * @private\n */\nBlockHeader._from = function _from(arg) {\n  var info = {};\n  if (BufferUtil.isBuffer(arg)) {\n    info = BlockHeader._fromBufferReader(BufferReader(arg));\n  } else if (_.isObject(arg)) {\n    info = BlockHeader._fromObject(arg);\n  } else {\n    throw new TypeError('Unrecognized argument for BlockHeader');\n  }\n  return info;\n};\n\n/**\n * @param {Object} - A JSON string\n * @returns {Object} - An object representing block header data\n * @private\n */\nBlockHeader._fromObject = function _fromObject(data) {\n  $.checkArgument(data, 'data is required');\n  var prevHash = data.prevHash;\n  var merkleRoot = data.merkleRoot;\n  if (_.isString(data.prevHash)) {\n    prevHash = BufferUtil.reverse(Buffer.from(data.prevHash, 'hex'));\n  }\n  if (_.isString(data.merkleRoot)) {\n    merkleRoot = BufferUtil.reverse(Buffer.from(data.merkleRoot, 'hex'));\n  }\n  var info = {\n    hash: data.hash,\n    version: data.version,\n    prevHash: prevHash,\n    merkleRoot: merkleRoot,\n    time: data.time,\n    timestamp: data.time,\n    bits: data.bits,\n    nonce: data.nonce\n  };\n  return info;\n};\n\n/**\n * @param {Object} - A plain JavaScript object\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromObject = function fromObject(obj) {\n  var info = BlockHeader._fromObject(obj);\n  return new BlockHeader(info);\n};\n\n/**\n * @param {Binary} - Raw block binary data or buffer\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromRawBlock = function fromRawBlock(data) {\n  if (!BufferUtil.isBuffer(data)) {\n    data = Buffer.from(data, 'binary');\n  }\n  var br = BufferReader(data);\n  br.pos = BlockHeader.Constants.START_OF_HEADER;\n  var info = BlockHeader._fromBufferReader(br);\n  return new BlockHeader(info);\n};\n\n/**\n * @param {Buffer} - A buffer of the block header\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromBuffer = function fromBuffer(buf) {\n  var info = BlockHeader._fromBufferReader(BufferReader(buf));\n  return new BlockHeader(info);\n};\n\n/**\n * @param {string} - A hex encoded buffer of the block header\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromString = function fromString(str) {\n  var buf = Buffer.from(str, 'hex');\n  return BlockHeader.fromBuffer(buf);\n};\n\n/**\n * @param {BufferReader} - A BufferReader of the block header\n * @returns {Object} - An object representing block header data\n * @private\n */\nBlockHeader._fromBufferReader = function _fromBufferReader(br) {\n  var info = {};\n  info.version = br.readInt32LE();\n  info.prevHash = br.read(32);\n  info.merkleRoot = br.read(32);\n  info.time = br.readUInt32LE();\n  info.bits = br.readUInt32LE();\n  info.nonce = br.readUInt32LE();\n  return info;\n};\n\n/**\n * @param {BufferReader} - A BufferReader of the block header\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromBufferReader = function fromBufferReader(br) {\n  var info = BlockHeader._fromBufferReader(br);\n  const header = new BlockHeader(info);\n  header._parseAuxPoW(br);\n  return header;\n};\n\n/**\n * @returns {Object} - A plain object of the BlockHeader\n */\nBlockHeader.prototype.toObject = BlockHeader.prototype.toJSON = function toObject() {\n  return {\n    hash: this.hash,\n    version: this.version,\n    prevHash: BufferUtil.reverse(this.prevHash).toString('hex'),\n    merkleRoot: BufferUtil.reverse(this.merkleRoot).toString('hex'),\n    time: this.time,\n    bits: this.bits,\n    nonce: this.nonce\n  };\n};\n\n/**\n * @returns {Buffer} - A Buffer of the BlockHeader\n */\nBlockHeader.prototype.toBuffer = function toBuffer() {\n  return this.toBufferWriter().concat();\n};\n\n/**\n * @returns {string} - A hex encoded string of the BlockHeader\n */\nBlockHeader.prototype.toString = function toString() {\n  return this.toBuffer().toString('hex');\n};\n\n/**\n * @param {BufferWriter} - An existing instance BufferWriter\n * @returns {BufferWriter} - An instance of BufferWriter representation of the BlockHeader\n */\nBlockHeader.prototype.toBufferWriter = function toBufferWriter(bw) {\n  if (!bw) {\n    bw = new BufferWriter();\n  }\n  bw.writeInt32LE(this.version);\n  bw.write(this.prevHash);\n  bw.write(this.merkleRoot);\n  bw.writeUInt32LE(this.time);\n  bw.writeUInt32LE(this.bits);\n  bw.writeUInt32LE(this.nonce);\n  return bw;\n};\n\n/**\n * Returns the target difficulty for this block\n * @param {Number} bits\n * @returns {BN} An instance of BN with the decoded difficulty bits\n */\nBlockHeader.prototype.getTargetDifficulty = function getTargetDifficulty(bits) {\n  bits = bits || this.bits;\n\n  var target = new BN(bits & 0xffffff);\n  var mov = 8 * ((bits >>> 24) - 3);\n  while (mov-- > 0) {\n    target = target.mul(new BN(2));\n  }\n  return target;\n};\n\n/**\n * @link https://en.bitcoin.it/wiki/Difficulty\n * @return {Number}\n */\nBlockHeader.prototype.getDifficulty = function getDifficulty() {\n  var difficulty1TargetBN = this.getTargetDifficulty(GENESIS_BITS).mul(new BN(Math.pow(10, 8)));\n  var currentTargetBN = this.getTargetDifficulty();\n\n  var difficultyString = difficulty1TargetBN.div(currentTargetBN).toString(10);\n  var decimalPos = difficultyString.length - 8;\n  difficultyString = difficultyString.slice(0, decimalPos) + '.' + difficultyString.slice(decimalPos);\n\n  return parseFloat(difficultyString);\n};\n\n/**\n * @returns {Buffer} - The little endian hash buffer of the header\n */\nBlockHeader.prototype._getHash = function hash() {\n  var buf = this.toBuffer();\n  return Hash.sha256sha256(buf);\n};\n\nvar idProperty = {\n  configurable: false,\n  enumerable: true,\n  /**\n   * @returns {string} - The big endian hash buffer of the header\n   */\n  get: function() {\n    if (!this._id) {\n      this._id = BufferReader(this._getHash()).readReverse().toString('hex');\n    }\n    return this._id;\n  },\n  set: _.noop\n};\nObject.defineProperty(BlockHeader.prototype, 'id', idProperty);\nObject.defineProperty(BlockHeader.prototype, 'hash', idProperty);\n\n/**\n * @returns {Boolean} - If timestamp is not too far in the future\n */\nBlockHeader.prototype.validTimestamp = function validTimestamp() {\n  var currentTime = Math.round(new Date().getTime() / 1000);\n  if (this.time > currentTime + BlockHeader.Constants.MAX_TIME_OFFSET) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * @returns {Boolean} - If the proof-of-work hash satisfies the target difficulty\n */\nBlockHeader.prototype.validProofOfWork = function validProofOfWork() {\n  // For Litecoin, we use the scrypt hash to calculate proof of work\n  var pow = new BN(Hash.scrypt(this.toBuffer()));\n  var target = this.getTargetDifficulty();\n\n  if (pow.cmp(target) > 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * @returns {string} - A string formatted for the console\n */\nBlockHeader.prototype.inspect = function inspect() {\n  return '<BlockHeader ' + this.id + '>';\n};\n\n\n/**\n * Parse the Aux Proof-of-Work block in the block header\n * Ref: https://en.bitcoin.it/wiki/Merged_mining_specification#Aux_proof-of-work_block\n * @param {BufferReader} br - BufferReader containing the header\n */\nBlockHeader.prototype._parseAuxPoW = function(br) {\n  // Reference for AuxPoW bit:\n  // https://github.com/dogecoin/dogecoin/blob/0b46a40ed125d7bf4b5a485b91350bc8bdc48fc8/src/primitives/pureheader.h#L131\n  if (!(this.version & 1 << 8)) {\n    return this;\n  }\n\n  // Coinbase Txn\n  const getTxn = () => {\n    const version = br.readInt32LE();\n    // If flag is 1, then has witness(es) (see below)\n    let flag = 0;\n    if (br.buf.readUInt16BE(br.pos) === 1) {\n      flag = br.readUInt16BE();\n    }\n    // Tx_ins\n    const getTxIn = () => {\n      const prevOutput = {\n        hash: br.read(32),\n        index: br.read(4)\n      };\n      const scriptLen = br.readVarintNum();\n      const script = br.read(scriptLen);\n      const sequence = br.readUInt32LE();\n      return {\n        prevOutput,\n        scriptLen,\n        script,\n        sequence\n      }\n    }\n    const txInCount = br.readVarintNum();\n    const txIn = [];\n    for (let i = 0; i < txInCount; i++) {\n      txIn.push(getTxIn());\n    }\n    // Tx_outs\n    const getTxOut = () => {\n      const value = br.read(8);\n      const pkScriptLen = br.readVarintNum();\n      const pkScript = br.read(pkScriptLen);\n      return {\n        value,\n        scriptLen: pkScriptLen,\n        script: new Script(pkScript)\n      }\n    }\n    const txOutCount = br.readVarintNum();\n    const txOut = [];\n    for (let i = 0; i < txOutCount; i++) {\n      txOut.push(getTxOut());\n    }\n    // Tx_witnesses\n    const txWitnesses = [];\n    if (flag) {\n      for (let i = 0; i < txInCount; i++) {\n        const componentCnt = br.readVarintNum();\n        for (let j = 0; j < componentCnt; j++) {\n          const componentLen = br.readVarintNum();\n          txWitnesses.push(br.read(componentLen));\n        }\n      }\n    }\n    // Locktime\n    const lockTime = br.readUInt32LE();\n    return {\n      version,\n      flag,\n      txInCount,\n      txIn,\n      txOutCount,\n      txOut,\n      txWitnesses,\n      lockTime\n    }\n  };\n  \n  // Could possibly use Transaction().fromBufferReader(br), but it's throwing due to bnNum instanceof BN === false ??\n  const coinbaseTxn = getTxn();\n  const blockHash = br.read(32);\n  \n  const merkleBranch = () => {\n    const branchLen = br.readVarintNum();\n    const branchHashes = [];\n    for (let j = 0; j < branchLen; j++) {\n      branchHashes.push(br.readReverse(32));\n    }\n    const branchSideMask = br.readInt32LE();\n    return {\n      branchLen,\n      branchHashes,\n      branchSideMask\n    }\n  };\n  \n  const coinbaseBranch = merkleBranch();\n  const blockchainBranch = merkleBranch();\n  let parentBlock = br.read(80);\n  parentBlock = new BlockHeader(parentBlock);\n\n  this.auxpow = {\n    coinbaseTxn,\n    blockHash,\n    coinbaseBranch,\n    blockchainBranch,\n    parentBlock\n  }\n  \n  return this;\n}\n\nBlockHeader.Constants = {\n  START_OF_HEADER: 8, // Start buffer position in raw block data\n  MAX_TIME_OFFSET: 2 * 60 * 60, // The max a timestamp can be in the future\n  LARGEST_HASH: new BN('10000000000000000000000000000000000000000000000000000000000000000', 'hex')\n};\n\nmodule.exports = BlockHeader;\n"]},"metadata":{},"sourceType":"script"}