{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CodeMetadata = void 0;\n/**\n * The metadata of a Smart Contract, as an abstraction.\n */\n\nclass CodeMetadata {\n  /**\n   * Creates a metadata object. By default, set the `upgradeable` attribute, and uset all others.\n   *\n   * @param upgradeable Whether the contract is upgradeable\n   * @param readable Whether other contracts can read this contract's data (without calling one of its pure functions)\n   * @param payable Whether the contract is payable\n   */\n  constructor() {\n    let upgradeable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let readable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let payable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.upgradeable = upgradeable;\n    this.readable = readable;\n    this.payable = payable;\n  }\n  /**\n   * Adjust the metadata (the `upgradeable` attribute), when preparing the deployment transaction.\n   */\n\n\n  toggleUpgradeable(value) {\n    this.upgradeable = value;\n  }\n  /**\n   * Adjust the metadata (the `readable` attribute), when preparing the deployment transaction.\n   */\n\n\n  toggleReadable(value) {\n    this.readable = value;\n  }\n  /**\n   * Adjust the metadata (the `payable` attribute), when preparing the deployment transaction.\n   */\n\n\n  togglePayable(value) {\n    this.payable = value;\n  }\n  /**\n   * Converts the metadata to the protocol-friendly representation.\n   */\n\n\n  toBuffer() {\n    let byteZero = 0;\n    let byteOne = 0;\n\n    if (this.upgradeable) {\n      byteZero |= ByteZero.Upgradeable;\n    }\n\n    if (this.readable) {\n      byteZero |= ByteZero.Readable;\n    }\n\n    if (this.payable) {\n      byteOne |= ByteOne.Payable;\n    }\n\n    return Buffer.from([byteZero, byteOne]);\n  }\n  /**\n   * Converts the metadata to a hex-encoded string.\n   */\n\n\n  toString() {\n    return this.toBuffer().toString(\"hex\");\n  }\n  /**\n   * Converts the metadata to a pretty, plain JavaScript object.\n   */\n\n\n  toJSON() {\n    return {\n      upgradeable: this.upgradeable,\n      readable: this.readable,\n      payable: this.payable\n    };\n  }\n\n}\n\nexports.CodeMetadata = CodeMetadata;\nvar ByteZero;\n\n(function (ByteZero) {\n  ByteZero[ByteZero[\"Upgradeable\"] = 1] = \"Upgradeable\";\n  ByteZero[ByteZero[\"Reserved2\"] = 2] = \"Reserved2\";\n  ByteZero[ByteZero[\"Readable\"] = 4] = \"Readable\";\n})(ByteZero || (ByteZero = {}));\n\nvar ByteOne;\n\n(function (ByteOne) {\n  ByteOne[ByteOne[\"Reserved1\"] = 1] = \"Reserved1\";\n  ByteOne[ByteOne[\"Payable\"] = 2] = \"Payable\";\n})(ByteOne || (ByteOne = {}));","map":{"version":3,"mappings":";;;;;;AAAA;;;;AAGA,MAAaA,YAAb,CAAyB;AAKrB;;;;;;;AAOAC,gBAA4F;AAAA,QAAhFC,WAAgF,uEAAzD,IAAyD;AAAA,QAAnDC,QAAmD,uEAA/B,KAA+B;AAAA,QAAxBC,OAAwB,uEAAL,KAAK;AACxF,SAAKF,WAAL,GAAmBA,WAAnB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACH;AAED;;;;;AAGAC,mBAAiB,CAACC,KAAD,EAAe;AAC5B,SAAKJ,WAAL,GAAmBI,KAAnB;AACH;AAED;;;;;AAGAC,gBAAc,CAACD,KAAD,EAAe;AACzB,SAAKH,QAAL,GAAgBG,KAAhB;AACH;AAED;;;;;AAGAE,eAAa,CAACF,KAAD,EAAe;AACxB,SAAKF,OAAL,GAAeE,KAAf;AACH;AAED;;;;;AAGAG,UAAQ;AACJ,QAAIC,QAAQ,GAAG,CAAf;AACA,QAAIC,OAAO,GAAG,CAAd;;AAEA,QAAI,KAAKT,WAAT,EAAsB;AAClBQ,cAAQ,IAAIE,QAAQ,CAACC,WAArB;AACH;;AACD,QAAI,KAAKV,QAAT,EAAmB;AACfO,cAAQ,IAAIE,QAAQ,CAACE,QAArB;AACH;;AACD,QAAI,KAAKV,OAAT,EAAkB;AACdO,aAAO,IAAII,OAAO,CAACC,OAAnB;AACH;;AAED,WAAOC,MAAM,CAACC,IAAP,CAAY,CAACR,QAAD,EAAWC,OAAX,CAAZ,CAAP;AACH;AAED;;;;;AAGAQ,UAAQ;AACJ,WAAO,KAAKV,QAAL,GAAgBU,QAAhB,CAAyB,KAAzB,CAAP;AACH;AAED;;;;;AAGAC,QAAM;AACF,WAAO;AACHlB,iBAAW,EAAE,KAAKA,WADf;AAEHC,cAAQ,EAAE,KAAKA,QAFZ;AAGHC,aAAO,EAAE,KAAKA;AAHX,KAAP;AAKH;;AA3EoB;;AAAzBiB;AA8EA,IAAKT,QAAL;;AAAA,WAAKA,QAAL,EAAa;AACTA;AACAA;AACAA;AACH,CAJD,EAAKA,QAAQ,KAARA,QAAQ,MAAb;;AAMA,IAAKG,OAAL;;AAAA,WAAKA,OAAL,EAAY;AACRA;AACAA;AACH,CAHD,EAAKA,OAAO,KAAPA,OAAO,MAAZ","names":["CodeMetadata","constructor","upgradeable","readable","payable","toggleUpgradeable","value","toggleReadable","togglePayable","toBuffer","byteZero","byteOne","ByteZero","Upgradeable","Readable","ByteOne","Payable","Buffer","from","toString","toJSON","exports"],"sourceRoot":"","sources":["../../src/smartcontracts/codeMetadata.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}