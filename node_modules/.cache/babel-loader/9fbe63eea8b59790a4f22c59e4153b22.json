{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst common_1 = require(\"../common\");\n\nconst ledger_1 = require(\"./parse/ledger\");\n\nfunction getLedger() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return __awaiter(this, void 0, void 0, function* () {\n    common_1.validate.getLedger({\n      options\n    });\n    const response = yield this.request('ledger', {\n      ledger_hash: options.ledgerHash,\n      ledger_index: options.ledgerVersion || 'validated',\n      expand: options.includeAllData,\n      transactions: options.includeTransactions,\n      accounts: options.includeState\n    });\n    return ledger_1.parseLedger(response.ledger);\n  });\n}\n\nexports.default = getLedger;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAWA,SAAeA,SAAf,GAEgC;AAAA,MAA9BC,OAA8B,uEAAF,EAAE;;AAG9BC,sBAASF,SAAT,CAAmB;AAACC;AAAD,KAAnB;AAEA,UAAME,QAAQ,GAAG,MAAM,KAAKC,OAAL,CAAa,QAAb,EAAuB;AAC5CC,iBAAW,EAAEJ,OAAO,CAACK,UADuB;AAE5CC,kBAAY,EAAEN,OAAO,CAACO,aAAR,IAAyB,WAFK;AAG5CC,YAAM,EAAER,OAAO,CAACS,cAH4B;AAI5CC,kBAAY,EAAEV,OAAO,CAACW,mBAJsB;AAK5CC,cAAQ,EAAEZ,OAAO,CAACa;AAL0B,KAAvB,CAAvB;AAQA,WAAOC,qBAAYZ,QAAQ,CAACa,MAArB,CAAP;AACD;AAAA;;AAEDC,kBAAejB,SAAf","names":["getLedger","options","common_1","response","request","ledger_hash","ledgerHash","ledger_index","ledgerVersion","expand","includeAllData","transactions","includeTransactions","accounts","includeState","ledger_1","ledger","exports"],"sourceRoot":"","sources":["../../../src/ledger/ledger.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}