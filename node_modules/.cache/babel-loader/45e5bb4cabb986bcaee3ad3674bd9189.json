{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.adaToLovelace = exports.lovelaceToAda = exports.signTransaction = exports.processFeeAndRest = exports.makeWitness = exports.createWitnesses = exports.initTransactionBuilder = exports.addInput = exports.addOutputAda = exports.addOutputLovelace = exports.addUtxoInputs = exports.addInputsPrivateKeys = exports.addAddressInputsWithoutPrivateKey = exports.addAddressInputs = exports.addInputs = exports.addChangeIfNeeded = exports.addFee = exports.addOutputs = exports.signAdaKMSTransaction = exports.sendAdaTransaction = exports.prepareAdaTransaction = void 0;\n\nconst cardano_serialization_lib_nodejs_1 = require(\"@emurgo/cardano-serialization-lib-nodejs\");\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst ada_1 = require(\"../blockchain/ada\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst model_1 = require(\"../model\");\n/**\n * Prepare a signed Ada transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @param transferAdaBlockchain content of the transaction to prepare.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\n\nconst prepareAdaTransaction = async transferAdaBlockchain => {\n  await tatum_1.validateBody(transferAdaBlockchain, model_1.TransferAdaBlockchain);\n  const txBuilder = await exports.initTransactionBuilder();\n  const {\n    to\n  } = transferAdaBlockchain;\n  const {\n    privateKeysToSign,\n    amount: fromAmount\n  } = await exports.addInputs(txBuilder, transferAdaBlockchain);\n  const toAmount = exports.addOutputs(txBuilder, to);\n  await exports.processFeeAndRest(txBuilder, fromAmount, toAmount, transferAdaBlockchain);\n  return exports.signTransaction(txBuilder, transferAdaBlockchain, privateKeysToSign);\n};\n\nexports.prepareAdaTransaction = prepareAdaTransaction;\n/**\n * Send Ada transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendAdaTransaction = async body => {\n  return ada_1.adaBroadcast(await exports.prepareAdaTransaction(body));\n};\n\nexports.sendAdaTransaction = sendAdaTransaction;\n/**\n * Sign Ada pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param privateKeys private keys to sign transaction with.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst signAdaKMSTransaction = async (tx, privateKeys) => {\n  if (tx.chain !== model_1.Currency.ADA) {\n    throw Error('Unsupported chain.');\n  }\n\n  const transferAdaBlockchain = JSON.parse(tx.serializedTransaction).txData;\n  const txBuilder = await exports.initTransactionBuilder();\n  const {\n    to\n  } = transferAdaBlockchain;\n  const {\n    amount: fromAmount\n  } = await exports.addInputs(txBuilder, transferAdaBlockchain);\n  const toAmount = exports.addOutputs(txBuilder, to);\n  await exports.processFeeAndRest(txBuilder, fromAmount, toAmount, transferAdaBlockchain);\n  const txBody = txBuilder.build();\n  const txHash = cardano_serialization_lib_nodejs_1.hash_transaction(txBody);\n  const vKeyWitnesses = cardano_serialization_lib_nodejs_1.Vkeywitnesses.new();\n\n  for (const key of privateKeys) {\n    exports.makeWitness(key, txHash, vKeyWitnesses);\n  }\n\n  const witnesses = cardano_serialization_lib_nodejs_1.TransactionWitnessSet.new();\n  witnesses.set_vkeys(vKeyWitnesses);\n  return Buffer.from(cardano_serialization_lib_nodejs_1.Transaction.new(txBody, witnesses).to_bytes()).toString('hex');\n};\n\nexports.signAdaKMSTransaction = signAdaKMSTransaction;\n\nconst addOutputs = (transactionBuilder, tos) => {\n  let amount = new bignumber_js_1.default(0);\n\n  for (const to of tos) {\n    const valueAdded = exports.addOutputAda(transactionBuilder, to.address, to.value);\n    amount = amount.plus(valueAdded);\n  }\n\n  return amount;\n};\n\nexports.addOutputs = addOutputs;\n\nconst addFee = (txBuilder, feeInLovelace) => {\n  txBuilder.set_fee(cardano_serialization_lib_nodejs_1.BigNum.from_str(feeInLovelace.toString()));\n};\n\nexports.addFee = addFee;\n\nconst addChangeIfNeeded = (txBuilder, changeAddress) => {\n  txBuilder.add_change_if_needed(cardano_serialization_lib_nodejs_1.Address.from_bech32(changeAddress));\n};\n\nexports.addChangeIfNeeded = addChangeIfNeeded;\n\nconst addInputs = async (transactionBuilder, transferAdaBlockchain) => {\n  const {\n    fromUTXO,\n    fromAddress\n  } = transferAdaBlockchain;\n\n  if (fromAddress) {\n    return exports.addAddressInputs(transactionBuilder, fromAddress);\n  }\n\n  if (fromUTXO) {\n    return exports.addUtxoInputs(transactionBuilder, fromUTXO);\n  }\n\n  throw new Error('Field fromAddress or fromUTXO is not filled.');\n};\n\nexports.addInputs = addInputs;\n\nconst addAddressInputs = async (transactionBuilder, fromAddresses) => {\n  const amount = await exports.addAddressInputsWithoutPrivateKey(transactionBuilder, fromAddresses);\n  const privateKeysToSign = await exports.addInputsPrivateKeys(fromAddresses);\n  return {\n    amount,\n    privateKeysToSign\n  };\n};\n\nexports.addAddressInputs = addAddressInputs;\n\nconst addAddressInputsWithoutPrivateKey = async (transactionBuilder, fromAddresses) => {\n  let amount = new bignumber_js_1.default(0);\n\n  for (const fromAddress of fromAddresses) {\n    const {\n      address\n    } = fromAddress;\n    const utxos = await ada_1.adaGetUtxos(address);\n\n    for (const utxo of utxos) {\n      amount = amount.plus(utxo.value);\n      exports.addInput(transactionBuilder, utxo, address);\n    }\n  }\n\n  return amount;\n};\n\nexports.addAddressInputsWithoutPrivateKey = addAddressInputsWithoutPrivateKey;\n\nconst addInputsPrivateKeys = async froms => {\n  const privateKeysToSign = [];\n\n  for (const from of froms) {\n    privateKeysToSign.push(from.signatureId || from.privateKey);\n  }\n\n  return privateKeysToSign;\n};\n\nexports.addInputsPrivateKeys = addInputsPrivateKeys;\n\nconst addUtxoInputs = async (transactionBuilder, fromUTXOs) => {\n  let amount = new bignumber_js_1.default(0);\n  const privateKeysToSign = [];\n\n  for (const utxo of fromUTXOs) {\n    const transaction = await ada_1.adaGetTransaction(utxo.txHash);\n    const output = transaction.outputs.find(output => output.index === utxo.index);\n\n    if (output) {\n      const value = output.value;\n      amount = amount.plus(value);\n      exports.addInput(transactionBuilder, Object.assign({\n        value\n      }, utxo), output.address);\n      privateKeysToSign.push(utxo.signatureId || utxo.privateKey);\n    }\n  }\n\n  return {\n    amount,\n    privateKeysToSign\n  };\n};\n\nexports.addUtxoInputs = addUtxoInputs;\n\nconst addOutputLovelace = (transactionBuilder, address, amount) => {\n  transactionBuilder.add_output(cardano_serialization_lib_nodejs_1.TransactionOutput.new(cardano_serialization_lib_nodejs_1.Address.from_bech32(address), cardano_serialization_lib_nodejs_1.Value.new(cardano_serialization_lib_nodejs_1.BigNum.from_str(amount))));\n};\n\nexports.addOutputLovelace = addOutputLovelace;\n\nconst addOutputAda = (transactionBuilder, address, amount) => {\n  const amountLovelace = exports.adaToLovelace(amount);\n  exports.addOutputLovelace(transactionBuilder, address, amountLovelace);\n  return amountLovelace;\n};\n\nexports.addOutputAda = addOutputAda;\n\nconst addInput = (transactionBuilder, utxo, address) => {\n  transactionBuilder.add_input(cardano_serialization_lib_nodejs_1.Address.from_bech32(address), cardano_serialization_lib_nodejs_1.TransactionInput.new(cardano_serialization_lib_nodejs_1.TransactionHash.from_bytes(Buffer.from(utxo.txHash, 'hex')), utxo.index), cardano_serialization_lib_nodejs_1.Value.new(cardano_serialization_lib_nodejs_1.BigNum.from_str(utxo.value)));\n};\n\nexports.addInput = addInput;\n\nconst initTransactionBuilder = async () => {\n  const txBuilder = cardano_serialization_lib_nodejs_1.TransactionBuilder.new(cardano_serialization_lib_nodejs_1.LinearFee.new(cardano_serialization_lib_nodejs_1.BigNum.from_str('44'), cardano_serialization_lib_nodejs_1.BigNum.from_str('155381')), cardano_serialization_lib_nodejs_1.BigNum.from_str('1000000'), cardano_serialization_lib_nodejs_1.BigNum.from_str('500000000'), cardano_serialization_lib_nodejs_1.BigNum.from_str('2000000'));\n  const {\n    tip: {\n      slotNo\n    }\n  } = await ada_1.adaGetBlockChainInfo();\n  txBuilder.set_ttl(slotNo + 50000);\n  return txBuilder;\n};\n\nexports.initTransactionBuilder = initTransactionBuilder;\n\nconst createWitnesses = (transactionBody, transferAdaBlockchain) => {\n  const {\n    fromAddress,\n    fromUTXO\n  } = transferAdaBlockchain;\n  const txHash = cardano_serialization_lib_nodejs_1.hash_transaction(transactionBody);\n  const vKeyWitnesses = cardano_serialization_lib_nodejs_1.Vkeywitnesses.new();\n\n  if (fromAddress) {\n    for (const address of fromAddress) {\n      if (address.privateKey) {\n        exports.makeWitness(address.privateKey, txHash, vKeyWitnesses);\n      }\n    }\n  } else if (fromUTXO) {\n    for (const utxo of fromUTXO) {\n      if (utxo.privateKey) {\n        exports.makeWitness(utxo.privateKey, txHash, vKeyWitnesses);\n      }\n    }\n  } else {\n    throw new Error('No private key for witness found.');\n  }\n\n  const witnesses = cardano_serialization_lib_nodejs_1.TransactionWitnessSet.new();\n  witnesses.set_vkeys(vKeyWitnesses);\n  return witnesses;\n};\n\nexports.createWitnesses = createWitnesses;\n\nconst makeWitness = (privateKey, txHash, vKeyWitnesses) => {\n  const privateKeyCardano = cardano_serialization_lib_nodejs_1.Bip32PrivateKey.from_128_xprv(Buffer.from(privateKey, 'hex')).to_raw_key();\n  vKeyWitnesses.add(cardano_serialization_lib_nodejs_1.make_vkey_witness(txHash, privateKeyCardano));\n};\n\nexports.makeWitness = makeWitness;\n\nconst processFeeAndRest = async (transactionBuilder, fromAmountInLovelace, toAmountInLovelace, transferAdaBlockchain) => {\n  const feeInLovelace = new bignumber_js_1.default(exports.adaToLovelace((transferAdaBlockchain === null || transferAdaBlockchain === void 0 ? void 0 : transferAdaBlockchain.fee) || 0));\n  const changeAddress = transferAdaBlockchain.changeAddress;\n\n  if (feeInLovelace.isEqualTo(0)) {\n    exports.addChangeIfNeeded(transactionBuilder, changeAddress);\n  } else {\n    const changeInLovelace = fromAmountInLovelace.minus(toAmountInLovelace).minus(feeInLovelace);\n    if (changeInLovelace.gt(0)) exports.addOutputLovelace(transactionBuilder, changeAddress, changeInLovelace.toString());\n    exports.addFee(transactionBuilder, feeInLovelace);\n  }\n};\n\nexports.processFeeAndRest = processFeeAndRest;\n\nconst signTransaction = (transactionBuilder, transferAdaBlockchain, privateKeysToSign) => {\n  const txBody = transactionBuilder.build();\n  const {\n    fromAddress,\n    fromUTXO\n  } = transferAdaBlockchain;\n\n  if (fromAddress && fromAddress[0].signatureId || fromUTXO && fromUTXO[0].signatureId) {\n    return JSON.stringify({\n      txData: transferAdaBlockchain,\n      privateKeysToSign\n    });\n  }\n\n  const witnesses = exports.createWitnesses(txBody, transferAdaBlockchain);\n  return Buffer.from(cardano_serialization_lib_nodejs_1.Transaction.new(txBody, witnesses).to_bytes()).toString('hex');\n};\n\nexports.signTransaction = signTransaction;\n\nconst lovelaceToAda = lovelace => new bignumber_js_1.default(lovelace).dividedBy(1000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR).toString();\n\nexports.lovelaceToAda = lovelaceToAda;\n\nconst adaToLovelace = ada => new bignumber_js_1.default(ada).times(1000000).toString();\n\nexports.adaToLovelace = adaToLovelace;","map":{"version":3,"mappings":"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","names":["prepareAdaTransaction","transferAdaBlockchain","tatum_1","model_1","txBuilder","exports","to","privateKeysToSign","amount","fromAmount","toAmount","sendAdaTransaction","body","ada_1","signAdaKMSTransaction","tx","privateKeys","chain","ADA","Error","JSON","parse","serializedTransaction","txData","txBody","build","txHash","cardano_serialization_lib_nodejs_1","vKeyWitnesses","new","key","witnesses","set_vkeys","Buffer","from","to_bytes","toString","addOutputs","transactionBuilder","tos","bignumber_js_1","valueAdded","address","value","plus","addFee","feeInLovelace","set_fee","from_str","addChangeIfNeeded","changeAddress","add_change_if_needed","from_bech32","addInputs","fromUTXO","fromAddress","addAddressInputs","fromAddresses","addAddressInputsWithoutPrivateKey","utxos","utxo","addInputsPrivateKeys","froms","push","signatureId","privateKey","addUtxoInputs","fromUTXOs","transaction","output","outputs","find","index","Object","addOutputLovelace","add_output","addOutputAda","amountLovelace","addInput","add_input","from_bytes","initTransactionBuilder","tip","slotNo","set_ttl","createWitnesses","transactionBody","makeWitness","privateKeyCardano","from_128_xprv","to_raw_key","add","processFeeAndRest","fromAmountInLovelace","toAmountInLovelace","fee","isEqualTo","changeInLovelace","minus","gt","signTransaction","stringify","lovelaceToAda","lovelace","dividedBy","toFixed","ROUND_FLOOR","adaToLovelace","ada","times"],"sourceRoot":"","sources":["../../../src/transaction/ada.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}