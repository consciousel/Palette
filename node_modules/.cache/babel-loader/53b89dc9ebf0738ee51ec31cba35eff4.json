{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SmartContract = void 0;\n\nconst balance_1 = require(\"../balance\");\n\nconst address_1 = require(\"../address\");\n\nconst transaction_1 = require(\"../transaction\");\n\nconst transactionPayload_1 = require(\"../transactionPayload\");\n\nconst code_1 = require(\"./code\");\n\nconst codeMetadata_1 = require(\"./codeMetadata\");\n\nconst transactionPayloadBuilders_1 = require(\"./transactionPayloadBuilders\");\n\nconst function_1 = require(\"./function\");\n\nconst query_1 = require(\"./query\");\n\nconst utils_1 = require(\"../utils\");\n\nconst utils_2 = require(\"./codec/utils\");\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst interaction_1 = require(\"./interaction\");\n\nconst createKeccakHash = require(\"keccak\");\n/**\n * An abstraction for deploying and interacting with Smart Contracts.\n */\n\n\nclass SmartContract {\n  /**\n   * Create a SmartContract object by providing its address on the Network.\n   */\n  constructor(_ref) {\n    let {\n      address,\n      abi\n    } = _ref;\n    this.owner = new address_1.Address();\n    this.address = new address_1.Address();\n    this.code = code_1.Code.nothing();\n    this.codeMetadata = new codeMetadata_1.CodeMetadata();\n    this.trackOfTransactions = [];\n    /**\n     * This object contains a function for each endpoint defined by the contract.\n     * (a bit similar to web3js's \"contract.methods\").\n     */\n\n    this.methods = {};\n    this.address = address || new address_1.Address();\n    this.abi = abi;\n    this.methods = {};\n\n    if (abi) {\n      this.setupMethods();\n    }\n  }\n\n  setupMethods() {\n    let contract = this;\n    let abi = this.getAbi();\n\n    for (const definition of abi.getAllEndpoints()) {\n      let functionName = definition.name; // For each endpoint defined by the ABI, we attach a function to the \"methods\" object,\n      // a function that receives typed values as arguments\n      // and returns a prepared contract interaction.\n\n      this.methods[functionName] = function (args) {\n        let func = new function_1.ContractFunction(functionName);\n        let interaction = new interaction_1.Interaction(contract, func, func, args || []);\n        return interaction;\n      };\n    }\n  }\n  /**\n   * Sets the address, as on Network.\n   */\n\n\n  setAddress(address) {\n    this.address = address;\n  }\n  /**\n   * Gets the address, as on Network.\n   */\n\n\n  getAddress() {\n    return this.address;\n  }\n  /**\n   * Gets the owner address.\n   *\n   * Note that this function doesn't query the Network, but uses the information acquired when signing a deployment transaction.\n   * Therefore, currently, this function is useful only in the context of deploying Smart Contracts.\n   */\n\n\n  getOwner() {\n    this.owner.assertNotEmpty();\n    return this.owner;\n  }\n  /**\n   * Gets the {@link Code} of the Smart Contract. Does not query the Network.\n   */\n\n\n  getCode() {\n    return this.code;\n  }\n  /**\n   * Gets the {@link CodeMetadata} of the Smart Contract. Does not query the Network.\n   */\n\n\n  getCodeMetadata() {\n    return this.codeMetadata;\n  }\n\n  setAbi(abi) {\n    this.abi = abi;\n  }\n\n  getAbi() {\n    utils_1.guardValueIsSet(\"abi\", this.abi);\n    return this.abi;\n  }\n  /**\n   * Creates a {@link Transaction} for deploying the Smart Contract to the Network.\n   */\n\n\n  deploy(_ref2) {\n    let {\n      code,\n      codeMetadata,\n      initArguments,\n      value,\n      gasLimit\n    } = _ref2;\n    codeMetadata = codeMetadata || new codeMetadata_1.CodeMetadata();\n    initArguments = initArguments || [];\n    value = value || balance_1.Balance.Zero();\n    let payload = transactionPayload_1.TransactionPayload.contractDeploy().setCode(code).setCodeMetadata(codeMetadata).setInitArgs(initArguments).build();\n    let transaction = new transaction_1.Transaction({\n      receiver: address_1.Address.Zero(),\n      value: value,\n      gasLimit: gasLimit,\n      data: payload\n    });\n    this.code = code;\n    this.codeMetadata = codeMetadata;\n    transaction.onSigned.on(this.onDeploySigned.bind(this));\n    return transaction;\n  }\n\n  onDeploySigned(_ref3) {\n    let {\n      transaction,\n      signedBy\n    } = _ref3;\n    this.owner = signedBy;\n    let nonce = transaction.getNonce();\n    let address = SmartContract.computeAddress(this.owner, nonce);\n    this.setAddress(address);\n    this.trackOfTransactions.push(transaction);\n  }\n  /**\n   * Creates a {@link Transaction} for upgrading the Smart Contract on the Network.\n   */\n\n\n  upgrade(_ref4) {\n    let {\n      code,\n      codeMetadata,\n      initArguments,\n      value,\n      gasLimit\n    } = _ref4;\n    codeMetadata = codeMetadata || new codeMetadata_1.CodeMetadata();\n    initArguments = initArguments || [];\n    value = value || balance_1.Balance.Zero();\n    let payload = transactionPayload_1.TransactionPayload.contractUpgrade().setCode(code).setCodeMetadata(codeMetadata).setInitArgs(initArguments).build();\n    let transaction = new transaction_1.Transaction({\n      receiver: this.getAddress(),\n      value: value,\n      gasLimit: gasLimit,\n      data: payload\n    });\n    this.code = code;\n    this.codeMetadata = codeMetadata;\n    transaction.onSigned.on(this.onUpgradeSigned.bind(this));\n    return transaction;\n  }\n\n  onUpgradeSigned(_ref5) {\n    let {\n      transaction\n    } = _ref5;\n    this.trackOfTransactions.push(transaction);\n  }\n  /**\n   * Creates a {@link Transaction} for calling (a function of) the Smart Contract.\n   */\n\n\n  call(_ref6) {\n    let {\n      func,\n      args,\n      value,\n      gasLimit,\n      receiver\n    } = _ref6;\n    args = args || [];\n    value = value || balance_1.Balance.Zero();\n    let payload = transactionPayload_1.TransactionPayload.contractCall().setFunction(func).setArgs(args).build();\n    let transaction = new transaction_1.Transaction({\n      receiver: receiver ? receiver : this.getAddress(),\n      value: value,\n      gasLimit: gasLimit,\n      data: payload\n    });\n    transaction.onSigned.on(this.onCallSigned.bind(this));\n    return transaction;\n  }\n\n  onCallSigned(_ref7) {\n    let {\n      transaction\n    } = _ref7;\n    this.trackOfTransactions.push(transaction);\n  }\n\n  runQuery(provider, _ref8) {\n    let {\n      func,\n      args,\n      value,\n      caller\n    } = _ref8;\n    return __awaiter(this, void 0, void 0, function* () {\n      let query = new query_1.Query({\n        address: this.address,\n        func: func,\n        args: args,\n        value: value,\n        caller: caller\n      });\n      let response = yield provider.queryContract(query);\n      return response;\n    });\n  }\n  /**\n   * Computes the address of a Smart Contract.\n   * The address is computed deterministically, from the address of the owner and the nonce of the deployment transaction.\n   *\n   * @param owner The owner of the Smart Contract\n   * @param nonce The owner nonce used for the deployment transaction\n   */\n\n\n  static computeAddress(owner, nonce) {\n    let initialPadding = Buffer.alloc(8, 0);\n    let ownerPubkey = owner.pubkey();\n    let shardSelector = ownerPubkey.slice(30);\n    let ownerNonceBytes = Buffer.alloc(8);\n    const bigNonce = new bignumber_js_1.default(nonce.valueOf().toString(10));\n    const bigNonceBuffer = utils_2.bigIntToBuffer(bigNonce);\n    ownerNonceBytes.write(bigNonceBuffer.reverse().toString('hex'), 'hex');\n    let bytesToHash = Buffer.concat([ownerPubkey, ownerNonceBytes]);\n    let hash = createKeccakHash(\"keccak256\").update(bytesToHash).digest();\n    let vmTypeBytes = Buffer.from(transactionPayloadBuilders_1.ArwenVirtualMachine, \"hex\");\n    let addressBytes = Buffer.concat([initialPadding, vmTypeBytes, hash.slice(10, 30), shardSelector]);\n    let address = new address_1.Address(addressBytes);\n    return address;\n  }\n\n}\n\nexports.SmartContract = SmartContract;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AAIA;;AAEA;;AACA;;AACA;;AACA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,QAAD,CAAhC;AAEA;;;;;AAGA,MAAaC,aAAb,CAA0B;AActB;;;AAGAC,oBAA2E;AAAA,QAA/D;AAAEC,aAAF;AAAWC;AAAX,KAA+D;AAhBnE,iBAAiB,IAAIC,iBAAJ,EAAjB;AACA,mBAAmB,IAAIA,iBAAJ,EAAnB;AACA,gBAAaC,YAAKC,OAAL,EAAb;AACA,wBAA6B,IAAIC,2BAAJ,EAA7B;AAES,+BAAqC,EAArC;AAEjB;;;;;AAIgB,mBAAe,EAAf;AAMZ,SAAKL,OAAL,GAAeA,OAAO,IAAI,IAAIE,iBAAJ,EAA1B;AACA,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKK,OAAL,GAAe,EAAf;;AAEA,QAAIL,GAAJ,EAAS;AACL,WAAKM,YAAL;AACH;AACJ;;AAEOA,cAAY;AAChB,QAAIC,QAAQ,GAAG,IAAf;AACA,QAAIP,GAAG,GAAG,KAAKQ,MAAL,EAAV;;AAEA,SAAK,MAAMC,UAAX,IAAyBT,GAAG,CAACU,eAAJ,EAAzB,EAAgD;AAC5C,UAAIC,YAAY,GAAGF,UAAU,CAACG,IAA9B,CAD4C,CAG5C;AACA;AACA;;AACA,WAAKP,OAAL,CAAaM,YAAb,IAA6B,UAAUE,IAAV,EAA4B;AACrD,YAAIC,IAAI,GAAG,IAAIC,2BAAJ,CAAqBJ,YAArB,CAAX;AACA,YAAIK,WAAW,GAAG,IAAIC,yBAAJ,CAAgBV,QAAhB,EAA0BO,IAA1B,EAAgCA,IAAhC,EAAsCD,IAAI,IAAI,EAA9C,CAAlB;AACA,eAAOG,WAAP;AACH,OAJD;AAKH;AACJ;AAED;;;;;AAGAE,YAAU,CAACnB,OAAD,EAAiB;AACvB,SAAKA,OAAL,GAAeA,OAAf;AACH;AAED;;;;;AAGAoB,YAAU;AACN,WAAO,KAAKpB,OAAZ;AACH;AAED;;;;;;;;AAMAqB,UAAQ;AACJ,SAAKC,KAAL,CAAWC,cAAX;AACA,WAAO,KAAKD,KAAZ;AACH;AAED;;;;;AAGAE,SAAO;AACH,WAAO,KAAKC,IAAZ;AACH;AAED;;;;;AAGAC,iBAAe;AACX,WAAO,KAAKC,YAAZ;AACH;;AAEDC,QAAM,CAAC3B,GAAD,EAAsB;AACxB,SAAKA,GAAL,GAAWA,GAAX;AACH;;AAEDQ,QAAM;AACFoB,4BAAgB,KAAhB,EAAuB,KAAK5B,GAA5B;AACA,WAAO,KAAKA,GAAZ;AACH;AAED;;;;;AAGA6B,QAAM,QAAwE;AAAA,QAAvE;AAAEL,UAAF;AAAQE,kBAAR;AAAsBI,mBAAtB;AAAqCC,WAArC;AAA4CC;AAA5C,KAAuE;AAC1EN,gBAAY,GAAGA,YAAY,IAAI,IAAItB,2BAAJ,EAA/B;AACA0B,iBAAa,GAAGA,aAAa,IAAI,EAAjC;AACAC,SAAK,GAAGA,KAAK,IAAIE,kBAAQC,IAAR,EAAjB;AAEA,QAAIC,OAAO,GAAGC,wCAAmBC,cAAnB,GACTC,OADS,CACDd,IADC,EAETe,eAFS,CAEOb,YAFP,EAGTc,WAHS,CAGGV,aAHH,EAITW,KAJS,EAAd;AAMA,QAAIC,WAAW,GAAG,IAAIC,yBAAJ,CAAgB;AAC9BC,cAAQ,EAAE3C,kBAAQiC,IAAR,EADoB;AAE9BH,WAAK,EAAEA,KAFuB;AAG9BC,cAAQ,EAAEA,QAHoB;AAI9Ba,UAAI,EAAEV;AAJwB,KAAhB,CAAlB;AAOA,SAAKX,IAAL,GAAYA,IAAZ;AACA,SAAKE,YAAL,GAAoBA,YAApB;AACAgB,eAAW,CAACI,QAAZ,CAAqBC,EAArB,CAAwB,KAAKC,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAxB;AAEA,WAAOP,WAAP;AACH;;AAEOM,gBAAc,QAA2E;AAAA,QAA1E;AAAEN,iBAAF;AAAeQ;AAAf,KAA0E;AAC7F,SAAK7B,KAAL,GAAa6B,QAAb;AACA,QAAIC,KAAK,GAAGT,WAAW,CAACU,QAAZ,EAAZ;AACA,QAAIrD,OAAO,GAAGF,aAAa,CAACwD,cAAd,CAA6B,KAAKhC,KAAlC,EAAyC8B,KAAzC,CAAd;AACA,SAAKjC,UAAL,CAAgBnB,OAAhB;AAEA,SAAKuD,mBAAL,CAAyBC,IAAzB,CAA8Bb,WAA9B;AACH;AAED;;;;;AAGAc,SAAO,QAAyE;AAAA,QAAxE;AAAEhC,UAAF;AAAQE,kBAAR;AAAsBI,mBAAtB;AAAqCC,WAArC;AAA4CC;AAA5C,KAAwE;AAC5EN,gBAAY,GAAGA,YAAY,IAAI,IAAItB,2BAAJ,EAA/B;AACA0B,iBAAa,GAAGA,aAAa,IAAI,EAAjC;AACAC,SAAK,GAAGA,KAAK,IAAIE,kBAAQC,IAAR,EAAjB;AAEA,QAAIC,OAAO,GAAGC,wCAAmBqB,eAAnB,GACTnB,OADS,CACDd,IADC,EAETe,eAFS,CAEOb,YAFP,EAGTc,WAHS,CAGGV,aAHH,EAITW,KAJS,EAAd;AAMA,QAAIC,WAAW,GAAG,IAAIC,yBAAJ,CAAgB;AAC9BC,cAAQ,EAAE,KAAKzB,UAAL,EADoB;AAE9BY,WAAK,EAAEA,KAFuB;AAG9BC,cAAQ,EAAEA,QAHoB;AAI9Ba,UAAI,EAAEV;AAJwB,KAAhB,CAAlB;AAOA,SAAKX,IAAL,GAAYA,IAAZ;AACA,SAAKE,YAAL,GAAoBA,YAApB;AACAgB,eAAW,CAACI,QAAZ,CAAqBC,EAArB,CAAwB,KAAKW,eAAL,CAAqBT,IAArB,CAA0B,IAA1B,CAAxB;AAEA,WAAOP,WAAP;AACH;;AAEOgB,iBAAe,QAAiE;AAAA,QAAhE;AAAEhB;AAAF,KAAgE;AACpF,SAAKY,mBAAL,CAAyBC,IAAzB,CAA8Bb,WAA9B;AACH;AAED;;;;;AAGAiB,MAAI,QAAyD;AAAA,QAAxD;AAAE7C,UAAF;AAAQD,UAAR;AAAckB,WAAd;AAAqBC,cAArB;AAA+BY;AAA/B,KAAwD;AACzD/B,QAAI,GAAGA,IAAI,IAAI,EAAf;AACAkB,SAAK,GAAGA,KAAK,IAAIE,kBAAQC,IAAR,EAAjB;AAEA,QAAIC,OAAO,GAAGC,wCAAmBwB,YAAnB,GACTC,WADS,CACG/C,IADH,EAETgD,OAFS,CAEDjD,IAFC,EAGT4B,KAHS,EAAd;AAKA,QAAIC,WAAW,GAAG,IAAIC,yBAAJ,CAAgB;AAC9BC,cAAQ,EAAEA,QAAQ,GAAGA,QAAH,GAAc,KAAKzB,UAAL,EADF;AAE9BY,WAAK,EAAEA,KAFuB;AAG9BC,cAAQ,EAAEA,QAHoB;AAI9Ba,UAAI,EAAEV;AAJwB,KAAhB,CAAlB;AAOAO,eAAW,CAACI,QAAZ,CAAqBC,EAArB,CAAwB,KAAKgB,YAAL,CAAkBd,IAAlB,CAAuB,IAAvB,CAAxB;AAEA,WAAOP,WAAP;AACH;;AAEOqB,cAAY,QAAiE;AAAA,QAAhE;AAAErB;AAAF,KAAgE;AACjF,SAAKY,mBAAL,CAAyBC,IAAzB,CAA8Bb,WAA9B;AACH;;AAEKsB,UAAQ,CACVC,QADU,SAEmC;AAAA,QAA7C;AAAEnD,UAAF;AAAQD,UAAR;AAAckB,WAAd;AAAqBmC;AAArB,KAA6C;;AAE7C,UAAIC,KAAK,GAAG,IAAIC,aAAJ,CAAU;AAClBrE,eAAO,EAAE,KAAKA,OADI;AAElBe,YAAI,EAAEA,IAFY;AAGlBD,YAAI,EAAEA,IAHY;AAIlBkB,aAAK,EAAEA,KAJW;AAKlBmC,cAAM,EAAEA;AALU,OAAV,CAAZ;AAQA,UAAIG,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,aAAT,CAAuBH,KAAvB,CAArB;AACA,aAAOE,QAAP;AACH;AAAA;AAED;;;;;;;;;AAOqB,SAAdhB,cAAc,CAAChC,KAAD,EAAiB8B,KAAjB,EAA6B;AAC9C,QAAIoB,cAAc,GAAGC,MAAM,CAACC,KAAP,CAAa,CAAb,EAAgB,CAAhB,CAArB;AACA,QAAIC,WAAW,GAAGrD,KAAK,CAACsD,MAAN,EAAlB;AACA,QAAIC,aAAa,GAAGF,WAAW,CAACG,KAAZ,CAAkB,EAAlB,CAApB;AACA,QAAIC,eAAe,GAAGN,MAAM,CAACC,KAAP,CAAa,CAAb,CAAtB;AAEA,UAAMM,QAAQ,GAAG,IAAIC,sBAAJ,CAAc7B,KAAK,CAAC8B,OAAN,GAAgBC,QAAhB,CAAyB,EAAzB,CAAd,CAAjB;AACA,UAAMC,cAAc,GAAGC,uBAAeL,QAAf,CAAvB;AACAD,mBAAe,CAACO,KAAhB,CAAsBF,cAAc,CAACG,OAAf,GAAyBJ,QAAzB,CAAkC,KAAlC,CAAtB,EAAgE,KAAhE;AAEA,QAAIK,WAAW,GAAGf,MAAM,CAACgB,MAAP,CAAc,CAACd,WAAD,EAAcI,eAAd,CAAd,CAAlB;AACA,QAAIW,IAAI,GAAG9F,gBAAgB,CAAC,WAAD,CAAhB,CAA8B+F,MAA9B,CAAqCH,WAArC,EAAkDI,MAAlD,EAAX;AACA,QAAIC,WAAW,GAAGpB,MAAM,CAACqB,IAAP,CAAYC,gDAAZ,EAAiC,KAAjC,CAAlB;AACA,QAAIC,YAAY,GAAGvB,MAAM,CAACgB,MAAP,CAAc,CAC7BjB,cAD6B,EAE7BqB,WAF6B,EAG7BH,IAAI,CAACZ,KAAL,CAAW,EAAX,EAAe,EAAf,CAH6B,EAI7BD,aAJ6B,CAAd,CAAnB;AAOA,QAAI7E,OAAO,GAAG,IAAIE,iBAAJ,CAAY8F,YAAZ,CAAd;AACA,WAAOhG,OAAP;AACH;;AA3OqB;;AAA1BiG","names":["createKeccakHash","require","SmartContract","constructor","address","abi","address_1","code_1","nothing","codeMetadata_1","methods","setupMethods","contract","getAbi","definition","getAllEndpoints","functionName","name","args","func","function_1","interaction","interaction_1","setAddress","getAddress","getOwner","owner","assertNotEmpty","getCode","code","getCodeMetadata","codeMetadata","setAbi","utils_1","deploy","initArguments","value","gasLimit","balance_1","Zero","payload","transactionPayload_1","contractDeploy","setCode","setCodeMetadata","setInitArgs","build","transaction","transaction_1","receiver","data","onSigned","on","onDeploySigned","bind","signedBy","nonce","getNonce","computeAddress","trackOfTransactions","push","upgrade","contractUpgrade","onUpgradeSigned","call","contractCall","setFunction","setArgs","onCallSigned","runQuery","provider","caller","query","query_1","response","queryContract","initialPadding","Buffer","alloc","ownerPubkey","pubkey","shardSelector","slice","ownerNonceBytes","bigNonce","bignumber_js_1","valueOf","toString","bigNonceBuffer","utils_2","write","reverse","bytesToHash","concat","hash","update","digest","vmTypeBytes","from","transactionPayloadBuilders_1","addressBytes","exports"],"sourceRoot":"","sources":["../../src/smartcontracts/smartContract.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}