"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HDNode = void 0;
const basex_1 = require("@vechain/ethers/utils/basex");
const HD = require("@vechain/ethers/utils/hdnode");
const crypto_1 = require("crypto");
const elliptic_1 = require("elliptic");
const address_1 = require("./address");
// see https://github.com/satoshilabs/slips/blob/master/slip-0044.md
const VET_DERIVATION_PATH = `m/44'/818'/0'/0`;
const xpubPrefix = Buffer.from('0488b21e000000000000000000', 'hex');
const xprivPrefix = Buffer.from('0488ade4000000000000000000', 'hex');
const curve = new elliptic_1.ec('secp256k1');
var HDNode;
(function (HDNode) {
    /** create node from mnemonic words */
    function fromMnemonic(words) {
        const node = HD.fromMnemonic(words.join(' ')).derivePath(VET_DERIVATION_PATH);
        return createHDNode(node);
    }
    HDNode.fromMnemonic = fromMnemonic;
    /**
     * create node from xpub
     * @param pub public key
     * @param chainCode chain code
     */
    function fromPublicKey(pub, chainCode) {
        const compressed = curve.keyFromPublic(pub).getPublic(true, 'array');
        const key = Buffer.concat([xpubPrefix, chainCode, Buffer.from(compressed)]);
        const checksum = sha256(sha256(key)).slice(0, 4);
        const node = HD.fromExtendedKey(basex_1.Base58.encode(Buffer.concat([key, checksum])));
        return createHDNode(node);
    }
    HDNode.fromPublicKey = fromPublicKey;
    /**
     * create node from xpriv
     * @param priv private key
     * @param chainCode chain code
     */
    function fromPrivateKey(priv, chainCode) {
        const key = Buffer.concat([xprivPrefix, chainCode, Buffer.from([0]), priv]);
        const checksum = sha256(sha256(key)).slice(0, 4);
        const node = HD.fromExtendedKey(basex_1.Base58.encode(Buffer.concat([key, checksum])));
        return createHDNode(node);
    }
    HDNode.fromPrivateKey = fromPrivateKey;
    function createHDNode(ethersNode) {
        const pub = Buffer.from(curve.keyFromPublic(ethersNode.publicKey.slice(2), 'hex').getPublic(false, 'array'));
        const priv = ethersNode.privateKey ? Buffer.from(ethersNode.privateKey.slice(2), 'hex') : null;
        const cc = Buffer.from(ethersNode.chainCode.slice(2), 'hex');
        const addr = '0x' + address_1.publicKeyToAddress(pub).toString('hex');
        return {
            get publicKey() {
                return pub;
            },
            get privateKey() {
                return priv;
            },
            get chainCode() {
                return cc;
            },
            get address() {
                return addr;
            },
            derive(index) {
                return createHDNode(ethersNode.derivePath('' + index));
            }
        };
    }
    function sha256(data) {
        return crypto_1.createHash('sha256').update(data).digest();
    }
})(HDNode = exports.HDNode || (exports.HDNode = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGRub2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NyeS9oZG5vZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdURBQW9EO0FBQ3BELG1EQUFrRDtBQUNsRCxtQ0FBbUM7QUFDbkMsdUNBQW1DO0FBQ25DLHVDQUE4QztBQUU5QyxvRUFBb0U7QUFDcEUsTUFBTSxtQkFBbUIsR0FBRyxpQkFBaUIsQ0FBQTtBQUM3QyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLDRCQUE0QixFQUFFLEtBQUssQ0FBQyxDQUFBO0FBQ25FLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsNEJBQTRCLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFDcEUsTUFBTSxLQUFLLEdBQUcsSUFBSSxhQUFFLENBQUMsV0FBVyxDQUFDLENBQUE7QUFXakMsSUFBaUIsTUFBTSxDQThEdEI7QUE5REQsV0FBaUIsTUFBTTtJQUNuQixzQ0FBc0M7SUFDdEMsU0FBZ0IsWUFBWSxDQUFDLEtBQWU7UUFDeEMsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUE7UUFDN0UsT0FBTyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDN0IsQ0FBQztJQUhlLG1CQUFZLGVBRzNCLENBQUE7SUFFRDs7OztPQUlHO0lBQ0gsU0FBZ0IsYUFBYSxDQUFDLEdBQVcsRUFBRSxTQUFpQjtRQUN4RCxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDcEUsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFV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