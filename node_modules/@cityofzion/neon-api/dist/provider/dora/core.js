"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMaxClaimAmount = exports.getHeight = exports.getClaims = exports.getBalance = exports.getRPCEndpoint = void 0;
const neon_core_1 = require("@cityofzion/neon-core");
const axios_1 = __importDefault(require("axios"));
const internal = __importStar(require("../../settings"));
const common_1 = require("../common");
const transform_1 = require("../neoCli/transform");
function getRPCEndpoint(url) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield axios_1.default.get(`${url}/get_all_nodes`);
        let nodes = response.data;
        if (internal.settings.httpsOnly) {
            nodes = common_1.filterHttpsOnly(nodes);
        }
        const goodNodes = common_1.findGoodNodesFromHeight(nodes);
        const bestRPC = yield common_1.getBestUrl(goodNodes);
        return bestRPC;
    });
}
exports.getRPCEndpoint = getRPCEndpoint;
function getBalance(url, address) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield axios_1.default.get(`${url}/get_balance/${address}`);
        const data = response.data;
        if (!data.address) {
            throw new Error("No response. Address might be malformed.");
        }
        return transform_1.transformBalance({ net: url, address, balance: data.balance });
    });
}
exports.getBalance = getBalance;
function getClaims(url, address) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield axios_1.default.get(`${url}/get_claimable/${address}`);
        const data = response.data;
        if (!data.address) {
            throw new Error("No response. Address might be malformed.");
        }
        return transform_1.transformClaims({ net: url, address, claims: data.claimable });
    });
}
exports.getClaims = getClaims;
function getHeight(url) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield axios_1.default.get(`${url}/height`);
        return response.data.height;
    });
}
exports.getHeight = getHeight;
function getMaxClaimAmount(url, address) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield axios_1.default.get(`${url}/get_unclaimed/${address}`);
        const data = response.data;
        if (data.unclaimed === undefined) {
            throw new Error("No response. Address might be malformed.");
        }
        return new neon_core_1.u.Fixed8(data.unclaimed);
    });
}
exports.getMaxClaimAmount = getMaxClaimAmount;
//# sourceMappingURL=core.js.map