var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { CONST, logging, u } from "@cityofzion/neon-core";
import axios from "axios";
import { transformBalance, transformClaims } from "./transform";
const log = logging.default("api");
const BASE_REQ = CONST.DEFAULT_REQ;
function throwRpcError(err) {
    throw new Error(`Encounter error code ${err.code}: ${err.message}`);
}
export function getRPCEndpoint(url) {
    return url;
}
/**
 * Get balances of NEO and GAS for an address
 * @param url - URL of a neonDB service.
 * @param address - Address to check.
 * @return  Balance of address
 */
export function getBalance(url, address) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield axios.post(url, Object.assign({}, BASE_REQ, { method: "getunspents", params: [address] }));
        const data = response.data;
        if (data.error) {
            throwRpcError(data.error);
        }
        const bal = transformBalance({
            net: url,
            address,
            balance: data.result.balance,
        });
        log.info(`Retrieved Balance for ${address} from neonDB ${url}`);
        return bal;
    });
}
export function getClaims(url, address) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield axios.post(url, Object.assign({}, BASE_REQ, { method: "getclaimable", params: [address] }));
        const data = response.data;
        if (data.error) {
            throwRpcError(data.error);
        }
        return transformClaims({ net: url, address, claims: data.result.claimable });
    });
}
export function getMaxClaimAmount(url, address) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield axios.post(url, Object.assign({}, BASE_REQ, { method: "getunclaimed", params: [address] }));
        const data = response.data;
        if (data.error) {
            throwRpcError(data.error);
        }
        return new u.Fixed8(data.result.unclaimed).div(100000000);
    });
}
//# sourceMappingURL=core.js.map