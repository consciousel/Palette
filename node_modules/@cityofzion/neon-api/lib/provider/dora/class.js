var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { logging, settings } from "@cityofzion/neon-core";
import { getBalance, getClaims, getHeight, getMaxClaimAmount, getRPCEndpoint, } from "./core";
const log = logging.default("api");
export class Dora {
    constructor(url) {
        if (settings.networks[url] && settings.networks[url].extra.dora) {
            this.url = settings.networks[url].extra.dora;
        }
        else {
            this.url = url;
        }
        log.info(`Created Neoscan Provider: ${this.url}`);
    }
    get name() {
        return `Dora[${this.url}]`;
    }
    getRPCEndpoint() {
        return getRPCEndpoint(this.url);
    }
    getBalance(address) {
        return getBalance(this.url, address);
    }
    getClaims(address) {
        return getClaims(this.url, address);
    }
    getMaxClaimAmount(address) {
        return getMaxClaimAmount(this.url, address);
    }
    getHeight() {
        return getHeight(this.url);
    }
    getTransactionHistory(_address) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("Method not implemented.");
        });
    }
}
export default Dora;
//# sourceMappingURL=class.js.map