var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { u } from "@cityofzion/neon-core";
import axios from "axios";
import * as internal from "../../settings";
import { filterHttpsOnly, findGoodNodesFromHeight, getBestUrl, } from "../common";
import { transformBalance, transformClaims } from "../neoCli/transform";
export function getRPCEndpoint(url) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield axios.get(`${url}/get_all_nodes`);
        let nodes = response.data;
        if (internal.settings.httpsOnly) {
            nodes = filterHttpsOnly(nodes);
        }
        const goodNodes = findGoodNodesFromHeight(nodes);
        const bestRPC = yield getBestUrl(goodNodes);
        return bestRPC;
    });
}
export function getBalance(url, address) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield axios.get(`${url}/get_balance/${address}`);
        const data = response.data;
        if (!data.address) {
            throw new Error("No response. Address might be malformed.");
        }
        return transformBalance({ net: url, address, balance: data.balance });
    });
}
export function getClaims(url, address) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield axios.get(`${url}/get_claimable/${address}`);
        const data = response.data;
        if (!data.address) {
            throw new Error("No response. Address might be malformed.");
        }
        return transformClaims({ net: url, address, claims: data.claimable });
    });
}
export function getHeight(url) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield axios.get(`${url}/height`);
        return response.data.height;
    });
}
export function getMaxClaimAmount(url, address) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield axios.get(`${url}/get_unclaimed/${address}`);
        const data = response.data;
        if (data.unclaimed === undefined) {
            throw new Error("No response. Address might be malformed.");
        }
        return new u.Fixed8(data.unclaimed);
    });
}
//# sourceMappingURL=core.js.map